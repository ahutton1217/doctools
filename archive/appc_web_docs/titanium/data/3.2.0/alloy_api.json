{
    "Alloy.builtins.animation": {
        "description": "<p>A collection of useful animation utilities. To use the animation builtin library,\nall you need to do is require it with the <code>alloy</code> root directory in your\n<code>require</code> call. For example:</p>\n\n<pre><code>var animation = require('alloy/animation');\nanimation.crossFade(view1, view2, 500, finishCallback);\n</code></pre>\n",
        "properties": [
            {
                "default": null,
                "type": "String",
                "description": "<p>To be used as direction for the flip-method</p>\n",
                "name": "HORIZONTAL",
                "filename": "Alloy.builtins.animation.HORIZONTAL-property"
            },
            {
                "default": null,
                "type": "String",
                "description": "<p>To be used as direction for the flip-method</p>\n",
                "name": "VERTICAL",
                "filename": "Alloy.builtins.animation.VERTICAL-property"
            }
        ],
        "extends": null,
        "events": [],
        "filename": "Alloy.builtins.animation-object",
        "method": [
            {
                "name": "chainAnimate",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Executes a series of animations on the target view.</p>\n",
                "parameters": [
                    {
                        "description": "<p>View to animate.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.chainAnimate-method.view-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "view"
                    },
                    {
                        "description": "<p>A set of animations to execute on <code>view</code> in sequence.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.chainAnimate-method.animations-param",
                        "optional": false,
                        "type": "Titanium.UI.Animation[]",
                        "name": "animations"
                    },
                    {
                        "description": "<p>Callback to invoke once the chain animation is complete.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.chainAnimate-method.finishCallback-param",
                        "optional": true,
                        "type": "function()",
                        "name": "finishCallback"
                    }
                ],
                "filename": "Alloy.builtins.animation.chainAnimate-method"
            },
            {
                "name": "crossFade",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Transitions from one view to another using a cross-fade animation.</p>\n",
                "parameters": [
                    {
                        "description": "<p>View to fade out.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.crossFade-method.from-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "from"
                    },
                    {
                        "description": "<p>View to fade in.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.crossFade-method.to-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "to"
                    },
                    {
                        "description": "<p>Fade duration in milliseconds.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.crossFade-method.duration-param",
                        "optional": false,
                        "type": "Number",
                        "name": "duration"
                    },
                    {
                        "description": "<p>Callback function, invoked after the fade completes.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.crossFade-method.finishCallback-param",
                        "optional": true,
                        "type": "function()",
                        "name": "finishCallback"
                    }
                ],
                "filename": "Alloy.builtins.animation.crossFade-method"
            },
            {
                "name": "fadeAndRemove",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Fades out a view then removes it from its parent view.</p>\n",
                "parameters": [
                    {
                        "description": "<p>View to remove.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.fadeAndRemove-method.from-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "from"
                    },
                    {
                        "description": "<p>Fade duration in milliseconds.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.fadeAndRemove-method.duration-param",
                        "optional": false,
                        "type": "Number",
                        "name": "duration"
                    },
                    {
                        "description": "<p>Parent container view.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.fadeAndRemove-method.container-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "container"
                    },
                    {
                        "description": "<p>Callback function, invoked after the fadeAndRemove completes.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.fadeAndRemove-method.finishCallback-param",
                        "optional": true,
                        "type": "function()",
                        "name": "finishCallback"
                    }
                ],
                "filename": "Alloy.builtins.animation.fadeAndRemove-method"
            },
            {
                "name": "fadeIn",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Fades in the specified view.</p>\n",
                "parameters": [
                    {
                        "description": "<p>View to fade in.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.fadeIn-method.to-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "to"
                    },
                    {
                        "description": "<p>Fade duration in milliseconds.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.fadeIn-method.duration-param",
                        "optional": false,
                        "type": "Number",
                        "name": "duration"
                    },
                    {
                        "description": "<p>Callback function, invoked after the fadeIn completes.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.fadeIn-method.finishCallback-param",
                        "optional": true,
                        "type": "function()",
                        "name": "finishCallback"
                    }
                ],
                "filename": "Alloy.builtins.animation.fadeIn-method"
            },
            {
                "name": "fadeOut",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Fades out the specified view.</p>\n",
                "parameters": [
                    {
                        "description": "<p>View to fade out.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.fadeOut-method.to-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "to"
                    },
                    {
                        "description": "<p>Fade duration in milliseconds.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.fadeOut-method.duration-param",
                        "optional": false,
                        "type": "Number",
                        "name": "duration"
                    },
                    {
                        "description": "<p>Callback function, invoked after the fadeOut completes.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.fadeOut-method.finishCallback-param",
                        "optional": true,
                        "type": "function()",
                        "name": "finishCallback"
                    }
                ],
                "filename": "Alloy.builtins.animation.fadeOut-method"
            },
            {
                "name": "flash",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Flashes the target view twice, fading to partially transparent then back to\nfully-opaque.</p>\n",
                "parameters": [
                    {
                        "description": "<p>View to animate.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flash-method.view-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "view"
                    },
                    {
                        "description": "<p>If specified, animation starts after <code>delay</code> milliseconds.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flash-method.delay-param",
                        "optional": true,
                        "type": "Number",
                        "name": "delay"
                    },
                    {
                        "description": "<p>Callback function, invoked after the flash completes.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flash-method.finishCallback-param",
                        "optional": true,
                        "type": "function()",
                        "name": "finishCallback"
                    }
                ],
                "filename": "Alloy.builtins.animation.flash-method"
            },
            {
                "name": "flip",
                "parameters": [
                    {
                        "description": "<p>View to fade out.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flip-method.from-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "from"
                    },
                    {
                        "description": "<p>View to fade in.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flip-method.to-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "to"
                    },
                    {
                        "description": "<p>direction ('horizontal' or 'vertical') to flip.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flip-method.direction-param",
                        "optional": true,
                        "type": "String",
                        "name": "direction"
                    },
                    {
                        "description": "<p>Fade duration in milliseconds.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flip-method.duration-param",
                        "optional": false,
                        "type": "Number",
                        "name": "duration"
                    },
                    {
                        "description": "<p>Callback function, invoked after the fade completes.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flip-method.finishCallback-param",
                        "optional": true,
                        "type": "function()",
                        "name": "finishCallback"
                    }
                ],
                "filename": "Alloy.builtins.animation.flip-method",
                "platforms": [
                    {
                        "pretty_name": "iPhone",
                        "since": "1.2.2",
                        "name": "iphone"
                    },
                    {
                        "pretty_name": "iPad",
                        "since": "1.2.2",
                        "name": "ipad"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "description": "<p>Transitions from one view to another using a 3D flip animation.\nThe two views need to be positioned on top of each other.\n\n\n"
            },
            {
                "name": "flipHorizontal",
                "parameters": [
                    {
                        "description": "<p>View to fade out.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flipHorizontal-method.from-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "from"
                    },
                    {
                        "description": "<p>View to fade in.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flipHorizontal-method.to-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "to"
                    },
                    {
                        "description": "<p>Fade duration in milliseconds.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flipHorizontal-method.duration-param",
                        "optional": false,
                        "type": "Number",
                        "name": "duration"
                    },
                    {
                        "description": "<p>Callback function, invoked after the fade completes.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flipHorizontal-method.finishCallback-param",
                        "optional": true,
                        "type": "function()",
                        "name": "finishCallback"
                    }
                ],
                "filename": "Alloy.builtins.animation.flipHorizontal-method",
                "platforms": [
                    {
                        "pretty_name": "iPhone",
                        "since": "1.2.2",
                        "name": "iphone"
                    },
                    {
                        "pretty_name": "iPad",
                        "since": "1.2.2",
                        "name": "ipad"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "description": "<p>Transitions from one view to another using a horizontal flip animation.\n\n\n"
            },
            {
                "name": "flipVertical",
                "parameters": [
                    {
                        "description": "<p>View to fade out.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flipVertical-method.from-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "from"
                    },
                    {
                        "description": "<p>View to fade in.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flipVertical-method.to-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "to"
                    },
                    {
                        "description": "<p>Fade duration in milliseconds.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flipVertical-method.duration-param",
                        "optional": false,
                        "type": "Number",
                        "name": "duration"
                    },
                    {
                        "description": "<p>Callback function, invoked after the fade completes.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.flipVertical-method.finishCallback-param",
                        "optional": true,
                        "type": "function()",
                        "name": "finishCallback"
                    }
                ],
                "filename": "Alloy.builtins.animation.flipVertical-method",
                "platforms": [
                    {
                        "pretty_name": "iPhone",
                        "since": "1.2.2",
                        "name": "iphone"
                    },
                    {
                        "pretty_name": "iPad",
                        "since": "1.2.2",
                        "name": "ipad"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "description": "\n\nTransitions from one view to another using a vertical flip animation.</p>\n"
            },
            {
                "name": "popIn",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Makes the specified view appear using a \"pop-in\" animation, which combines a fade-in\nwith a slight expanding and contracting animation, to call attention to the new view.</p>\n",
                "parameters": [
                    {
                        "description": "<p>View to animate.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.popIn-method.view-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "view"
                    },
                    {
                        "description": "<p>Callback function, invoked after the popIn completes.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.popIn-method.finishCallback-param",
                        "optional": true,
                        "type": "function()",
                        "name": "finishCallback"
                    }
                ],
                "filename": "Alloy.builtins.animation.popIn-method"
            },
            {
                "name": "shake",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Creates a shake animation, moving the target view back and forth rapidly several times.</p>\n",
                "parameters": [
                    {
                        "description": "<p>View to animate.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.shake-method.view-param",
                        "optional": false,
                        "type": "Titanium.UI.View",
                        "name": "view"
                    },
                    {
                        "description": "<p>If specified, animation starts after <code>delay</code> milliseconds.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.shake-method.delay-param",
                        "optional": true,
                        "type": "Number",
                        "name": "delay"
                    },
                    {
                        "description": "<p>Callback function, invoked after the shake completes.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.animation.shake-method.finishCallback-param",
                        "optional": true,
                        "type": "function()",
                        "name": "finishCallback"
                    }
                ],
                "filename": "Alloy.builtins.animation.shake-method"
            }
        ],
        "name": "Alloy.builtins.animation"
    },
    "Alloy.builtins.string": {
        "description": "<p>A collection of utilities for manipulating strings.\nTo use the string builtin library,\nrequire it with the <code>alloy</code> root directory in your <code>require</code> call. For example:</p>\n\n<pre><code>var string = require('alloy/string');\nvar text = '     hola, mundo   ';\nTi.API.info(string.ucfirst(string.trim(text))); // --&gt; 'Hola, mundo'\n</code></pre>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.builtins.string-object",
        "method": [
            {
                "name": "formatCurrency",
                "returns": {
                    "type": "String",
                    "summary": "<p>Amount formatted as a currency value.</p>\n"
                },
                "description": "<p>Returns an amount formatted as a currency value.\nUses the device settings to determine the currency symbol.\nOn the Mobile Web platform, the currency symbol will always be dollars ('$').</p>\n",
                "parameters": [
                    {
                        "description": "<p>Amount to format.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.string.formatCurrency-method.amount-param",
                        "optional": false,
                        "type": "String",
                        "name": "amount"
                    }
                ],
                "filename": "Alloy.builtins.string.formatCurrency-method"
            },
            {
                "name": "lcfirst",
                "returns": {
                    "type": "String",
                    "summary": "<p>String with first character lowercased.</p>\n"
                },
                "description": "<p>Lowercases the first character in the string.</p>\n",
                "parameters": [
                    {
                        "description": "<p>String to lowercase.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.string.lcfirst-method.text-param",
                        "optional": false,
                        "type": "String",
                        "name": "text"
                    }
                ],
                "filename": "Alloy.builtins.string.lcfirst-method"
            },
            {
                "name": "trim",
                "returns": {
                    "type": "String",
                    "summary": "<p>String without leading and trailing white space.</p>\n"
                },
                "description": "<p>Removes leading and trailing white space from a string.</p>\n",
                "parameters": [
                    {
                        "description": "<p>String to trim.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.string.trim-method.line-param",
                        "optional": false,
                        "type": "String",
                        "name": "line"
                    }
                ],
                "filename": "Alloy.builtins.string.trim-method"
            },
            {
                "name": "trimZeros",
                "returns": {
                    "type": "Number",
                    "summary": "<p>Number without trailing zeroes.</p>\n"
                },
                "description": "<p>Removes trailing zeroes from a float value after the decimal point.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Number to trim.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.string.trimZeros-method.num-param",
                        "optional": false,
                        "type": "Object",
                        "name": "num"
                    }
                ],
                "filename": "Alloy.builtins.string.trimZeros-method"
            },
            {
                "name": "ucfirst",
                "returns": {
                    "type": "String",
                    "summary": "<p>String with first character capitalized.</p>\n"
                },
                "description": "<p>Capitalizes the first character in the string.</p>\n",
                "parameters": [
                    {
                        "description": "<p>String to capitalize.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.string.ucfirst-method.text-param",
                        "optional": false,
                        "type": "String",
                        "name": "text"
                    }
                ],
                "filename": "Alloy.builtins.string.ucfirst-method"
            },
            {
                "name": "urlDecode",
                "returns": {
                    "type": "String",
                    "summary": "<p>String with URL-encoded characters replaced with ASCII characters.</p>\n"
                },
                "description": "<p>Converts URL-encoded characters in a string to ASCII characters.\nFor example, the string '%38' will return '&amp;'.</p>\n",
                "parameters": [
                    {
                        "description": "<p>String to process.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.string.urlDecode-method.url-param",
                        "optional": false,
                        "type": "String",
                        "name": "url"
                    }
                ],
                "filename": "Alloy.builtins.string.urlDecode-method"
            },
            {
                "name": "urlToJson",
                "returns": {
                    "type": "Object",
                    "summary": "<p>JSON-formatted URL data.</p>\n"
                },
                "description": "<p>Parses an URL and converts it to JSON-formatted data.\nFor example, an URL with a query string will produce a JSON object with each query field paired\nwith its value as well as the base URL.</p>\n",
                "parameters": [
                    {
                        "description": "<p>URL to process.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.string.urlToJson-method.url-param",
                        "optional": false,
                        "type": "String",
                        "name": "url"
                    }
                ],
                "filename": "Alloy.builtins.string.urlToJson-method"
            }
        ],
        "name": "Alloy.builtins.string"
    },
    "Alloy.builtins.moment": {
        "description": "<p>Moment.js is a freely distributable, third-party JavaScript date library\nfor parsing, validating, manipulating, and formatting dates.</p>\n\n<p>To use the moment.js library in Alloy,\nrequire it with the <code>alloy</code> root directory in your <code>require</code> call. For example:</p>\n\n<pre><code>var moment = require('alloy/moment');\nvar day = moment(\"12-25-1995\", \"MM-DD-YYYY\");\nTi.API.info(\"Date:\" + day.format(\"dddd, MMMM Do YYYY, h:mm:ss a\")); // --&gt; Monday, December 25th 1995, 12:00:00 am\n</code></pre>\n\n<p>For documentation, usage examples and more information, see <a href=\"http://momentjs.com\">http://momentjs.com/</a>.</p>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.builtins.moment-object",
        "method": [],
        "name": "Alloy.builtins.moment"
    },
    "Alloy.widgets.bookSearchView": {
        "description": "<p>The bookSearchView widget sends a query to the Google Books API to retrieve book data and\npresents the results in a table. Unlike the searchForBooks widget, this widget processes\nand presents the search results.</p>\n\n<h3>Usage</h3>\n\n<p>To use the widget, first add it as a dependency in the <code>config.json</code> file:</p>\n\n<pre><code>\"dependencies\": {\n    \"com.appcelerator.bookSearchView\":\"1.0\"\n}\n</code></pre>\n\n<p>Next, add it to a view in the project, using the Widget tag:</p>\n\n<pre><code>&lt;Widget id=\"bsv\" src=\"com.appcelerator.bookSearchView\"/&gt;\n</code></pre>\n\n<p>Note: the <code>id</code> attribute is a unique identfier and can be anything. <code>bsv</code> is just an example.</p>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.widgets.bookSearchView-object",
        "method": [],
        "name": "Alloy.widgets.bookSearchView"
    },
    "Alloy.Controller": {
        "description": "<p>The base class for Alloy controllers.</p>\n\n<p>Each controller is associated with a UI hierarchy, defined in an XML file in the\n<code>views</code> folder. Each element in the view hierarchy is either a Titanium View\nor another Alloy controller or widget. Each Alloy controller or widget can additionally contain\nTitanium Views and/or more controllers and widgets.</p>\n",
        "properties": [],
        "extends": "Backbone.Events",
        "events": [],
        "filename": "Alloy.Controller-object",
        "method": [
            {
                "name": "addClass",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Adds a TSS class to the specified view object.</p>\n\n<p>You can apply additional styles with the <code>opts</code> parameter.</p>\n",
                "parameters": [
                    {
                        "description": "<p>View object to which to add class(es).</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.Controller.addClass-method.proxy-param",
                        "optional": false,
                        "type": "Object",
                        "name": "proxy"
                    },
                    {
                        "description": "<p>Array or space-separated list of classes to apply.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.Controller.addClass-method.classes-param",
                        "optional": false,
                        "type": "Array<String>/String",
                        "name": "classes"
                    },
                    {
                        "description": "<p>Dictionary of properties to apply after classes have been added.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.Controller.addClass-method.opts-param",
                        "optional": true,
                        "type": "Dictionary",
                        "name": "opts"
                    }
                ],
                "filename": "Alloy.Controller.addClass-method"
            },
            {
                "name": "createStyle",
                "returns": {
                    "type": "Dictionary",
                    "summary": "\n"
                },
                "description": "<p>Creates a dictionary of properties based on the specified styles.</p>\n\n<p>You can use this dictionary with the view object's\napplyProperties method\nor a create object method, such as Titanium.UI.createView.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Dictionary of styles to apply.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.Controller.createStyle-method.opts-param",
                        "optional": false,
                        "type": "AlloyStyleDict",
                        "name": "opts"
                    }
                ],
                "filename": "Alloy.Controller.createStyle-method"
            },
            {
                "name": "destroy",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Frees binding resources associated with this controller and its\nUI components. It is critical that this is called when employing\nmodel/collection binding in order to avoid potential memory leaks.\n$.destroy() should be called whenever a controller's UI is to\nbe \"closed\" or removed from the app. For more details, see the\nexample app found here:\nhttps://github.com/appcelerator/alloy/tree/master/test/apps/models/binding_destroy</p>\n",
                "parameters": [],
                "filename": "Alloy.Controller.destroy-method"
            },
            {
                "name": "getTopLevelViews",
                "returns": {
                    "type": "Array.<(Titanium.UI.View|Alloy.Controller)>",
                    "summary": "\n"
                },
                "description": "<p>Returns a list of the root view elements associated with this controller.</p>\n",
                "parameters": [],
                "filename": "Alloy.Controller.getTopLevelViews-method"
            },
            {
                "name": "getView",
                "returns": {
                    "type": "Titanium.UI.View/Alloy.Controller",
                    "summary": "\n"
                },
                "description": "<p>Returns the specified view associated with this controller.</p>\n\n<p>If no <code>id</code> is specified, returns the first top-level view.</p>\n",
                "parameters": [
                    {
                        "description": "<p>ID of the view to return.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.Controller.getView-method.id-param",
                        "optional": true,
                        "type": "String",
                        "name": "id"
                    }
                ],
                "filename": "Alloy.Controller.getView-method"
            },
            {
                "name": "getViews",
                "returns": {
                    "type": "Array.<(Titanium.UI.View|Alloy.Controller)>",
                    "summary": "\n"
                },
                "description": "<p>Returns a list of all IDed view elements associated with this controller.</p>\n",
                "parameters": [],
                "filename": "Alloy.Controller.getViews-method"
            },
            {
                "name": "removeClass",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Removes a TSS class from the specified view object.</p>\n\n<p>You can apply additional styles after the removal with the <code>opts</code> parameter.</p>\n",
                "parameters": [
                    {
                        "description": "<p>View object from which to remove class(es).</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.Controller.removeClass-method.proxy-param",
                        "optional": false,
                        "type": "Object",
                        "name": "proxy"
                    },
                    {
                        "description": "<p>Array or space-separated list of classes to remove.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.Controller.removeClass-method.classes-param",
                        "optional": false,
                        "type": "Array<String>/String",
                        "name": "classes"
                    },
                    {
                        "description": "<p>Dictionary of properties to apply after the class removal.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.Controller.removeClass-method.opts-param",
                        "optional": true,
                        "type": "Dictionary",
                        "name": "opts"
                    }
                ],
                "filename": "Alloy.Controller.removeClass-method"
            },
            {
                "name": "resetClass",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Sets the array of TSS classes for the target View object, adding the classes specified and\nremoving any applied classes that are not specified.</p>\n\n<p>You can apply classes or styles after the reset using the <code>classes</code> or <code>opts</code> parameters.</p>\n",
                "parameters": [
                    {
                        "description": "<p>View object to reset.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.Controller.resetClass-method.proxy-param",
                        "optional": false,
                        "type": "Object",
                        "name": "proxy"
                    },
                    {
                        "description": "<p>Array or space-separated list of classes to apply after the reset.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.Controller.resetClass-method.classes-param",
                        "optional": true,
                        "type": "Array<String>/String",
                        "name": "classes"
                    },
                    {
                        "description": "<p>Dictionary of properties to apply after the reset.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.Controller.resetClass-method.opts-param",
                        "optional": true,
                        "type": "Dictionary",
                        "name": "opts"
                    }
                ],
                "filename": "Alloy.Controller.resetClass-method"
            }
        ],
        "name": "Alloy.Controller"
    },
    "Alloy.widgets": {
        "description": "<p>List of widgets in the Alloy project. For information on using a widget in your project, see\n<a href=\"#!/api/Alloy.Widget\" rel=\"Alloy.Widget\" class=\"docClass\">Alloy.Widget</a>.</p>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.widgets-object",
        "method": [],
        "name": "Alloy.widgets"
    },
    "Alloy.widgets.drawer": {
        "description": "<p>The <strong>Drawer</strong> widget provides a sliding panel of buttons to pull up from the bottom of the screen.\nAs an option, the drawer can automatically close after it has been used. On Android, the drawer\nmanifests itself as the activity menu, unless the developer wants to specifically override that\ncapability.</p>\n\n<h2>Manifest</h2>\n\n<ul>\n<li>Version: 1.0 (stable)</li>\n<li>Github: https://www.github.com/appcelerator/alloy</li>\n<li>License: <a href=\"http://www.apache.org/licenses/LICENSE-2.0.html\">Apache 2.0</a></li>\n<li>Author: Carl Orthlieb</li>\n<li>Supported Platforms: iOS, Android, Mobile Web</li>\n</ul>\n\n\n<h2>Adding the Drawer Widget to Your Alloy Project</h2>\n\n<p>In your application's config.json file you will want to include the following line in your dependencies:</p>\n\n<pre><code>\"dependencies\": {\n    \"com.appcelerator.drawer\":\"1.0\"\n}\n</code></pre>\n\n<ul>\n<li>If the app/widgets directory does not exist in your app then create one.</li>\n<li>Copy the drawer folder from the test app (widget_drawer/app/widgets) into your app/widgets directory.</li>\n</ul>\n\n\n<h2>Create a Drawer in the View</h2>\n\n<p>You can add a drawer to a view by <em>requiring</em> the Drawer widget.</p>\n\n<pre><code>&lt;Require type=\"widget\" src=\"com.appcelerator.drawer\" id=\"drawer\"/&gt;\n</code></pre>\n\n<p>Assign it an ID that you can use in your controller, for example, <code>id=\"drawer\"</code> You can now access the\ndrawer via <code>$.drawer</code> in your controller. Note that the containing view needs to have a layout of\n\"absolute\", which is the default, and not \"horizontal\" or \"vertical\", in order to have the drawer\nwork properly.</p>\n\n<h2>Initializing the Drawer in the Controller</h2>\n\n<p>The drawer does not have any buttons in it until you initialize it in your controller. Before\nyou open your window, you will want to call the drawer with the <code>init</code> method. For example:</p>\n\n<pre><code>$.drawer.init({\n    mainWindow: $.index,\n    buttons: [\n        { id: 'One', title: 'One', click: function (e) { alert(\"One\"); } },\n        { id: 'Two', title: 'Two',  click: function (e) { alert(\"Two\"); } },\n        { id: 'Three', title: 'Three',  click: function (e) { alert(\"Three\"); } }\n    ],\n    autoClose: true,\n    gutter: 5\n});\n</code></pre>\n\n<h2>Enabling and Disabling Buttons</h2>\n\n<p>With Android, if <code>overrideMenu</code> is not true, the <code>enable()</code> callback is called automatically before\nthe menu is shown. In all other cases, you will need to explicitly call the drawer's\n<code>checkEnabled()</code> method in order to get those callbacks to fire.</p>\n\n<p>You should call this function whenever a state change could affect the enable state of buttons\nin the drawer. For example, if your main window displays a web view and you want to enable some\nforward/back buttons based on the properties of that web view after it has loaded, you might\ncreate the following callback attached to the <code>onLoad</code> event:</p>\n\n<pre><code>function webviewLoad(e) {\n    $.index.title = $.webview.evalJS(\"document.title\");\n    $.drawer.checkEnabled();\n};\n</code></pre>\n\n<h2>Binding</h2>\n\n<p>Because you are passing in functions to be called when a button is clicked, be aware of your binding.\nThe <em>this</em> object is not the same when the <code>click()</code> and <code>enable()</code> callbacks are called as when\nthey are defined. There are many excellent articles that talk about this issue:</p>\n\n<ul>\n<li><a href=\"http://www.alistapart.com/articles/getoutbindingsituations/\">Getting Out of Binding Situations in JavaScript</a></li>\n<li><a href=\"http://fitzgeraldnick.com/weblog/26/\">Javascript, \"bind\", and \"this\"</a></li>\n<li><a href=\"http://www.robertsosinski.com/2009/04/28/binding-scope-in-javascript/\">Binding Scope in JavaScript</a></li>\n</ul>\n\n\n<p>It is recommended that you use the underscore library's <a href=\"http://underscorejs.org/#bind\">bind</a>\nfunction to bind your callbacks when needed.</p>\n\n<pre><code>$.drawer.init({\n    buttons: [\n        { id: 'Fancy', text: 'Fancy', click:\n            _.bind(function FancyClick(e) { alert(this.one); }, this)\n        }\n    ]\n});\n</code></pre>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.widgets.drawer-object",
        "method": [
            {
                "name": "checkEnabled",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Request that the drawer run all the associated <code>enabled</code> callbacks for the buttons and set\ntheir state. Call this function whenever a state change could affect the enable state of\nbuttons in the drawer.</p>\n\n<p>On Android, if <code>overrideMenu</code> is <code>false</code>, the <code>enabled</code> callback is called automatically\nbefore the menu is shown. In all other cases, you will need to explicitly call the\n<code>checkEnabled</code> method in order to get those callbacks to fire.</p>\n",
                "parameters": [],
                "filename": "Alloy.widgets.drawer.checkEnabled-method"
            },
            {
                "name": "init",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Initializes the drawer.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Window to add the menu items to on Android.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.drawer.init-method.mainWindow-param",
                        "optional": false,
                        "type": "Titanium.UI.Window",
                        "name": "mainWindow"
                    },
                    {
                        "description": "<p>Array of button objects.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.drawer.init-method.buttons-param",
                        "optional": false,
                        "type": "Array.<Object>",
                        "name": "buttons"
                    },
                    {
                        "description": "<p>Automatically close the drawer after a button has been selected.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.drawer.init-method.autoClose-param",
                        "optional": true,
                        "type": "Boolean",
                        "name": "autoClose"
                    },
                    {
                        "description": "<p>Size of the icon to be used in the drawer.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.drawer.init-method.iconSize-param",
                        "optional": true,
                        "type": "Number",
                        "name": "iconSize"
                    },
                    {
                        "description": "<p>Opacity of the drawer when it is open in the view.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.drawer.init-method.openOpacity-param",
                        "optional": true,
                        "type": "Number",
                        "name": "openOpacity"
                    },
                    {
                        "description": "<p>Opacity of the drawer when it is closed in the view.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.drawer.init-method.closeOpacity-param",
                        "optional": true,
                        "type": "Number",
                        "name": "closeOpacity"
                    },
                    {
                        "description": "<p>Duration, in milliseconds, to close or open the drawer.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.drawer.init-method.animationDuration-param",
                        "optional": true,
                        "type": "Number",
                        "name": "animationDuration"
                    },
                    {
                        "description": "<p>Offset used to space buttons from each other.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.drawer.init-method.gutter-param",
                        "optional": true,
                        "type": "Number",
                        "name": "gutter"
                    },
                    {
                        "description": "<p>Overrides the use of the menu in Android and use a drawer like in iOS and Mobile Web.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.drawer.init-method.overrideMenu-param",
                        "optional": true,
                        "type": "String",
                        "name": "overrideMenu"
                    },
                    {
                        "description": "<p>Jiggle the drawer up and down <annoy> times until the user opens it the first time. Setting annoy to -1 causes it to happen forever.</annoy></p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.drawer.init-method.annoy-param",
                        "optional": true,
                        "type": "Number",
                        "name": "annoy"
                    }
                ],
                "filename": "Alloy.widgets.drawer.init-method"
            },
            {
                "name": "jiggle",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Jiggles the drawer up and down slightly to draw the user's attention to it. Does nothing if the drawer is already open or the\nAndroid activity menu is being used.</p>\n",
                "parameters": [],
                "filename": "Alloy.widgets.drawer.jiggle-method"
            }
        ],
        "name": "Alloy.widgets.drawer"
    },
    "Alloy.Controller.UI": {
        "description": "\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.Controller.UI-object",
        "method": [
            {
                "name": "create",
                "returns": {
                    "type": "Titanium.UI.View/Alloy.Controller",
                    "summary": "\n"
                },
                "description": "<p>Creates a Titanium UI object with the specified styles.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Name of the Titanium object to create. This can either be the full class\nname, such as <code>Ti.UI.Button</code>, or the XML element, such as <code>Button</code>.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.Controller.UI.create-method.apiName-param",
                        "optional": false,
                        "type": "String",
                        "name": "apiName"
                    },
                    {
                        "description": "<p>Dictionary of styles to apply. <code>opts</code> may also contain any additional properties you would like to apply directly the created Titanium object.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.Controller.UI.create-method.opts-param",
                        "optional": false,
                        "type": "AlloyStyleDict",
                        "name": "opts"
                    }
                ],
                "filename": "Alloy.Controller.UI.create-method"
            }
        ],
        "name": "Alloy.Controller.UI"
    },
    "Alloy.Collections": {
        "description": "<p>Class to access or create collections.</p>\n\n<p>Collections can either be created in markup or programmatically in the controller.</p>\n\n<p>To create collections in markup, see the 'Collection Element' section in the\n<a href=\"#!/guide/Alloy_XML_Markup\">Alloy XML Markup guide</a>.</p>\n\n<p>In the controller code:</p>\n\n<ul>\n<li> To create a local instance, use the <a href=\"#!/api/Alloy-method-createCollection\" rel=\"Alloy-method-createCollection\" class=\"docClass\">Alloy.createCollection</a> method.</li>\n<li> To create a global singleton instance, use the <a href=\"#!/api/Alloy.Collections-method-instance\" rel=\"Alloy.Collections-method-instance\" class=\"docClass\">Alloy.Collections.instance</a> method.</li>\n</ul>\n\n\n<p>Previously created collections through markup or using the <code>instance</code> method\nare directly accessed as properties of the <code><a href=\"#!/api/Alloy.Collections\" rel=\"Alloy.Collections\" class=\"docClass\">Alloy.Collections</a></code> namespace,\nusing either the name of the model JavaScript file for singletons\nor the ID name for local instances.</p>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.Collections-object",
        "method": [
            {
                "name": "instance",
                "returns": {
                    "type": "Backbone.Collection",
                    "summary": "<p>An Alloy Collection object singleton</p>\n"
                },
                "description": "<p>Creates a singleton instance of a Collection based on the given model, or\nreturns an existing instance if one has already been created.</p>\n",
                "parameters": [
                    {
                        "description": "<p>the name of the base model for the collection</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.Collections.instance-method.name-param",
                        "optional": false,
                        "type": "String",
                        "name": "name"
                    }
                ],
                "filename": "Alloy.Collections.instance-method"
            }
        ],
        "name": "Alloy.Collections"
    },
    "Alloy.widgets.searchForBooks": {
        "description": "<p>The searchForBooks widget sends a query to the Google Books API to retrieve book data.\nIn the view, it appears as a search bar with a textbox and a button icon.</p>\n\n<h3>Usage</h3>\n\n<p>To use the widget, first add it as a dependency in the <code>config.json</code> file:</p>\n\n<pre><code>\"dependencies\": {\n    \"com.appcelerator.searchForBooks\":\"1.0\"\n}\n</code></pre>\n\n<p>Next, add it to a view in the project, using the Require tag:</p>\n\n<pre><code>&lt;Require id=\"sfb\" type=\"widget\" src=\"com.appcelerator.searchForBooks\"/&gt;\n</code></pre>\n\n<p>Note: the <code>id</code> attribute is a unique identfier and can be anything. <code>sfb</code> is just an example.</p>\n\n<p>In the controller, use the <code>setHandlers</code> method to register a callback to process the retrieved data.</p>\n\n<pre><code>function processData(books){\n   var data = [];\n   books.forEach(function(book){\n       var label = book.title + ' by ' + book.authors;\n       var row = Ti.UI.createTableViewRow({title:label});\n       data.push(row)\n   });\n   // tableView is a Ti.UI.TableView object in the view\n   $.tableView.setData(data);\n}\n$.sfb.setHandlers({\n   success: processData\n});\n</code></pre>\n\n<h3>Accessing View Elements</h3>\n\n<p>The following is a list of GUI elements in the widget's view.  These IDs can be used to\noverride or access the properties of these elements:</p>\n\n<ul>\n<li><code>bar</code>: Titanium.UI.View for the entire widget.</li>\n<li><code>text</code>: Titanium.UI.TextField for the search box.</li>\n<li><code>searchView</code>: Titanium.UI.View for the icons and acts as a button.</li>\n<li><code>search</code>: Titanium.UI.ImageView for the search icon.</li>\n<li><code>loading</code>: <a href=\"#!/api/Alloy.widgets.loading\" rel=\"Alloy.widgets.loading\" class=\"docClass\">Alloy.widgets.loading</a> for the loading icon.</li>\n</ul>\n\n\n<p>Prefix the special variable <code>$</code> and the widget ID to the element ID, to access\nthat view element, for example, <code>$.sfb.text</code> will give you access to the TextField.</p>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.widgets.searchForBooks-object",
        "method": [
            {
                "name": "setHandlers",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Binds callback handlers to events</p>\n",
                "parameters": [
                    {
                        "description": "<p>Callbacks to register.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.searchForBooks.setHandlers-method.args-param",
                        "optional": false,
                        "type": "Object",
                        "name": "args"
                    }
                ],
                "filename": "Alloy.widgets.searchForBooks.setHandlers-method"
            }
        ],
        "name": "Alloy.widgets.searchForBooks"
    },
    "Alloy.builtins.measurement": {
        "description": "<p>A collection of utilities for converting between different display units.\nThese functions are only useful on the Android platform to support devices with different\nscreen densities and resolutions.</p>\n\n<p>To use the measurement builtin library,\nrequire it with the <code>alloy</code> root directory in your <code>require</code> call. For example:</p>\n\n<pre><code>var measurement = require('alloy/measurement');\nvar pointPX = {x:42, y:7};\nvar pointDP = measurement.pointPXToDP(pointPX);\n</code></pre>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.builtins.measurement-object",
        "method": [
            {
                "name": "dpToPX",
                "returns": {
                    "type": "Number",
                    "summary": "<p>Converted value in screen pixels.</p>\n"
                },
                "description": "<p>Converts a density-independent pixel value to screen pixels.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Value in density-independent pixels.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.measurement.dpToPX-method.val-param",
                        "optional": false,
                        "type": "Number",
                        "name": "val"
                    }
                ],
                "filename": "Alloy.builtins.measurement.dpToPX-method"
            },
            {
                "name": "pointPXToDP",
                "returns": {
                    "type": "Number",
                    "summary": "<p>Converted coordinate in density-independent pixels.</p>\n"
                },
                "description": "<p>Converts a coordinate (x, y) from screen pixels to density-independent pixels.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Coordinate in screen pixels.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.measurement.pointPXToDP-method.val-param",
                        "optional": false,
                        "type": "Number",
                        "name": "val"
                    }
                ],
                "filename": "Alloy.builtins.measurement.pointPXToDP-method"
            },
            {
                "name": "pxToDP",
                "returns": {
                    "type": "Number",
                    "summary": "<p>Converted value in density-independent pixels.</p>\n"
                },
                "description": "<p>Converts a screen pixel value to density-independent pixels.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Value in screen pixels.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.measurement.pxToDP-method.val-param",
                        "optional": false,
                        "type": "Number",
                        "name": "val"
                    }
                ],
                "filename": "Alloy.builtins.measurement.pxToDP-method"
            }
        ],
        "name": "Alloy.builtins.measurement"
    },
    "Alloy.builtins.dialogs": {
        "description": "<p>A collection of utilities for generating dialog boxes.\nTo use the dialogs builtin library,\nrequire it with the <code>alloy</code> root directory in your <code>require</code> call. For example:</p>\n\n<pre><code>var dialogs = require('alloy/dialogs');\ndialogs.confirm({});\n</code></pre>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.builtins.dialogs-object",
        "method": [
            {
                "name": "confirm",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Creates a confirmation dialog box. Default values may be overridden and a callback function\nmay be called after an affirmative response.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Dialog box parameters.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.dialogs.confirm-method.args-param",
                        "optional": false,
                        "type": "...*",
                        "name": "args"
                    }
                ],
                "filename": "Alloy.builtins.dialogs.confirm-method"
            }
        ],
        "name": "Alloy.builtins.dialogs"
    },
    "Alloy.widgets.loading": {
        "description": "<p>The loading widget displays an animated circular icon, which can be used to indicate that the\napplication is busy with a process or loading.</p>\n\n<h3>Usage</h3>\n\n<p>To use the widget, first add it as a dependency in the <code>config.json</code> file:</p>\n\n<pre><code>\"dependencies\": {\n    \"com.appcelerator.loading\":\"1.0\"\n}\n</code></pre>\n\n<p>Next, add it to a view in the project, using the Require tag:</p>\n\n<pre><code>&lt;Require id=\"loading\" type=\"widget\" src=\"com.appcelerator.loading\"/&gt;\n</code></pre>\n\n<p>Note: the <code>id</code> attribute is a unique identfier and can be anything. <code>loading</code> is just an example.</p>\n\n<p>In the controller, use the <code>setOpacity</code> method to hide or show the loading icon.</p>\n\n<pre><code>// Show the loading icon.\n$.loading.setOpacity(1.0);\n\n// Load some content...\n\n// Hide the loading icon.\n$.loading.setOpacity(0.0);\n</code></pre>\n\n<h3>Accessing View Elements</h3>\n\n<p>The following is a list of GUI elements in the widget's view.  These IDs can be used to\noverride or access the properties of these elements:</p>\n\n<ul>\n<li><code>loading</code>: Titanium.UI.ImageView for the loading icon.</li>\n</ul>\n\n\n<p>Prefix the special variable <code>$</code> and the widget ID to the element ID, to access\nthat view element, for example, <code>$.loading.loading</code> will give you access to the ImageView.</p>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.widgets.loading-object",
        "method": [
            {
                "name": "setOpacity",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Sets the opacity of the loading image.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Opacity from 0.0 (transparent) to 1.0 (opaque).</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.loading.setOpacity-method.opacity-param",
                        "optional": false,
                        "type": "Number",
                        "name": "opacity"
                    }
                ],
                "filename": "Alloy.widgets.loading.setOpacity-method"
            }
        ],
        "name": "Alloy.widgets.loading"
    },
    "Alloy.widgets.buttongrid": {
        "description": "<p>The <strong>ButtonGrid</strong> widget provides a cross-platform grid of buttons that automatically lay themselves out in the view similar to the iOS native Dashboard control.</p>\n\n<h2>Manifest</h2>\n\n<ul>\n<li>Version: 1.0 (stable)</li>\n<li>Github: https://www.github.com/appcelerator/alloy</li>\n<li>License: <a href=\"http://www.apache.org/licenses/LICENSE-2.0.html\">Apache 2.0</a></li>\n<li>Author: Carl Orthlieb</li>\n<li>Supported Platforms: iOS, Android, Mobile Web</li>\n</ul>\n\n\n<h2>Adding the ButtonGrid Widget to Your Alloy Project</h2>\n\n<p>In your application's config.json file you will want to include the following line in your dependencies:</p>\n\n<pre><code>\"dependencies\": {\n    \"com.appcelerator.buttongrid\":\"1.0\"\n}\n</code></pre>\n\n<h3>Creating a Local Copy</h3>\n\n<p>Normally, ButtonGrid can be accessed without copying because it is part of Alloy.\nAdding it as a dependency to your project is enough. However, if you want to create a copy\nlocal to your application so that you can further modify it, then you will need to:</p>\n\n<ol>\n<li>Create a widgets directory in your app directory if it does not already exist.</li>\n<li>Copy the com.appcelerator.buttongrid folder from the <code>Resources/alloy/widgets</code> directory into your <code>app/widgets</code> directory.</li>\n</ol>\n\n\n<h2>Create a ButtonGrid in the View</h2>\n\n<p>You can add a ButtonGrid to a view by <em>requiring</em> the ButtonGrid widget.</p>\n\n<pre><code>&lt;Widget id=\"buttongrid\" src=\"com.appcelerator.buttongrid\"/&gt;\n</code></pre>\n\n<p>Assign it an ID that you can use in your controller, for example, <code>id=\"buttongrid\"</code>.\nYou can now access the ButtonGrid using <code>$.buttongrid</code> in your controller.</p>\n\n<h2>Initializing the ButtonGrid in the Controller</h2>\n\n<p>The buttongrid does not have any buttons in it until you initialize it in your controller.\nBefore you open your window, you will want to call the buttongrid with the <code>init</code> method. For example:</p>\n\n<pre><code>$.buttongrid.init({\n    buttons: [\n        { id: 'Cloudy', title: \"Cloudy\", backgroundColor: gray, backgroundSelectedColor: lightgray },\n        { id: 'Drizzle', title: \"Drizzle\" },\n        { id: 'Haze', title: 'Haze' },\n        { id: 'MostlyCloudy', title: \"Mostly Cloudy\" },\n        { id: 'SlightDrizzle' },\n        { id: 'Snow', title: 'Snow' },\n        { id: 'Sunny', title: 'Sunny' },\n        { id: 'Thunderstorms', title: 'Thunderstorms', click: function (e) { alert(\"Thunder!\"); } }\n    ],\n    buttonWidth: <a href=\"#!/api/Alloy-property-isTablet\" rel=\"Alloy-property-isTablet\" class=\"docClass\">Alloy.isTablet</a> ? 200: 100,\n    buttonHeight: <a href=\"#!/api/Alloy-property-isTablet\" rel=\"Alloy-property-isTablet\" class=\"docClass\">Alloy.isTablet</a> ? 200 : 100,\n    backgroundColor: red,\n    backgroundSelectedColor: brightred\n});\n</code></pre>\n\n<h2>Binding</h2>\n\n<p>Because you are passing in functions to be called when a button is clicked, be aware of your binding.\nThe <em>this</em> object is not the same when the <code>click()</code> and <code>enable()</code> callbacks are called as when\nthey are defined. There are many excellent articles that talk about this issue:</p>\n\n<ul>\n<li><a href=\"http://www.alistapart.com/articles/getoutbindingsituations/\">Getting Out of Binding Situations in JavaScript</a></li>\n<li><a href=\"http://fitzgeraldnick.com/weblog/26/\">Javascript, \"bind\", and \"this\"</a></li>\n<li><a href=\"http://www.robertsosinski.com/2009/04/28/binding-scope-in-javascript/\">Binding Scope in JavaScript</a></li>\n</ul>\n\n\n<p>It is recommended that you use the underscore library's <a href=\"http://underscorejs.org/#bind\">bind</a> function to bind your callbacks when needed.</p>\n\n<pre><code>$.buttongrid.init({\n    buttons: [\n        { id: 'Fancy', text: 'Fancy', click:\n            _.bind(function FancyClick(e) { alert(this.one); }, this)\n        }\n    ]\n});\n</code></pre>\n\n<h2>Relaying out the ButtonGrid</h2>\n\n<p>If you ever have a need to relayout the ButtonGrid for a reason other than orientation (which is automatically supported), you can call the <code>relayout</code> method directly.</p>\n\n<pre><code>$.buttongrid.relayout();\n</code></pre>\n\n<p>The grid will calculate a new gutter between the buttons and animate the buttons into place one at a time.\n<strong>Note</strong>: If you use autoLayout=\"true\" (default) then a Ti.Gesture event handler will be used to relayout\nthe widget based on orientation changes. To avoid any potential memory leaks associated with using these\nglobal event handlers, you must call the <strong>destroy()</strong> function on the widget when you are done using it.\nThis will free all memory resources associated with the widget. If you have autoLayout=\"false\", then you are\nnot required to call <strong>destroy()</strong> when you are done with the widget.</p>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.widgets.buttongrid-object",
        "method": [
            {
                "name": "destroy",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Frees all resources associated with the button grid when done using it.\nThis function should be called when the button grid is no longer being\nused to ensure that all memory allocated to it is released.</p>\n",
                "parameters": [],
                "filename": "Alloy.widgets.buttongrid.destroy-method"
            },
            {
                "name": "init",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Initializes the button grid.</p>\n",
                "parameters": [
                    {
                        "description": "<p>If true, the widget will automatically adjust the layout for orientation events, which requires you to execute destroy() when you are done. if false, the widget does not adjust its layout automatically, and you are not required to call destroy() when finished using it.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.buttongrid.init-method.autoLayout-param",
                        "optional": true,
                        "type": "Boolean",
                        "name": "autoLayout"
                    },
                    {
                        "description": "<p>The buttons array is an array of button objects each of which  describes a button to create in the grid.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.buttongrid.init-method.buttons-param",
                        "optional": false,
                        "type": "Array.<Object>",
                        "name": "buttons"
                    },
                    {
                        "description": "<p>Width of a button in pixels.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.buttongrid.init-method.buttonWidth-param",
                        "optional": false,
                        "type": "Number",
                        "name": "buttonWidth"
                    },
                    {
                        "description": "<p>Height of a button in pixels.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.buttongrid.init-method.buttonHeight-param",
                        "optional": false,
                        "type": "Number",
                        "name": "buttonHeight"
                    },
                    {
                        "description": "<p>RGB triplet or named color to use as the background for the button. This can be overridden by button definition itself.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.buttongrid.init-method.backgroundColor-param",
                        "optional": true,
                        "type": "String",
                        "name": "backgroundColor"
                    },
                    {
                        "description": "<p>RGB triplet or named color to use as the background for the button when it is selected. This can be overridden by button definition itself.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.buttongrid.init-method.backgroundSelectedColor-param",
                        "optional": true,
                        "type": "String",
                        "name": "backgroundSelectedColor"
                    },
                    {
                        "description": "<p>Duration, in milliseconds, for the grid to animate when relaying out on orientation change.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.buttongrid.init-method.duration-param",
                        "optional": true,
                        "type": "Number",
                        "name": "duration"
                    },
                    {
                        "description": "<p>Size of the text label in the button.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.buttongrid.init-method.textSize-param",
                        "optional": true,
                        "type": "Number/String",
                        "name": "textSize"
                    },
                    {
                        "description": "<p>RGB triplet or named color to use for the text label on the button.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.buttongrid.init-method.textColor-param",
                        "optional": true,
                        "type": "String",
                        "name": "textColor"
                    },
                    {
                        "description": "<p>RGB triplet or named color to use for the text label on the button when it is selected.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.buttongrid.init-method.textSelectedColor-param",
                        "optional": true,
                        "type": "String",
                        "name": "textSelectedColor"
                    },
                    {
                        "description": "<p>Directory where assets for the button grid can be found.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.buttongrid.init-method.assetDir-param",
                        "optional": true,
                        "type": "String",
                        "name": "assetDir"
                    },
                    {
                        "description": "<p>The general callback to call when any button is clicked. The function has an event parameter similar to that used for Titanium.UI.Button.click. Can be overridden by the individual button click callbacks.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.buttongrid.init-method.click-param",
                        "optional": true,
                        "type": "function(Object)",
                        "name": "click"
                    }
                ],
                "filename": "Alloy.widgets.buttongrid.init-method"
            },
            {
                "name": "relayout",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Redraws the buttons grid.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Unused.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.buttongrid.relayout-method.e-param",
                        "optional": false,
                        "type": "Object",
                        "name": "e"
                    }
                ],
                "filename": "Alloy.widgets.buttongrid.relayout-method"
            }
        ],
        "name": "Alloy.widgets.buttongrid"
    },
    "Alloy.builtins": {
        "description": "<p>Alloy provides some additional utility libraries that simplify certain functions,\nsuch as animations, string manipultation and display unit conversion.  These libraries\nare referred to as \"builtins.\"</p>\n\n<p>To use a builtin library, require the library name, minus the '.js' extension,\nwith <code>alloy</code> as the root directory in your <code>require</code> call.\nFor example, to use the animation builtin:</p>\n\n<pre><code>var animation = require('alloy/animation');\nanimation.crossFade(view1, view2, 500, finishCallback);\n</code></pre>\n\n<p>During the compilation process, Alloy determines which builtins are being used,\nand adds them to the generated Titanium project.</p>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.builtins-object",
        "method": [],
        "name": "Alloy.builtins"
    },
    "Alloy.widgets.bouncylogo": {
        "description": "<p>The <strong>BouncyLogo</strong> widget provides a animated logo that is suitable for displaying when your application first starts.</p>\n\n<h2>Manifest</h2>\n\n<ul>\n<li>Version: 1.0 (stable)</li>\n<li>Github: https://www.github.com/appcelerator/alloy</li>\n<li>License: <a href=\"http://www.apache.org/licenses/LICENSE-2.0.html\">Apache 2.0</a></li>\n<li>Author: Carl Orthlieb</li>\n<li>Supported Platforms: iOS, Android, Mobile Web</li>\n</ul>\n\n\n<h2>Adding the BouncyLogo Widget to Your Alloy Project</h2>\n\n<p>In your application's config.json file you will want to include the following line in your dependencies:</p>\n\n<pre><code>\"dependencies\": {\n    \"com.appcelerator.bouncylogo\":\"1.0\"\n}\n</code></pre>\n\n<h3>Creating a Local Copy</h3>\n\n<p>Normally, BouncyLogo can be accessed without copying because it is part of Alloy. Adding it\nas a dependency to your project is enough. However, if you want to create a copy local to your\napplication so that you can further modify it, then you will need to:</p>\n\n<ol>\n<li>Create a widgets directory in your app directory if it does not already exist.</li>\n<li>Copy the <code>com.appcelerator.bouncylogo</code> folder from the <code>Resources/alloy/widgets</code> directory into your <code>app/widgets</code> directory.</li>\n</ol>\n\n\n<h2>Adding the BouncyLogo to the View</h2>\n\n<p>You can add a bouncy logo to a view by using the <em>Widget</em> tag to bring in the BouncyLogo widget.</p>\n\n<pre><code>&lt;Widget src=\"com.appcelerator.bouncylogo\" id=\"logo\"/&gt;\n</code></pre>\n\n<p>Assign it an ID that you can use in your controller, for example, <code>id=\"logo\"</code>. You can now access the\nBouncyLogo via <code>$.logo</code> in your controller. Note that the containing view needs to have a\nlayout of \"absolute\", which is the default, and not \"horizontal\" or \"vertical\", in order\nto have BouncyLogo work properly.</p>\n\n<p>Note that the logo starts offscreen and hidden, you will need to initialize it after your window\nis open. Change your window to register for the <code>open</code> event if it has not already done so:</p>\n\n<pre><code>&lt;Window onOpen=\"IndexOpen\"&gt;\n</code></pre>\n\n<h2>Initializing the BouncyLogo in the Controller</h2>\n\n<p>Note that your logo starts offscreen and hidden, you will need to initialize it after your\nwindow is open. During the open call you will want to call the BouncyLogo with the <code>init</code>\nmethod. For example:</p>\n\n<pre><code>function IndexOpen(e) {\n    $.logo.init({ image: '/images/alloy.png', width: 216, height: 200 });\n}\n</code></pre>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.widgets.bouncylogo-object",
        "method": [
            {
                "name": "hide",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Fade out and hide the bouncy logo.</p>\n\n<p>@params {Number} [duration=500] Duration, in milliseconds, to fade out the logo. Zero hides instantly.</p>\n",
                "parameters": [],
                "filename": "Alloy.widgets.bouncylogo.hide-method"
            },
            {
                "name": "init",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Initializes the bouncy logo, then bounces the logo into position.</p>\n",
                "parameters": [
                    {
                        "description": "<p>The logo image resource.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.bouncylogo.init-method.image-param",
                        "optional": false,
                        "type": "String",
                        "name": "image"
                    },
                    {
                        "description": "<p>Width of the logo.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.bouncylogo.init-method.width-param",
                        "optional": false,
                        "type": "Number",
                        "name": "width"
                    },
                    {
                        "description": "<p>Height of the logo.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.bouncylogo.init-method.height-param",
                        "optional": false,
                        "type": "Number",
                        "name": "height"
                    },
                    {
                        "description": "<p>The final opacity of the logo once animation is complete.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.bouncylogo.init-method.opacity-param",
                        "optional": true,
                        "type": "Number",
                        "name": "opacity"
                    },
                    {
                        "description": "<p>The duration, in milliseconds, for the logo to slide onto the screeen.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.bouncylogo.init-method.durationIn-param",
                        "optional": true,
                        "type": "Number",
                        "name": "durationIn"
                    },
                    {
                        "description": "<p>The duration, in milliseconds, for the logo to bounce before settling.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.bouncylogo.init-method.durationBounce-param",
                        "optional": true,
                        "type": "Number",
                        "name": "durationBounce"
                    },
                    {
                        "description": "<p>The duration, in milliseconds, for the logo to fade after it has settled.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.bouncylogo.init-method.durationFade-param",
                        "optional": true,
                        "type": "Number",
                        "name": "durationFade"
                    },
                    {
                        "description": "<p>The \"bounciness\" of the animation, where 0 is no bounce and 1 is a full logo height bounce.\n@params {Function} [finishCallback] Callback to invoke once the logo has bounced in and animation is complete.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.widgets.bouncylogo.init-method.bounciness-param",
                        "optional": true,
                        "type": "Number",
                        "name": "bounciness"
                    }
                ],
                "filename": "Alloy.widgets.bouncylogo.init-method"
            },
            {
                "name": "relayout",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Relayout the logo due to an orientation or other change.</p>\n",
                "parameters": [],
                "filename": "Alloy.widgets.bouncylogo.relayout-method"
            },
            {
                "name": "reset",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Reset and rerun the bounce animation for the logo.</p>\n",
                "parameters": [],
                "filename": "Alloy.widgets.bouncylogo.reset-method"
            }
        ],
        "name": "Alloy.widgets.bouncylogo"
    },
    "Alloy.builtins.sha1": {
        "description": "<p>A collection of utilities for calculating SHA-1 or HMAC-SHA-1 values.\nTo use the sha1 builtin library,\nrequire it with the <code>alloy</code> root directory in your <code>require</code> call. For example:</p>\n\n<pre><code>var sha1 = require('alloy/sha1');\nvar sha1_digest = sha1.hex_sha1('The quick brown fox jumps over the lazy dog.');\n</code></pre>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.builtins.sha1-object",
        "method": [
            {
                "name": "b64_hmac_sha1",
                "returns": {
                    "type": "String",
                    "summary": "<p>HMAC-SHA-1 value of the string in base-64.</p>\n"
                },
                "description": "<p>Calculates the HMAC-SHA-1 of a key and some data, and returns the value in base-64.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Key to use.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.sha1.b64_hmac_sha1-method.key-param",
                        "optional": false,
                        "type": "String",
                        "name": "key"
                    },
                    {
                        "description": "<p>Data to use.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.sha1.b64_hmac_sha1-method.data-param",
                        "optional": false,
                        "type": "String",
                        "name": "data"
                    }
                ],
                "filename": "Alloy.builtins.sha1.b64_hmac_sha1-method"
            },
            {
                "name": "b64_sha1",
                "returns": {
                    "type": "String",
                    "summary": "<p>SHA-1 value of the string in base-64.</p>\n"
                },
                "description": "<p>Calculates the SHA-1 of a string and returns the value in base-64.</p>\n",
                "parameters": [
                    {
                        "description": "<p>String to use.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.sha1.b64_sha1-method.s-param",
                        "optional": false,
                        "type": "String",
                        "name": "s"
                    }
                ],
                "filename": "Alloy.builtins.sha1.b64_sha1-method"
            },
            {
                "name": "hex_hmac_sha1",
                "returns": {
                    "type": "String",
                    "summary": "<p>HMAC-SHA-1 value of the string in hexadecimal.</p>\n"
                },
                "description": "<p>Calculates the HMAC-SHA-1 of a key and some data, and returns the value in hexadecimal.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Key to use.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.sha1.hex_hmac_sha1-method.key-param",
                        "optional": false,
                        "type": "String",
                        "name": "key"
                    },
                    {
                        "description": "<p>Data to use.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.sha1.hex_hmac_sha1-method.data-param",
                        "optional": false,
                        "type": "String",
                        "name": "data"
                    }
                ],
                "filename": "Alloy.builtins.sha1.hex_hmac_sha1-method"
            },
            {
                "name": "hex_sha1",
                "returns": {
                    "type": "String",
                    "summary": "<p>SHA-1 value of the string in hexadecimal.</p>\n"
                },
                "description": "<p>Calculates the SHA-1 of a string and returns the value in hexadecimal.</p>\n",
                "parameters": [
                    {
                        "description": "<p>String to use.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.sha1.hex_sha1-method.s-param",
                        "optional": false,
                        "type": "String",
                        "name": "s"
                    }
                ],
                "filename": "Alloy.builtins.sha1.hex_sha1-method"
            },
            {
                "name": "str_hmac_sha1",
                "returns": {
                    "type": "String",
                    "summary": "<p>HMAC-SHA-1 value of the string as a string.</p>\n"
                },
                "description": "<p>Calculates the HMAC-SHA-1 of a key and some data, and returns the value as a string.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Key to use.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.sha1.str_hmac_sha1-method.key-param",
                        "optional": false,
                        "type": "String",
                        "name": "key"
                    },
                    {
                        "description": "<p>Data to use.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.sha1.str_hmac_sha1-method.data-param",
                        "optional": false,
                        "type": "String",
                        "name": "data"
                    }
                ],
                "filename": "Alloy.builtins.sha1.str_hmac_sha1-method"
            },
            {
                "name": "str_sha1",
                "returns": {
                    "type": "String",
                    "summary": "<p>SHA-1 value of the string as a string.</p>\n"
                },
                "description": "<p>Calculates the SHA-1 of a string and returns the value as a string.</p>\n",
                "parameters": [
                    {
                        "description": "<p>String to use.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.sha1.str_sha1-method.s-param",
                        "optional": false,
                        "type": "String",
                        "name": "s"
                    }
                ],
                "filename": "Alloy.builtins.sha1.str_sha1-method"
            }
        ],
        "name": "Alloy.builtins.sha1"
    },
    "AlloyStyleDict": {
        "description": "<p>@typestr Object\n@pseudo\nSimple JavaScript object of properties and TSS classes to apply to a Titanium UI object.</p>\n\n<p>All properties are optional.</p>\n\n<p>The <code>apiName</code> property is only specified with the <code>createStyle</code> method.</p>\n\n<p>In addition to the properties defined below, you can also specify properties related to the\ncomponent.</p>\n",
        "properties": [
            {
                "default": null,
                "type": "String",
                "description": "<p>Name of the Titanium UI object. This can either be the full class name, such as\n<code>Ti.UI.Button</code>, or the XML element, such as <code>Button</code>.</p>\n\n<p>Specified only with <a href=\"#!/api/Alloy.Controller-method-createStyle\" rel=\"Alloy.Controller-method-createStyle\" class=\"docClass\">createStyle</a>.</p>\n",
                "name": "apiName",
                "filename": "AlloyStyleDict.apiName-property"
            },
            {
                "default": null,
                "type": "Array<String>",
                "description": "<p>Array of TSS classes to apply to the Titanium UI object.</p>\n",
                "name": "classes",
                "filename": "AlloyStyleDict.classes-property"
            },
            {
                "default": null,
                "type": "String",
                "description": "<p>TSS ID style to apply to the Titanium UI object.</p>\n",
                "name": "id",
                "filename": "AlloyStyleDict.id-property"
            }
        ],
        "extends": null,
        "events": [],
        "filename": "AlloyStyleDict-object",
        "method": [],
        "name": "AlloyStyleDict"
    },
    "Alloy": {
        "description": "<p>Top-level module for Alloy functions.</p>\n\n<p>Alloy is an application framework built on top of the Titanium SDK designed to help rapidly\ndevelop high quality applications and reduce maintenance.</p>\n\n<p>Alloy uses the model-view-controller architecture to separate the application into three\ncomponents:</p>\n\n<ul>\n<li><p><strong>Models</strong> provide the data of the application. Alloy utilizes <strong>Backbone Model and Collection</strong>\n objects for this functionality.</p></li>\n<li><p><strong>Views</strong> provide the UI components to interact with the application, written using <strong>XML markup</strong>\nand <strong>Titanium Stylesheets (TSS)</strong>, which abstracts the UI components of the Titanium API.</p></li>\n<li><p><strong>Controllers</strong> provide the glue layer between the Model and View components as well as\nadditional application logic using the <strong>Alloy API</strong> and <strong>Titanium API</strong>.</p></li>\n</ul>\n\n\n<p>The API documentation provided here is used with Alloy Controllers and Widget Controllers to\ninteract with the View and Model components of the application or widget.</p>\n\n<p>For guides on using Alloy, see\n<a href=\"http://docs.appcelerator.com/titanium/latest/#!/guide/Alloy_Framework\">Alloy Framework</a>.</p>\n",
        "properties": [
            {
                "default": null,
                "type": "Object",
                "description": "<p>An object that stores Alloy configuration values as defined in your app's\napp/config.json file. Here's what a typical config.json file might look\nlike in an Alloy app.</p>\n\n<pre><code>{\n    \"global\": { \"key\": \"defaultValue\", \"anotherKey\": 12345 },\n    \"env:development\": {},\n    \"env:test\": {},\n    \"env:production\": {},\n    \"os:ios\": { \"key\": \"iosValue\" },\n    \"os:android\": { \"key\": \"androidValue\" },\n    \"dependencies\": {}\n}\n</code></pre>\n\n<p>If this app was compiled for iOS, the <a href=\"#!/api/Alloy-property-CFG\" rel=\"Alloy-property-CFG\" class=\"docClass\">Alloy.CFG</a> would look like this:</p>\n\n<pre><code><a href=\"#!/api/Alloy-property-CFG\" rel=\"Alloy-property-CFG\" class=\"docClass\">Alloy.CFG</a> = {\n    \"key\": \"iosValue\",\n    \"anotherKey\": 12345\n}\n</code></pre>\n\n<p><a href=\"#!/api/Alloy-property-CFG\" rel=\"Alloy-property-CFG\" class=\"docClass\">Alloy.CFG</a> is accessible in any controller in your app, and can be accessed\nin other non-controller Javascript files like this:</p>\n\n<pre><code>var theKey = require('alloy').CFG.key;\n</code></pre>\n",
                "name": "CFG",
                "filename": "Alloy.CFG-property"
            },
            {
                "default": null,
                "type": "Object",
                "description": "<p>An object for storing globally accessible Alloy collections. Singleton collections\ncreated via markup will be stored on this object.</p>\n\n<pre><code>&lt;Collection src=\"myModel\"/&gt;\n</code></pre>\n\n<p>The above markup would effectively generate the following code:</p>\n\n<pre><code>Alloy.Collections.myModel = <a href=\"#!/api/Alloy-method-createCollection\" rel=\"Alloy-method-createCollection\" class=\"docClass\">Alloy.createCollection</a>('MyModel');\n</code></pre>\n\n<p>Alloy.Collections.myModel would then be accessible in any controller in your app.</p>\n",
                "name": "Collections",
                "filename": "Alloy.Collections-property"
            },
            {
                "default": null,
                "type": "Object",
                "description": "<p>An object for storing globally accessible variables and functions.\n<a href=\"#!/api/Alloy-property-Globals\" rel=\"Alloy-property-Globals\" class=\"docClass\">Alloy.Globals</a> is accessible in any controller in your app:</p>\n\n<pre><code>Alloy.Globals.someGlobalObject = { key: 'value' };\nAlloy.Globals.someGlobalFunction = function(){};\n</code></pre>\n\n<p><a href=\"#!/api/Alloy-property-Globals\" rel=\"Alloy-property-Globals\" class=\"docClass\">Alloy.Globals</a> can be accessed in other non-controller Javascript files\nlike this:</p>\n\n<pre><code>var theObject = require('alloy').Globals.someGlobalObject;\n</code></pre>\n",
                "name": "Globals",
                "filename": "Alloy.Globals-property"
            },
            {
                "default": null,
                "type": "Object",
                "description": "<p>An object for storing globally accessible Alloy models. Singleton models\ncreated via markup will be stored on this object.</p>\n\n<pre><code>&lt;Model src=\"myModel\"/&gt;\n</code></pre>\n\n<p>The above markup would effectively generate the following code:</p>\n\n<pre><code>Alloy.Models.myModel = <a href=\"#!/api/Alloy-method-createModel\" rel=\"Alloy-method-createModel\" class=\"docClass\">Alloy.createModel</a>('MyModel');\n</code></pre>\n\n<p>Alloy.Models.myModel would then be accessible in any controller in your app.</p>\n",
                "name": "Models",
                "filename": "Alloy.Models-property"
            },
            {
                "default": null,
                "type": "Boolean",
                "description": "<p><code>true</code> if the current device is a handheld device (not a tablet).</p>\n",
                "name": "isHandheld",
                "filename": "Alloy.isHandheld-property"
            },
            {
                "default": null,
                "type": "Boolean",
                "description": "<p><code>true</code> if the current device is a tablet.</p>\n",
                "name": "isTablet",
                "filename": "Alloy.isTablet-property"
            }
        ],
        "extends": null,
        "events": [],
        "filename": "Alloy-object",
        "method": [
            {
                "name": "createCollection",
                "returns": {
                    "type": "Backbone.Collection",
                    "summary": "<p>Backbone collection object.</p>\n\n"
                },
                "description": "<p>Factory method for instantiating a Backbone collection of model objects. Creates and returns a\ncollection for holding the named type of model objects.</p>\n\n<p>See <a href=\"http://docs.appcelerator.com/backbone/0.9.2/#Collection\">Backbone.Collection</a> in the Backbone.js\ndocumentation for  information on the methods and  properties provided by the\nCollection object.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Name of model to hold in this collection.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.createCollection-method.name-param",
                        "optional": false,
                        "type": "String",
                        "name": "name"
                    },
                    {
                        "description": "<p>Arguments to pass to the collection.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.createCollection-method.args-param",
                        "optional": true,
                        "type": "Object",
                        "name": "args"
                    }
                ],
                "filename": "Alloy.createCollection-method"
            },
            {
                "name": "createController",
                "returns": {
                    "type": "Alloy.Controller",
                    "summary": "<p>Alloy controller object.</p>\n\n"
                },
                "description": "<p>Factory method for instantiating a controller. Creates and returns an instance of the\nnamed controller.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Name of controller to instantiate.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.createController-method.name-param",
                        "optional": false,
                        "type": "String",
                        "name": "name"
                    },
                    {
                        "description": "<p>Arguments to pass to the controller.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.createController-method.args-param",
                        "optional": true,
                        "type": "Object",
                        "name": "args"
                    }
                ],
                "filename": "Alloy.createController-method"
            },
            {
                "name": "createModel",
                "returns": {
                    "type": "Backbone.Model",
                    "summary": "<p>Backbone model object.</p>\n\n"
                },
                "description": "<p>Factory method for instantiating a Backbone Model object. Creates and returns an instance of the\nnamed model.</p>\n\n<p>See <a href=\"http://docs.appcelerator.com/backbone/0.9.2/#Model\">Backbone.Model</a> in the Backbone.js documentation for\ninformation on the methods and properties provided by the Model object.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Name of model to instantiate.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.createModel-method.name-param",
                        "optional": false,
                        "type": "String",
                        "name": "name"
                    },
                    {
                        "description": "<p>Arguments to pass to the model.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.createModel-method.args-param",
                        "optional": true,
                        "type": "Object",
                        "name": "args"
                    }
                ],
                "filename": "Alloy.createModel-method"
            },
            {
                "name": "createWidget",
                "returns": {
                    "type": "Alloy.Controller",
                    "summary": "<p>Alloy widget controller object.</p>\n\n"
                },
                "description": "<p>Factory method for instantiating a widget controller. Creates and returns an instance of the\nnamed widget.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Id of widget to instantiate.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.createWidget-method.id-param",
                        "optional": false,
                        "type": "String",
                        "name": "id"
                    },
                    {
                        "description": "<p>Name of the view within the widget to instantiate ('widget' by default)</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.createWidget-method.name-param",
                        "optional": true,
                        "type": "String",
                        "name": "name"
                    },
                    {
                        "description": "<p>Arguments to pass to the widget.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.createWidget-method.args-param",
                        "optional": true,
                        "type": "Object",
                        "name": "args"
                    }
                ],
                "filename": "Alloy.createWidget-method"
            }
        ],
        "name": "Alloy"
    },
    "Alloy.builtins.social": {
        "description": "<p>A collection of useful social media provider utilities. Currently, this module only supports\nTwitter and the following features:</p>\n\n<ul>\n<li>Logging into Twitter and authorizing the application through the OAuth protocol.</li>\n<li>Posting tweets to the user's Twitter account.</li>\n</ul>\n\n\n<p>To use the social builtin library, require it with the <code>alloy</code> root\ndirectory in your <code>require</code> call. For example:</p>\n\n<pre><code>var social = require('alloy/social').create({\n    consumerSecret: 'consumer-secret',\n    consumerKey: 'consumer-key'\n});\n</code></pre>\n\n<h2>Login and Authorization</h2>\n\n<p>To use a social media provider, a user must log in and authorize the application to perform\ncertain actions, such as accessing profile information or posting messages.</p>\n\n<p>Call <code>authorize</code> to prompt the user to login and authorize the application.  For Twitter, a\ndialog box will appear asking the user for their permission and login credentials.</p>\n\n<p>Before calling <code>authorize</code>, the application will need a consumer key and secret provided by the\nsocial media service provider for the OAuth protocol, used when calling <code>create</code>.\nFor Twitter, these are provided when registering an application:\n<a href=\"https://dev.twitter.com/apps/new\">https://dev.twitter.com/apps/new</a></p>\n\n<h2>Example</h2>\n\n<p>This example authorizes the application, posts a message to the user's Twitter account, then\ndeauthorizes the application.</p>\n\n<pre><code>// If not authorized, get authorization from the user\nif(!social.isAuthorized()) { \n    social.authorize();\n}\n\n// Post a message\n// Setup both callbacks for confirmation\nsocial.share({\n    message: \"Salut, Monde!\",\n    success: function(e) {alert('Success!')},\n    error: function(e) {alert('Error!')}\n}); \n\n// Deauthorize the application\nsocial.deauthorize();\n</code></pre>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.builtins.social-object",
        "method": [
            {
                "name": "authorize",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Authorizes the client to the service provider to access user data.\nIf successful, the client will receive an access token, which will be saved for future\nusage.\nCall this function after opening the parent view or else the authorize UI window will\nappear in the background behind the view and unusable to the user.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Callback function executed after successfully retrieving\nan access token.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.social.authorize-method.callback-param",
                        "optional": true,
                        "type": "Function",
                        "name": "callback"
                    }
                ],
                "filename": "Alloy.builtins.social.authorize-method"
            },
            {
                "name": "create",
                "returns": {
                    "type": "Object",
                    "summary": "<p>Instance of social to make subsequent API calls.</p>\n"
                },
                "description": "<p>Initializes an OAuth session to the service provider.\nIf a previous access token exists, it will be loaded.</p>\n",
                "parameters": [
                    {
                        "description": "<p>OAuth session settings.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.social.create-method.settings-param",
                        "optional": false,
                        "type": "...*",
                        "name": "settings"
                    }
                ],
                "filename": "Alloy.builtins.social.create-method"
            },
            {
                "name": "deauthorize",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Deauthorizes the client and clears the access token.</p>\n",
                "parameters": [],
                "filename": "Alloy.builtins.social.deauthorize-method"
            },
            {
                "name": "isAuthorized",
                "returns": {
                    "type": "Boolean",
                    "summary": "<p>Returns 'true' if authorized else 'false'.</p>\n"
                },
                "description": "<p>Returns 'true' if the client is authorized by the service provider.</p>\n",
                "parameters": [],
                "filename": "Alloy.builtins.social.isAuthorized-method"
            },
            {
                "name": "share",
                "returns": {
                    "type": "void"
                },
                "description": "<p>Sends an update to the service provider.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Update parameters.</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.builtins.social.share-method.options-param",
                        "optional": false,
                        "type": "...*",
                        "name": "options"
                    }
                ],
                "filename": "Alloy.builtins.social.share-method"
            }
        ],
        "name": "Alloy.builtins.social"
    },
    "Alloy.Widget": {
        "description": "<p>Widgets are self-contained components that can be easily dropped into an Alloy project.\nThey were conceived as a way to reuse code in multiple projects or to be used multiple\ntimes in the same project.</p>\n\n<p>Note that to use the methods list below, the correct namespace is <code>Widget.create*</code> not\n<code>Alloy.Widget.create*</code>.</p>\n\n<p>For more information on widgets, see <a href=\"http://docs.appcelerator.com/titanium/latest/#!/guide/Alloy_Widgets\">Alloy Widgets</a></p>\n\n<h4>Creating a Widget</h4>\n\n<p>Widgets are essentially miniature Alloy projects that contain their own models, views, controllers\nand assets.  They are laid out the same way as an Alloy project.</p>\n\n<p>Use <code>Widget.createController()</code>, <code>Widget.createWidget()</code>,  <code>Widget.createModel()</code> and\n<code>Widget.createCollection()</code> rather than the <code>Alloy.create*</code> methods to create\ncomponents relative to the widget context rather than the Alloy project.</p>\n\n<h4>Using a Widget</h4>\n\n<p>To use a widget in your Alloy project, first add it as a dependency in your config.json file.\nThe name of the widget is the key and the version of the widget is the value.</p>\n\n<pre><code>...\n\"dependencies\":{\n    \"com.appcelerator.loading\":\"1.0\"\n} \n</code></pre>\n\n<p>Next, either add the widget in the XML markup of the view or create an instance of the widget in the controller.</p>\n\n<p>To add the widget in the view, use the <code>Widget</code> tag, specifying the <code>src</code> attribute as the name of\nthe widget:</p>\n\n<pre><code>&lt;Alloy&gt;\n    &lt;Window id=\"win\"&gt;\n        &lt;Widget id=\"loadIcon\" src=\"com.appcelerator.loading\" /&gt;\n    &lt;/Window&gt;\n&lt;/Alloy&gt;\n</code></pre>\n\n<p>Since the <code>id</code> attribute is defined, the widget can be referenced in the controller using\n<code>$.loadIcon</code>.</p>\n\n<p>To add the widget in the controller, use the <code><a href=\"#!/api/Alloy-method-createWidget\" rel=\"Alloy-method-createWidget\" class=\"docClass\">Alloy.createWidget</a></code> method. The first required parameter is\nthe name of the widget. The second optional parameter can specify the view component to\ninstantiate and the last optional parameter can specify the arguments to instantiate the widget.\nFor example, the following controller code is equivalent to the previous view markup example.</p>\n\n<pre><code>var loadIcon = <a href=\"#!/api/Alloy-method-createWidget\" rel=\"Alloy-method-createWidget\" class=\"docClass\">Alloy.createWidget</a>(\"com.appcelerator.loading\");\nwin.add(loadIcon);\n</code></pre>\n\n<p>A widget can also be added to other widgets.  Follow the same procedure as above except the widget\nconfiguration file is called widget.json instead of config.json.</p>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.Widget-object",
        "method": [
            {
                "name": "createCollection",
                "returns": {
                    "type": "Backbone.Collection",
                    "summary": "<p>Backbone collection object.</p>\n\n"
                },
                "description": "<p>Factory method for instantiating a Backbone collection of model objects. Creates and returns a\ncollection for holding the named type of model objects.</p>\n\n<p>See <a href=\"http://docs.appcelerator.com/backbone/0.9.2/#Collection\">Backbone.Collection</a> in the Backbone.js\ndocumentation for  information on the methods and  properties provided by the\nCollection object.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Name of model to hold in this collection.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.Widget.createCollection-method.name-param",
                        "optional": false,
                        "type": "String",
                        "name": "name"
                    },
                    {
                        "description": "<p>Arguments to pass to the collection.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.Widget.createCollection-method.args-param",
                        "optional": true,
                        "type": "Object",
                        "name": "args"
                    }
                ],
                "filename": "Alloy.Widget.createCollection-method"
            },
            {
                "name": "createController",
                "returns": {
                    "type": "Alloy.Controller",
                    "summary": "<p>Alloy controller object.</p>\n\n"
                },
                "description": "<p>Factory method for instantiating a controller. Creates and returns an instance of the\nnamed controller.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Name of controller to instantiate.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.Widget.createController-method.name-param",
                        "optional": false,
                        "type": "String",
                        "name": "name"
                    },
                    {
                        "description": "<p>Arguments to pass to the controller.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.Widget.createController-method.args-param",
                        "optional": true,
                        "type": "Object",
                        "name": "args"
                    }
                ],
                "filename": "Alloy.Widget.createController-method"
            },
            {
                "name": "createModel",
                "returns": {
                    "type": "Backbone.Model",
                    "summary": "<p>Backbone model object.</p>\n\n"
                },
                "description": "<p>Factory method for instantiating a Backbone Model object. Creates and returns an instance of the\nnamed model.</p>\n\n<p>See <a href=\"http://docs.appcelerator.com/backbone/0.9.2/#Model\">Backbone.Model</a> in the Backbone.js documentation for\ninformation on the methods and properties provided by the Model object.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Name of model to instantiate.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.Widget.createModel-method.name-param",
                        "optional": false,
                        "type": "String",
                        "name": "name"
                    },
                    {
                        "description": "<p>Arguments to pass to the model.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.Widget.createModel-method.args-param",
                        "optional": true,
                        "type": "Object",
                        "name": "args"
                    }
                ],
                "filename": "Alloy.Widget.createModel-method"
            },
            {
                "name": "createWidget",
                "returns": {
                    "type": "Alloy.Controller",
                    "summary": "<p>Alloy widget controller object.</p>\n\n"
                },
                "description": "<p>Factory method for instantiating a widget controller. Creates and returns an instance of the\nnamed widget.</p>\n",
                "parameters": [
                    {
                        "description": "<p>Id of widget to instantiate.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.Widget.createWidget-method.id-param",
                        "optional": false,
                        "type": "String",
                        "name": "id"
                    },
                    {
                        "description": "<p>Name of the view within the widget to instantiate ('widget' by default)</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.Widget.createWidget-method.name-param",
                        "optional": true,
                        "type": "String",
                        "name": "name"
                    },
                    {
                        "description": "<p>Arguments to pass to the widget.</p>\n\n",
                        "deprecated": false,
                        "filename": "Alloy.Widget.createWidget-method.args-param",
                        "optional": true,
                        "type": "Object",
                        "name": "args"
                    }
                ],
                "filename": "Alloy.Widget.createWidget-method"
            }
        ],
        "name": "Alloy.Widget"
    },
    "Alloy.Models": {
        "description": "<p>Class to access or create models.</p>\n\n<p>Models can either be created in markup or programmatically in the controller.</p>\n\n<p>To create models in markup, see the 'Model Element' section in the\n<a href=\"#!/guide/Alloy_XML_Markup\">Alloy XML Markup guide</a>.</p>\n\n<p>In the controller code:</p>\n\n<ul>\n<li> To create a local instance, use the <a href=\"#!/api/Alloy-method-createModel\" rel=\"Alloy-method-createModel\" class=\"docClass\">Alloy.createModel</a> method.</li>\n<li> To create a global singleton instance, use the <a href=\"#!/api/Alloy.Models-method-instance\" rel=\"Alloy.Models-method-instance\" class=\"docClass\">Alloy.Models.instance</a> method.</li>\n</ul>\n\n\n<p>Previously created models through markup or using the <code>instance</code> method\nare directly accessed as properties of the <code><a href=\"#!/api/Alloy.Models\" rel=\"Alloy.Models\" class=\"docClass\">Alloy.Models</a></code> namespace,\nusing either the name of the model JavaScript file for singletons\nor the ID name for local instances.</p>\n",
        "properties": [],
        "extends": null,
        "events": [],
        "filename": "Alloy.Models-object",
        "method": [
            {
                "name": "instance",
                "returns": {
                    "type": "Backbone.Model",
                    "summary": "<p>An Alloy Model object singleton</p>\n"
                },
                "description": "<p>Creates a singleton instance of a Model based on the given model, or\nreturns an existing instance if one has already been created.</p>\n",
                "parameters": [
                    {
                        "description": "<p>the name of the base model for the model</p>\n",
                        "deprecated": false,
                        "filename": "Alloy.Models.instance-method.name-param",
                        "optional": false,
                        "type": "String",
                        "name": "name"
                    }
                ],
                "filename": "Alloy.Models.instance-method"
            }
        ],
        "name": "Alloy.Models"
    }
}