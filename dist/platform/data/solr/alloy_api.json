[
    {
        "name": "Alloy.Controller",
        "id": "Alloy.Controller-platform",
        "url": "Alloy.Controller",
        "type": "platform",
        "content": "Alloy.Controller The base class for Alloy controllers. Each controller is associated with a UI hierarchy, defined in an XML file in the views folder. Each element in the view hierarchy is either a Titanium View or another Alloy controller or widget. Each Alloy controller or widget can additionally contain Titanium Views and/or more controllers and widgets. "
    },
    {
        "id": "Alloy.Controller-method-addClass-platform",
        "url": "Alloy.Controller-method-addClass",
        "type": "platform",
        "name": "Alloy.Controller.addClass",
        "content": "Alloy.Controller.addClass addClass Adds a TSS class to the specified view object. You can apply additional styles with the opts parameter. To use this method effectively you may need to enable autostyling on the target XML view. See Autostyle in the Alloy developer guide. Example The following adds the TSS classes \".redbg\" and \".bigger\" to a Titanium.UI.Label object proxy label1, and also sets the label's text property to \"Cancel\". // index.js $.addClass($.label1, 'redbg bigger', {text: \"Cancel\"}); The 'redbg' and 'bigger' classes are shown below: // index.tss \".redbg\" : { color: 'red' } \".bigger\": { font : { fontSize: '36' } } proxy Object View object to which to add class(es). classes Array/String Array or space-separated list of classes to apply. opts Dictionary Dictionary of properties to apply after classes have been added. return void"
    },
    {
        "id": "Alloy.Controller-method-addListener-platform",
        "url": "Alloy.Controller-method-addListener",
        "type": "platform",
        "name": "Alloy.Controller.addListener",
        "content": "Alloy.Controller.addListener addListener Adds a tracked event listeners to a view proxy object. By default, any event listener declared in XML is tracked by Alloy. Example Add an event to the tracking target. $.addListener($.aView, 'click', onClick); proxy Object Proxy view object to listen to. type String Name of the event. callback Function Callback function to invoke when the event is fired. return String ID attribute of the view object. If one does not exist, Alloy will create a unique ID. "
    },
    {
        "id": "Alloy.Controller-method-createStyle-platform",
        "url": "Alloy.Controller-method-createStyle",
        "type": "platform",
        "name": "Alloy.Controller.createStyle",
        "content": "Alloy.Controller.createStyle createStyle Creates a dictionary of properties based on the specified styles. You can use this dictionary with the view object's applyProperties method or a create object method, such as Titanium.UI.createView. Examples The following creates a new style object that is passed as a parameter to the Ti.UI.createLabel() method. var styleArgs = { apiName: 'Ti.UI.Label', classes: ['blue','shadow','large'], id: 'tester', borderWidth: 2, borderRadius: 16, borderColor: '#000' }; var styleObject = $.createStyle(styleArgs); testLabel = Ti.UI.createLabel(styleObject); The next example uses the applyProperties() method to apply a style object to an existing Button control (button not shown). var style = $.createStyle({ classes: args.button, apiName: 'Button', color: 'blue' }); $.button.applyProperties(style); opts AlloyStyleDict Dictionary of styles to apply. return Dictionary "
    },
    {
        "id": "Alloy.Controller-method-destroy-platform",
        "url": "Alloy.Controller-method-destroy",
        "type": "platform",
        "name": "Alloy.Controller.destroy",
        "content": "Alloy.Controller.destroy destroy Frees binding resources associated with this controller and its UI components. It is critical that this is called when employing model/collection binding in order to avoid potential memory leaks. $.destroy() should be called whenever a controller's UI is to be \"closed\" or removed from the app. See the Destroying Data Bindings test application for an example of this approach. Example In the following example the view-controller for a Window object named dialog calls its destroy() method in response to the Window object being closed. $.dialog.addEventListener('close', function() { $.destroy(); }); return void"
    },
    {
        "id": "Alloy.Controller-method-getListener-platform",
        "url": "Alloy.Controller-method-getListener",
        "type": "platform",
        "name": "Alloy.Controller.getListener",
        "content": "Alloy.Controller.getListener getListener Gets all the tracked event listeners of the view-controller or only the ones specified by the parameters. Passing no parameters, retrieves all tracked event listeners. Set a parameter to null if you do not want to restrict the match to that parameter. Example Get all events bound to the view-controller. var listener = $.getListener(); proxy Object Proxy view object. type String Name of the event. return Array List of tracked event listeners. "
    },
    {
        "id": "Alloy.Controller-method-getTopLevelViews-platform",
        "url": "Alloy.Controller-method-getTopLevelViews",
        "type": "platform",
        "name": "Alloy.Controller.getTopLevelViews",
        "content": "Alloy.Controller.getTopLevelViews getTopLevelViews Returns a list of the root view elements associated with this controller. Example The following example displays the id of each top-level view associated with the controller: // index.js var views = $.getTopLevelViews(); for (each in views) { var view = views[each]; console.log(view.id); } return Array. "
    },
    {
        "id": "Alloy.Controller-method-getView-platform",
        "url": "Alloy.Controller-method-getView",
        "type": "platform",
        "name": "Alloy.Controller.getView",
        "content": "Alloy.Controller.getView getView Returns the specified view associated with this controller. If no id is specified, returns the first top-level view. Example The following example gets a reference to a object with the id of \"loginWin\" and then calls its open() method. var loginWindow = $.getView('loginWin'); loginWindow.open(); id String ID of the view to return. return Titanium.UI.View/Alloy.Controller "
    },
    {
        "id": "Alloy.Controller-method-getViews-platform",
        "url": "Alloy.Controller-method-getViews",
        "type": "platform",
        "name": "Alloy.Controller.getViews",
        "content": "Alloy.Controller.getViews getViews Returns a list of all IDed view elements associated with this controller. Example Given the following XML view: I am Window 1 I am Window 2 The following view-controller outputs the id of each view in the hierarchy. var views = $.getViews(); for (each in views) { var view = views[each]; console.log(view.id); } [INFO] : win1 [INFO] : label1 [INFO] : tab1 [INFO] : wind2 [INFO] : label2 [INFO] : tab2 [INFO] : tabs [INFO] : otherview return Array. "
    },
    {
        "id": "Alloy.Controller-method-removeClass-platform",
        "url": "Alloy.Controller-method-removeClass",
        "type": "platform",
        "name": "Alloy.Controller.removeClass",
        "content": "Alloy.Controller.removeClass removeClass Removes a TSS class from the specified view object. You can apply additional styles after the removal with the opts parameter. To use this method effectively you may need to enable autostyling on the target XML view. See Autostyle in the Alloy developer guide. Example The following removes the \"redbg\" and \"bigger\" TSS classes from a Titanium.UI.Label object proxy label1, and also sets the label's text property to \"...\". $.removeClass($.label1, 'redbg bigger', {text: \"...\"}); proxy Object View object from which to remove class(es). classes Array/String Array or space-separated list of classes to remove. opts Dictionary Dictionary of properties to apply after the class removal. return void"
    },
    {
        "id": "Alloy.Controller-method-removeListener-platform",
        "url": "Alloy.Controller-method-removeListener",
        "type": "platform",
        "name": "Alloy.Controller.removeListener",
        "content": "Alloy.Controller.removeListener removeListener Removes all tracked event listeners or only the ones specified by the parameters. Passing no parameters, removes all tracked event listeners. Set a parameter to null if you do not want to restrict the match to that parameter. Example When the window is closed, remove all tracked event listeners. Hello, world function doClose() { $.removeListener(); } proxy Object Proxy view object to remove event listeners from. type String Name of the event to remove. callback Function Callback to remove. return Alloy.Controller Controller instance. "
    },
    {
        "id": "Alloy.Controller-method-resetClass-platform",
        "url": "Alloy.Controller-method-resetClass",
        "type": "platform",
        "name": "Alloy.Controller.resetClass",
        "content": "Alloy.Controller.resetClass resetClass Sets the array of TSS classes for the target View object, adding the classes specified and removing any applied classes that are not specified. You can apply classes or styles after the reset using the classes or opts parameters. To use this method effectively you may need to enable autostyling on the target XML view. See Autostyle in the Alloy developer guide. Example The following removes all previously applied styles on label1 and then applies the TSS class 'no-style'. $.resetClass($.label1, 'no-style'); proxy Object View object to reset. classes Array/String Array or space-separated list of classes to apply after the reset. opts Dictionary Dictionary of properties to apply after the reset. return void"
    },
    {
        "id": "Alloy.Controller-method-updateViews-platform",
        "url": "Alloy.Controller-method-updateViews",
        "type": "platform",
        "name": "Alloy.Controller.updateViews",
        "content": "Alloy.Controller.updateViews updateViews Applies a set of properties to view elements associated with this controller. This method is useful for setting properties on repeated elements such as TableViewRow objects, rather than needing to have a controller for those child controllers. Example The following example uses this method to update a Label inside a TableViewRow object before adding it to a TableView. View-controller file: controllers/index.js for (var i=0; i Alloy.createController(\"tablerow\"); row.updateViews({ \"#theLabel\": { text: \"I am row #\" + i } }); $.tableView.appendRow(row.getView()); }; XML view: views/tablerow.xml XML view: views/index.xml args Object An object whose keys are the IDs (in form '#id') of views to which the styles will be applied. return Alloy.Controller this "
    },
    {
        "name": "Alloy",
        "id": "Alloy-platform",
        "url": "Alloy",
        "type": "platform",
        "content": "Alloy Top-level module for Alloy functions. Alloy is an application framework built on top of the Titanium SDK designed to help rapidly develop high quality applications and reduce maintenance. Alloy uses the model-view-controller architecture to separate the application into three components: Models provide the data of the application. Alloy utilizes Backbone Model and Collection objects for this functionality. Views provide the UI components to interact with the application, written using XML markup and Titanium Stylesheets (TSS), which abstracts the UI components of the Titanium API. Controllers provide the glue layer between the Model and View components as well as additional application logic using the Alloy API and Titanium API. The API documentation provided here is used with Alloy Controllers and Widget Controllers to interact with the View and Model components of the application or widget. For guides on using Alloy, see Alloy Framework. "
    },
    {
        "id": "Alloy-property-CFG-platform",
        "url": "Alloy-property-CFG",
        "type": "platform",
        "name": "Alloy.CFG",
        "content": "Alloy.CFG CFG An object that stores Alloy configuration values as defined in your app's app/config.json file. Here's what a typical config.json file might look like in an Alloy app. { \"global\": { \"key\": \"defaultValue\", \"anotherKey\": 12345 }, \"env:development\": {}, \"env:test\": {}, \"env:production\": {}, \"os:ios\": { \"key\": \"iosValue\" }, \"os:android\": { \"key\": \"androidValue\" }, \"dependencies\": {} } If this app was compiled for iOS, the Alloy.CFG would look like this: Alloy.CFG = { \"key\": \"iosValue\", \"anotherKey\": 12345 } Alloy.CFG is accessible in any controller in your app, and can be accessed in other non-controller Javascript files like this: var theKey = require('alloy').CFG.key; Object"
    },
    {
        "id": "Alloy-property-Collections-platform",
        "url": "Alloy-property-Collections",
        "type": "platform",
        "name": "Alloy.Collections",
        "content": "Alloy.Collections Collections An object for storing globally accessible Alloy collections. Singleton collections created via markup will be stored on this object. The above markup would effectively generate the following code: Alloy.Collections.myModel = Alloy.createCollection('MyModel'); Alloy.Collections.myModel would then be accessible in any controller in your app. Object"
    },
    {
        "id": "Alloy-property-Globals-platform",
        "url": "Alloy-property-Globals",
        "type": "platform",
        "name": "Alloy.Globals",
        "content": "Alloy.Globals Globals An object for storing globally accessible variables and functions. Alloy.Globals is accessible in any controller in your app: Alloy.Globals.someGlobalObject = { key: 'value' }; Alloy.Globals.someGlobalFunction = function(){}; Alloy.Globals can be accessed in other non-controller Javascript files like this: var theObject = require('alloy').Globals.someGlobalObject; Object"
    },
    {
        "id": "Alloy-property-Models-platform",
        "url": "Alloy-property-Models",
        "type": "platform",
        "name": "Alloy.Models",
        "content": "Alloy.Models Models An object for storing globally accessible Alloy models. Singleton models created via markup will be stored on this object. The above markup would effectively generate the following code: Alloy.Models.myModel = Alloy.createModel('MyModel'); Alloy.Models.myModel would then be accessible in any controller in your app. Object"
    },
    {
        "id": "Alloy-property-isHandheld-platform",
        "url": "Alloy-property-isHandheld",
        "type": "platform",
        "name": "Alloy.isHandheld",
        "content": "Alloy.isHandheld isHandheld true if the current device is a handheld device (not a tablet). Boolean"
    },
    {
        "id": "Alloy-property-isTablet-platform",
        "url": "Alloy-property-isTablet",
        "type": "platform",
        "name": "Alloy.isTablet",
        "content": "Alloy.isTablet isTablet true if the current device is a tablet. Boolean"
    },
    {
        "id": "Alloy-method-createCollection-platform",
        "url": "Alloy-method-createCollection",
        "type": "platform",
        "name": "Alloy.createCollection",
        "content": "Alloy.createCollection createCollection Factory method for instantiating a Backbone collection of model objects. Creates and returns a collection for holding the named type of model objects. See Backbone.Collection in the Backbone.js documentation for information on the methods and properties provided by the Collection object. name String Name of model to hold in this collection. args Object Arguments to pass to the collection. return Backbone.Collection Backbone collection object. "
    },
    {
        "id": "Alloy-method-createController-platform",
        "url": "Alloy-method-createController",
        "type": "platform",
        "name": "Alloy.createController",
        "content": "Alloy.createController createController Factory method for instantiating a controller. Creates and returns an instance of the named controller. name String Name of controller to instantiate. args Object Arguments to pass to the controller. return Alloy.Controller Alloy controller object. "
    },
    {
        "id": "Alloy-method-createModel-platform",
        "url": "Alloy-method-createModel",
        "type": "platform",
        "name": "Alloy.createModel",
        "content": "Alloy.createModel createModel Factory method for instantiating a Backbone Model object. Creates and returns an instance of the named model. See Backbone.Model in the Backbone.js documentation for information on the methods and properties provided by the Model object. name String Name of model to instantiate. args Object Arguments to pass to the model. return Backbone.Model Backbone model object. "
    },
    {
        "id": "Alloy-method-createWidget-platform",
        "url": "Alloy-method-createWidget",
        "type": "platform",
        "name": "Alloy.createWidget",
        "content": "Alloy.createWidget createWidget Factory method for instantiating a widget controller. Creates and returns an instance of the named widget. id String Id of widget to instantiate. name String Name of the view within the widget to instantiate ('widget' by default) args Object Arguments to pass to the widget. return Alloy.Controller Alloy widget controller object. "
    },
    {
        "name": "Alloy.builtins",
        "id": "Alloy.builtins-platform",
        "url": "Alloy.builtins",
        "type": "platform",
        "content": "Alloy.builtins Alloy provides some additional utility libraries that simplify certain functions, such as animations, string manipultation and display unit conversion. These libraries are referred to as \"builtins.\" To use a builtin library, require the library name, minus the '.js' extension, with alloy as the root directory in your require call. For example, to use the animation builtin: var animation = require('alloy/animation'); animation.crossFade(view1, view2, 500, finishCallback); During the compilation process, Alloy determines which builtins are being used, and adds them to the generated Titanium project. "
    },
    {
        "name": "Alloy.Collections",
        "id": "Alloy.Collections-platform",
        "url": "Alloy.Collections",
        "type": "platform",
        "content": "Alloy.Collections Class to access or create collections. Collections can either be created in markup or programmatically in the controller. To create collections in markup use a element. For more information see Collection Element in the Alloy developer guide. In the controller code: To create a local instance, use the Alloy.createCollection method. To create a global singleton instance, use the Alloy.Collections.instance method. Previously created collections through markup or using the instance() method are directly accessed as properties of the Alloy.Collections namespace, using either the name of the model JavaScript file for singletons or the ID name for local instances. "
    },
    {
        "id": "Alloy.Collections-method-instance-platform",
        "url": "Alloy.Collections-method-instance",
        "type": "platform",
        "name": "Alloy.Collections.instance",
        "content": "Alloy.Collections.instance instance Creates a singleton instance of a Collection based on the given model, or returns an existing instance if one has already been created. name String the name of the base model for the collection return Backbone.Collection An Alloy Collection object singleton "
    },
    {
        "name": "Alloy.Controller.UI",
        "id": "Alloy.Controller.UI-platform",
        "url": "Alloy.Controller.UI",
        "type": "platform",
        "content": "Alloy.Controller.UI Provides convenience methods for working with Titanium UI objects. "
    },
    {
        "id": "Alloy.Controller.UI-method-create-platform",
        "url": "Alloy.Controller.UI-method-create",
        "type": "platform",
        "name": "Alloy.Controller.UI.create",
        "content": "Alloy.Controller.UI.create create Creates a Titanium UI object with the specified styles. Example The following creates a new View object and assigns the \"dialog\" TSS class (defined elsewhere) to the view, and finally adds it to main window. var view = $.UI.create(\"View\", { classes: 'dialog' }); $.index.add(view); apiName String Name of the Titanium object to create. This can either be the full class name, such as Ti.UI.Button, or the XML element, such as Button. opts AlloyStyleDict Dictionary of styles to apply. opts may also contain any additional properties you would like to apply directly the created Titanium object. return Titanium.UI.View/Alloy.Controller "
    },
    {
        "name": "AlloyStyleDict",
        "id": "AlloyStyleDict-platform",
        "url": "AlloyStyleDict",
        "type": "platform",
        "content": "AlloyStyleDict Simple JavaScript object of properties and TSS classes to apply to a Titanium UI object. All properties are optional. The apiName property is only specified with the createStyle method. In addition to the properties defined below, you can also specify properties related to the component. "
    },
    {
        "id": "AlloyStyleDict-property-apiName-platform",
        "url": "AlloyStyleDict-property-apiName",
        "type": "platform",
        "name": "AlloyStyleDict.apiName",
        "content": "AlloyStyleDict.apiName apiName Name of the Titanium UI object. This can either be the full class name, such as Ti.UI.Button, or the XML element, such as Button. Specified only with createStyle. String"
    },
    {
        "id": "AlloyStyleDict-property-classes-platform",
        "url": "AlloyStyleDict-property-classes",
        "type": "platform",
        "name": "AlloyStyleDict.classes",
        "content": "AlloyStyleDict.classes classes Array of TSS classes to apply to the Titanium UI object. Array"
    },
    {
        "id": "AlloyStyleDict-property-id-platform",
        "url": "AlloyStyleDict-property-id",
        "type": "platform",
        "name": "AlloyStyleDict.id",
        "content": "AlloyStyleDict.id id TSS ID style to apply to the Titanium UI object. String"
    },
    {
        "name": "TrackedEventListener",
        "id": "TrackedEventListener-platform",
        "url": "TrackedEventListener",
        "type": "platform",
        "content": "TrackedEventListener A tracked event listener. "
    },
    {
        "id": "TrackedEventListener-property-handler-platform",
        "url": "TrackedEventListener-property-handler",
        "type": "platform",
        "name": "TrackedEventListener.handler",
        "content": "TrackedEventListener.handler handler Callback bound to the view's event. Function"
    },
    {
        "id": "TrackedEventListener-property-id-platform",
        "url": "TrackedEventListener-property-id",
        "type": "platform",
        "name": "TrackedEventListener.id",
        "content": "TrackedEventListener.id id ID attribute of the view object. If the view object does not have an ID attribute, Alloy assigns it a unique ID. String"
    },
    {
        "id": "TrackedEventListener-property-type-platform",
        "url": "TrackedEventListener-property-type",
        "type": "platform",
        "name": "TrackedEventListener.type",
        "content": "TrackedEventListener.type type Name of the event. String"
    },
    {
        "id": "TrackedEventListener-property-view-platform",
        "url": "TrackedEventListener-property-view",
        "type": "platform",
        "name": "TrackedEventListener.view",
        "content": "TrackedEventListener.view view View object bound to the event listener. Object"
    },
    {
        "name": "Alloy.Models",
        "id": "Alloy.Models-platform",
        "url": "Alloy.Models",
        "type": "platform",
        "content": "Alloy.Models Class to access or create models. Models can either be created in markup or programmatically in the controller. To create models in markup, see the 'Model Element' section in the Alloy XML Markup guide. In the controller code: To create a local instance, use the Alloy.createModel method. To create a global singleton instance, use the Alloy.Models.instance method. Previously created models through markup or using the instance method are directly accessed as properties of the Alloy.Models namespace, using either the name of the model JavaScript file for singletons or the ID name for local instances. "
    },
    {
        "id": "Alloy.Models-method-instance-platform",
        "url": "Alloy.Models-method-instance",
        "type": "platform",
        "name": "Alloy.Models.instance",
        "content": "Alloy.Models.instance instance Creates a singleton instance of a Model based on the given model, or returns an existing instance if one has already been created. name String the name of the base model for the model return Backbone.Model An Alloy Model object singleton "
    },
    {
        "name": "Alloy.builtins.moment",
        "id": "Alloy.builtins.moment-platform",
        "url": "Alloy.builtins.moment",
        "type": "platform",
        "content": "Alloy.builtins.moment Moment.js is a freely distributable, third-party JavaScript date library for parsing, validating, manipulating, and formatting dates. To use the moment.js library in Alloy, require it with the alloy root directory in your require call. For example: var moment = require('alloy/moment'); var day = moment(\"12-25-1995\", \"MM-DD-YYYY\"); Ti.API.info(\"Date:\" + day.format(\"dddd, MMMM Do YYYY, h:mm:ss a\")); // --> Monday, December 25th 1995, 12:00:00 am To change the locale globally, the application calls the moment.locale() function, passing it the new language code. var moment = require('alloy/moment'); require('alloy/moment/lang/de'); require('alloy/moment/lang/fr'); moment.locale(Ti.Locale.currentLocale); // Set current system locale, as a combination of ISO 2-letter language and country codes. For documentation, usage examples and more information, see http://momentjs.com/. "
    },
    {
        "name": "Alloy.Widget",
        "id": "Alloy.Widget-platform",
        "url": "Alloy.Widget",
        "type": "platform",
        "content": "Alloy.Widget Widgets are self-contained components that can be easily dropped into an Alloy project. They were conceived as a way to reuse code in multiple projects or to be used multiple times in the same project. Note that to use the methods list below, the correct namespace is Widget.create* not Alloy.Widget.create*. For more information on widgets, see Alloy Widgets. Creating a Widget Widgets are essentially miniature Alloy projects that contain their own models, views, controllers and assets. They are laid out the same way as an Alloy project. Use Widget.createController(), Widget.createWidget(), Widget.createModel() and Widget.createCollection() rather than the Alloy.create* methods to create components relative to the widget context rather than the Alloy project. Using a Widget To import a widget in to a project: Copy the widget to the app/widgets folder. The widget must be contained within its own folder. Update the dependencies object in the config.json file by adding a key/value pair with the name of the widget as the key and the version number as the value. Add the widget to a view or create an instance of the widget in a controller: To add a widget to a view, add the tag in the XML markup and set the src attribute to the folder name of the widget. To create an instance of a widget in a controller, use the Alloy.createController method. You can optionally add the id and name attributes to the Widget element: The id attribute allows you to reference the widget in the controller code. You can use this reference to call methods exported by the widget. The name attribute allows you to import a specific view-controller in the widget rather than the default one (widget.xml/widget.js). Specify the name of the view-controller minus the extension. For example, to import a widget called mywidget in to a project, copy mywidget to the app/widgets folder, where its assets, controllers, views, etc. are contained in the app/widgets/mywidget folder. app config.json controllers index.js views index.xml widgets mywidget controllers foo.js widget.js views foo.xml widget.xml widget.json Next, add it as a dependency in your config.json file: ... \"dependencies\":{ \"mywidget\":\"1.0\" } Finally, either add the widget in the XML markup of the view or create an instance of the widget in the controller. To add the widget in the view, use the Widget tag, specifying the src attribute as the name of the widget: Since the id attribute is defined, the widget can be referenced in the controller using $.myWidget. To add the widget in the controller, use the Alloy.createWidget method. The first required parameter is the name of the widget. The second optional parameter can specify the view component to instantiate and the last optional parameter can specify the arguments to instantiate the widget. For example, the following controller code is equivalent to the previous view markup example. var myWidget = Alloy.createWidget(\"mywidget\"); win.add(myWidget.getView()); A widget can also be added to other widgets. Follow the same procedure as above except the widget configuration file is called widget.json instead of config.json. "
    },
    {
        "id": "Alloy.Widget-method-createCollection-platform",
        "url": "Alloy.Widget-method-createCollection",
        "type": "platform",
        "name": "Alloy.Widget.createCollection",
        "content": "Alloy.Widget.createCollection createCollection Factory method for instantiating a Backbone collection of model objects. Creates and returns a collection for holding the named type of model objects. See Backbone.Collection in the Backbone.js documentation for information on the methods and properties provided by the Collection object. name String Name of model to hold in this collection. args Object Arguments to pass to the collection. return Backbone.Collection Backbone collection object. "
    },
    {
        "id": "Alloy.Widget-method-createController-platform",
        "url": "Alloy.Widget-method-createController",
        "type": "platform",
        "name": "Alloy.Widget.createController",
        "content": "Alloy.Widget.createController createController Factory method for instantiating a controller. Creates and returns an instance of the named controller. name String Name of controller to instantiate. args Object Arguments to pass to the controller. return Alloy.Controller Alloy controller object. "
    },
    {
        "id": "Alloy.Widget-method-createModel-platform",
        "url": "Alloy.Widget-method-createModel",
        "type": "platform",
        "name": "Alloy.Widget.createModel",
        "content": "Alloy.Widget.createModel createModel Factory method for instantiating a Backbone Model object. Creates and returns an instance of the named model. See Backbone.Model in the Backbone.js documentation for information on the methods and properties provided by the Model object. name String Name of model to instantiate. args Object Arguments to pass to the model. return Backbone.Model Backbone model object. "
    },
    {
        "id": "Alloy.Widget-method-createWidget-platform",
        "url": "Alloy.Widget-method-createWidget",
        "type": "platform",
        "name": "Alloy.Widget.createWidget",
        "content": "Alloy.Widget.createWidget createWidget Factory method for instantiating a widget controller. Creates and returns an instance of the named widget. id String Id of widget to instantiate. name String Name of the view within the widget to instantiate ('widget' by default) args Object Arguments to pass to the widget. return Alloy.Controller Alloy widget controller object. "
    },
    {
        "name": "Alloy.widgets",
        "id": "Alloy.widgets-platform",
        "url": "Alloy.widgets",
        "type": "platform",
        "content": "Alloy.widgets The sample widgets are no longer supplied or supported and have been removed from Alloy. Maintained versions of the sample widgets are available at http://gitt.io/. For information on using a widget in your project, see Alloy.Widget. "
    }
]