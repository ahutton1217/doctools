Ext.data.JsonP['API_Builder_Web']({"guide":"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title>API Builder Web</title>\n\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\">\n\n    <link type=\"text/css\" rel=\"stylesheet\">\n    <link type=\"text/css\" rel=\"stylesheet\">\n    <link type=\"text/css\" rel=\"stylesheet\" media=\"print\">\n</link></link></link></meta></meta></head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\"/>\n\n        <div id=\"src-43299023\" class=\"content\">\n                        <h1>API Builder Web</h1>\n    <p>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p><a class=\"document-link \" href=\"#!/guide/API_Builder_Web-section-src-43299023_APIBuilderWeb-Introduction\">Introduction</a>    </p>\n</li><li class=\" \">    <p><a class=\"document-link \" href=\"#!/guide/API_Builder_Web-section-src-43299023_APIBuilderWeb-Routedefinition\">Route definition</a>    </p>\n</li><li class=\" \">    <p><a class=\"document-link \" href=\"#!/guide/API_Builder_Web-section-src-43299023_APIBuilderWeb-Rendererengines\">Renderer engines</a>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p><a class=\"document-link \" href=\"#!/guide/API_Builder_Web-section-src-43299023_APIBuilderWeb-Pre-builtrendererengines\">Pre-built renderer engines</a>    </p>\n</li><li class=\" \">    <p><a class=\"document-link \" href=\"#!/guide/API_Builder_Web-section-src-43299023_APIBuilderWeb-Customrendererengines\">Custom renderer engines</a>    </p>\n</li><li class=\" \">    <p><a class=\"document-link \" href=\"#!/guide/API_Builder_Web-section-src-43299023_APIBuilderWeb-Handlebarspartialsandhelpers\">Handlebars partials and helpers</a>    </p>\n<ul class=\"toc-indentation \"><li class=\" \">    <p><a class=\"document-link \" href=\"#!/guide/API_Builder_Web-section-src-43299023_APIBuilderWeb-Helpers\">Helpers</a>    </p>\n</li><li class=\" \">    <p><a class=\"document-link \" href=\"#!/guide/API_Builder_Web-section-src-43299023_APIBuilderWeb-Partials\">Partials</a>    </p>\n</li></ul></li></ul></li><li class=\" \">    <p><a class=\"document-link \" href=\"#!/guide/API_Builder_Web-section-src-43299023_APIBuilderWeb-APIBuilderAPIsfromAPIBuilderWeb\">API Builder APIs from API Builder Web</a>    </p>\n</li><li class=\" \">    <p><a class=\"document-link \" href=\"#!/guide/API_Builder_Web-section-src-43299023_APIBuilderWeb-Interactingwithmodels\">Interacting with models</a>    </p>\n</li></ul>    <div class=\"section section-2 \" id=\"src-43299023_APIBuilderWeb-Introduction\">\n        <h2 class=\"heading \"><span>Introduction</span></h2>\n    <p>This guide covers the basics for creating API Builder Web interfaces.  An API Builder Web interface is a custom endpoint that renders HTML content to a client application.  An API Builder Web interface is made up of:    </p>\n<ul class=\" \"><li class=\" \">    <p>assets (images, CSS, HTML and JavaScript files) located in the <tt class=\" \">web/public</tt> folder    </p>\n</li><li class=\" \">    <p>templates (EJS, Handelbars, Markdown or ReactJS) located in the <tt class=\" \">web/views</tt> folder    </p>\n</li><li class=\" \">    <p>API Builder Routes (endpoint definitions) located in the <tt class=\" \">web/routes</tt> folder    </p>\n</li></ul>    <p>You can create custom logic in your API Builder Routes, which can internally access your application&apos;s models and APIs.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"src-43299023_APIBuilderWeb-Routedefinition\">\n        <h2 class=\"heading \"><span>Route definition</span></h2>\n    <p>Place all API Builder route definition files in the project&apos;s <tt class=\" \">web/routes</tt> folder.  You can only declare one endpoint definition per file.  An API Builder route definition file is a JavaScript file, which:    </p>\n<ol class=\" \"><li class=\" \">    <p>Loads the <tt class=\" \">arrow</tt> module    </p>\n</li><li class=\" \">    <p>Calls the module&apos;s <tt class=\" \">Router.extend()</tt> method, passing in an object defining the API endpoint and logic    </p>\n</li><li class=\" \">    <p>Exports the defined endpoint using the <tt class=\" \">module.exports</tt> variable    </p>\n</li></ol>    <p>Set the following keys in the object passed to the <tt class=\" \">Router.extend()</tt> method to define the API endpoint.    </p>\n    <div class=\"tablewrap\">\n        <table class=\"confluenceTable\">\n        <thead class=\" \">    <tr>\n            <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n        <p>Name    </p>\n            </td>\n                <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n        <p>Required    </p>\n            </td>\n                <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n        <p>Description    </p>\n            </td>\n        </tr>\n</thead><tfoot class=\" \"/><tbody class=\" \">    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>name    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>true    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>Name of the route.    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>path    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>true    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>Endpoint/path for the route.    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>enabled    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>false    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>Specifies whether the route is enabled. If not, it won&#x2019;t be registered, and won&#x2019;t accept requests.    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>sort    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>false    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>Integer that determines the order routes are registered. Routes with a higher sort value are prioritized and registered earlier. For example, say you have /route/:id and /route/foo. If the route with the wildcard has a higher sort than the static route, the static route runs. So create the first with a lower sort, and /route/foo routes properly, as does /api/bar.    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>method    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>true    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>HTTP method (GET, POST, PUT, DELETE).    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>description    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>true    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>Description of the route.    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>action    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>true    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>Function that allows you to interact with API Builder APIs and models and send data to your template engine.    </p>\n            </td>\n        </tr>\n</tbody>        </table>\n            </div>\n    <p>    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"src-43299023_APIBuilderWeb-Rendererengines\">\n        <h2 class=\"heading \"><span>Renderer engines</span></h2>\n    <p>A renderer engine renders data (or locals in the Express framework) to the view (template file).  API Builder provides a few renderer engines and allows you to add your own custom renderer engines.    </p>\n    <div class=\"section section-3 \" id=\"src-43299023_APIBuilderWeb-Pre-builtrendererengines\">\n        <h3 class=\"heading \"><span>Pre-built renderer engines</span></h3>\n    <p>API Builder Web supports the EJS, Handlebars, Markdown and ReactJS renderer engines.  Place all template files with the appropriate extension in the <tt class=\" \">web/templates</tt> folder.    </p>\n    <div class=\"tablewrap\">\n        <table class=\"confluenceTable\">\n        <thead class=\" \">    <tr>\n            <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n        <p>Renderer Engine    </p>\n            </td>\n                <td class=\"confluenceTh\" rowspan=\"1\" colspan=\"1\">\n        <p>File Extension    </p>\n            </td>\n        </tr>\n</thead><tfoot class=\" \"/><tbody class=\" \">    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>EJS    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>.ejs    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>Handlebars    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>.hbs    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>Markdown    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>.md    </p>\n            </td>\n        </tr>\n    <tr>\n            <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>ReactJS    </p>\n            </td>\n                <td class=\"confluenceTd\" rowspan=\"1\" colspan=\"1\">\n        <p>.jsx    </p>\n            </td>\n        </tr>\n</tbody>        </table>\n            </div>\n    <p>To use a template in the API Builder Route&apos;s logic, reference its filename without the extension.  Because the template is referenced using the filename, you cannot have the same filename with multiple extensions.    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"src-43299023_APIBuilderWeb-Customrendererengines\">\n        <h3 class=\"heading \"><span>Custom renderer engines</span></h3>\n    <p>To create a custom renderer engine you need to create a renderer engine and register it with the API Builder instance&apos;s middleware instance.    </p>\n<ol class=\" \"><li class=\" \">    <p>Create an object that implements the <tt class=\" \">createRenderer()</tt> method and specifies the <tt class=\" \">extension</tt> property.    </p>\n</li><li class=\" \">    <p>Pass the object to the Middleware instance&apos;s <tt class=\" \">registerRendererEngine()</tt> method.  You can retrieve a Middleware instance by using the <tt class=\" \">middleware</tt> property of the API Builder instance.    </p>\n</li></ol>    <p>For example, to implement a renderer engine for Jade templates:    </p>\n    <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\">\n                <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\">\n<div class=\"line\"><code class=\"plain\">var jade = require(</code><code class=\"string\">&apos;jade&apos;</code><code class=\"plain\">),</code></div>\n<div class=\"line\"><code class=\"plain\">    engine = {};</code></div>\n<div class=\"line\"><code class=\"plain\">engine.jade = jade;</code></div>\n<div class=\"line\"><code class=\"plain\">engine.createRenderer = function (content, filename, app) {</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">return</code><code class=\"plain\"> function(filename, opts, callback) {</code></div>\n<div class=\"line\"><code class=\"plain\">        </code><code class=\"keyword\">if</code><code class=\"plain\"> (!content) {</code></div>\n<div class=\"line\"><code class=\"plain\">            content = require(</code><code class=\"string\">&apos;fs&apos;</code><code class=\"plain\">).readFileSync(filename, </code><code class=\"string\">&apos;utf8&apos;</code><code class=\"plain\">).toString();</code></div>\n<div class=\"line\"><code class=\"plain\">        }</code></div>\n<div class=\"line\"><code class=\"plain\">        callback(</code><code class=\"keyword\">null</code><code class=\"plain\">, jade.render(content, opts));</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n<div class=\"line\"><code class=\"plain\">engine.extension = </code><code class=\"string\">&apos;jade&apos;</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"comments\">// server is an Arrow instance</code></div>\n<div class=\"line\"><code class=\"plain\">server.middleware.registerRendererEngine(engine);</code></div>\n</div>\n    </div>\n    <p>    <span style=\"color: #222222;\">\nAny view with a     </span>\n<tt class=\" \">jade</tt>    <span style=\"color: #222222;\">\n extension will be routed to the Jade renderer engine.    </span>\n    </p>\n    </div>\n    <div class=\"section section-3 \" id=\"src-43299023_APIBuilderWeb-Handlebarspartialsandhelpers\">\n        <h3 class=\"heading \"><span>Handlebars partials and helpers</span></h3>\n    <p>API Builder exposes some APIs to allow you to register Handlebar partials or helpers.    </p>\n    <div class=\"section section-4 \" id=\"src-43299023_APIBuilderWeb-Helpers\">\n        <h4 class=\"heading \"><span>Helpers</span></h4>\n    <p>Helpers are functions that you can evaluate in your Handlebar templates.  To use a helper, register the helper with the Handlebar renderer engine, then in the template, call the helper using the name you gave the helper when registering it.    </p>\n<ol class=\" \"><li class=\" \">    <p>Get a reference to the Handlebar renderer engine using the <tt class=\" \">Arrow.Middleware.getRendererEngine(&apos;hbs&apos;)</tt> method.    </p>\n</li><li class=\" \">    <p>Call either the Handlebar renderer engine&apos;s <tt class=\" \">registerHelper()</tt> to register a helper function.  Pass the method the name of the helper and the function to invoke.    </p>\n</li></ol>    <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\">\n                <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\">\n<div class=\"line\"><code class=\"plain\">var Arrow = require(</code><code class=\"string\">&apos;arrow&apos;</code><code class=\"plain\">),</code></div>\n<div class=\"line\"><code class=\"plain\">    hbs = Arrow.Middleware.getRendererEngine(</code><code class=\"string\">&apos;hbs&apos;</code><code class=\"plain\">);</code></div>\n<div class=\"line\">&#xA0;</div>\n<div class=\"line\"><code class=\"plain\">hbs.registerHelper(</code><code class=\"string\">&apos;doFoo&apos;</code><code class=\"plain\">, function(foo) {</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// this.name references the name parameter passed to the template</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"comments\">// in the render call, that is, res.render(&apos;template&apos;, {name: &apos;Joe&apos;});</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">if</code><code class=\"plain\"> (foo) {</code></div>\n<div class=\"line\"><code class=\"plain\">        </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.name + </code><code class=\"string\">&apos; is great!&apos;</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">    } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">        </code><code class=\"keyword\">return</code><code class=\"plain\"> </code><code class=\"keyword\">this</code><code class=\"plain\">.name + </code><code class=\"string\">&apos; is ok.&apos;</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n    </div>\n    <p><strong class=\" \">Template example:</strong>    </p>\n    <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\">\n                <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\">\n<div class=\"line\"><code class=\"plain\">&lt;div&gt;doFoo(</code><code class=\"keyword\">true</code><code class=\"plain\">)&lt;/div&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;div&gt;doFoo(</code><code class=\"keyword\">false</code><code class=\"plain\">)&lt;/div&gt;</code></div>\n</div>\n    </div>\n    </div>\n    <div class=\"section section-4 \" id=\"src-43299023_APIBuilderWeb-Partials\">\n        <h4 class=\"heading \"><span>Partials</span></h4>\n    <p>Partials are subviews that you can embed in a template.  To use a partial, you need to register it with the Handlebar renderer engine, then reference the partial in the template using the <tt class=\" \">{{&gt; partialName}}</tt> syntax, where <tt class=\" \">partialName</tt> is the name you gave the partial when you registered it.    </p>\n<ol class=\" \"><li class=\" \">    <p>Get a reference to the Handlebar renderer engine using the <tt class=\" \">Arrow.Middleware.getRendererEngine(&apos;hbs&apos;)</tt> method.    </p>\n</li><li class=\" \">    <p>Call either the Handlebar renderer engine&apos;s <tt class=\" \">registerPartial()</tt> to register a partial file.  Pass the method the name of the partial and the template file to use as a partial.    </p>\n</li></ol>    <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\">\n                <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\">\n<div class=\"line\"><code class=\"plain\">var Arrow = require(</code><code class=\"string\">&apos;arrow&apos;</code><code class=\"plain\">),</code></div>\n<div class=\"line\"><code class=\"plain\">    hbs = Arrow.Middleware.getRendererEngine(</code><code class=\"string\">&apos;hbs&apos;</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">hbs.registerPartial(</code><code class=\"string\">&apos;fooView&apos;</code><code class=\"plain\">, </code><code class=\"string\">&apos;web/views/foo.hbs&apos;</code><code class=\"plain\">);</code></div>\n</div>\n    </div>\n    <p><strong class=\" \">Template example:</strong>    </p>\n    <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\">\n                <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\">\n<div class=\"line\"><code class=\"plain\">&lt;!-- Partial web/views/foo.hbs --&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;!-- id and name are passed as data to the res.render() method --&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;a href=</code><code class=\"string\">&quot;/people/{{id}}&quot;</code><code class=\"plain\">&gt;{{name}}&lt;/a&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&#xA0;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;!-- Main Template web/views/main.hbs --&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;ul&gt;{{#people}}&lt;li&gt;{{&gt; fooView}}&lt;/li&gt;{{/people}}&lt;/ul&gt;</code></div>\n</div>\n    </div>\n    </div>\n    </div>\n    </div>\n    <div class=\"section section-2 \" id=\"src-43299023_APIBuilderWeb-APIBuilderAPIsfromAPIBuilderWeb\">\n        <h2 class=\"heading \"><span>API Builder APIs from API Builder Web</span></h2>\n    <p>You can interact with API Builder APIs from your API Builder Web route. The following is an example.    </p>\n    <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\">\n                <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\">\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> Arrow = require(</code><code class=\"string\">&apos;arrow&apos;</code><code class=\"plain\">);</code></div>\n<div class=\"line\">&#xA0;</div>\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> TestRoute = Arrow.Router.extend({</code></div>\n<div class=\"line\"><code class=\"plain\">    name: </code><code class=\"string\">&apos;car&apos;</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    path: </code><code class=\"string\">&apos;/car&apos;</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    method: </code><code class=\"string\">&apos;GET&apos;</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    description: </code><code class=\"string\">&apos;get some cars&apos;</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    action: </code><code class=\"keyword\">function</code><code class=\"plain\"> (req, resp, next) {</code></div>\n<div class=\"line\">&#xA0;</div>\n<div class=\"line\"><code class=\"plain\">        req.server.getAPI(</code><code class=\"string\">&apos;api/car&apos;</code><code class=\"plain\">, </code><code class=\"string\">&apos;GET&apos;</code><code class=\"plain\">).execute({}, </code><code class=\"keyword\">function</code><code class=\"plain\">(err, results) {</code></div>\n<div class=\"line\"><code class=\"plain\">            </code><code class=\"keyword\">if</code><code class=\"plain\"> (err) {</code></div>\n<div class=\"line\"><code class=\"plain\">                next(err);</code></div>\n<div class=\"line\"><code class=\"plain\">            } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">                req.log.info(</code><code class=\"string\">&apos;got cars &apos;</code><code class=\"plain\"> + JSON.stringify(results));</code></div>\n<div class=\"line\"><code class=\"plain\">                resp.render(</code><code class=\"string\">&apos;car&apos;</code><code class=\"plain\">, results);</code></div>\n<div class=\"line\"><code class=\"plain\">            }</code></div>\n<div class=\"line\"><code class=\"plain\">        });</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\">&#xA0;</div>\n<div class=\"line\"><code class=\"plain\">module.exports = TestRoute;</code></div>\n</div>\n    </div>\n    <p>In the preceding example, the route calls the <tt class=\" \">car</tt> API. You can retrieve a reference to an API by specifying its path or <tt class=\" \">nickname </tt>property when specified by the model/API that you are using. For example:    </p>\n    <p><tt class=\" \">req.server.getAPI(&apos;api/car&apos;);</tt>    </p>\n    <p>This code returns a reference to the <tt class=\" \">car</tt> API. Once you have the API, you need to call <tt class=\" \">execute</tt>:    </p>\n    <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\">\n                <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\">\n<div class=\"line\"><code class=\"plain\">req.server.getAPI(</code><code class=\"string\">&apos;api/car&apos;</code><code class=\"plain\">).execute({}, </code><code class=\"keyword\">function</code><code class=\"plain\">(err, results){</code></div>\n<div class=\"line\">&#xA0;</div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n</div>\n    </div>\n    <p>This first argument to <tt class=\" \">execute</tt> is the input required by your API. In this example, none are required since <tt class=\" \">findAll</tt> is being called. The second argument is a callback function. The first argument in the callback function is an <tt class=\" \">error</tt> object. The second is data returned from the API call.    </p>\n    <p>The final part of the example is calling the template with the response data from the API call.    </p>\n    <p><tt class=\" \">resp.render(&apos;car&apos;,results);</tt>    </p>\n    <p>In this example, <tt class=\" \">car</tt> references the name of a handlebars template file (<tt class=\" \">car.hbs</tt>) and <tt class=\" \">results</tt> contains the API response with the array of cars.    </p>\n    <p>Following is the handlebars template for this example. It iterates through the <tt class=\" \">cars</tt> array.    </p>\n    <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\">\n                <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\">\n<div class=\"line\"><code class=\"plain\">&lt;</code><code class=\"keyword\">html</code><code class=\"plain\">&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;</code><code class=\"keyword\">head</code><code class=\"plain\">&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/</code><code class=\"keyword\">head</code><code class=\"plain\">&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;</code><code class=\"keyword\">body</code><code class=\"plain\">&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    {{#each cars}}</code></div>\n<div class=\"line\"><code class=\"plain\">        &lt;</code><code class=\"keyword\">div</code><code class=\"plain\">&gt;{{make}} {{model}} {{year}}&lt;/</code><code class=\"keyword\">div</code><code class=\"plain\">&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">    {{/each}}</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/</code><code class=\"keyword\">body</code><code class=\"plain\">&gt;</code></div>\n<div class=\"line\"><code class=\"plain\">&lt;/</code><code class=\"keyword\">html</code><code class=\"plain\">&gt;</code></div>\n</div>\n    </div>\n    </div>\n    <div class=\"section section-2 \" id=\"src-43299023_APIBuilderWeb-Interactingwithmodels\">\n        <h2 class=\"heading \"><span>Interacting with models</span></h2>\n    <p>The preceding example shows how to access APIs from a route. You can also directly access models. The following modifies the preceding example to use the <tt class=\" \">car</tt> model.    </p>\n    <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\">\n                <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\">\n<div class=\"line\"><code class=\"plain\">ar Arrow = require(</code><code class=\"string\">&apos;arrow&apos;</code><code class=\"plain\">);</code></div>\n<div class=\"line\">&#xA0;</div>\n<div class=\"line\"><code class=\"keyword\">var</code><code class=\"plain\"> TestRoute = Arrow.Router.extend({</code></div>\n<div class=\"line\"><code class=\"plain\">    name: </code><code class=\"string\">&apos;car&apos;</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    path: </code><code class=\"string\">&apos;/car&apos;</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    method: </code><code class=\"string\">&apos;GET&apos;</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    description: </code><code class=\"string\">&apos;get some cars&apos;</code><code class=\"plain\">,</code></div>\n<div class=\"line\"><code class=\"plain\">    action: </code><code class=\"keyword\">function</code><code class=\"plain\"> (req, resp, next) {</code></div>\n<div class=\"line\"><code class=\"plain\">        </code><code class=\"keyword\">var</code><code class=\"plain\"> model = req.server.getModel(</code><code class=\"string\">&apos;car&apos;</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">        model.findAll(</code><code class=\"keyword\">function</code><code class=\"plain\">(err, results){</code></div>\n<div class=\"line\"><code class=\"plain\">            </code><code class=\"keyword\">if</code><code class=\"plain\"> (err) {</code></div>\n<div class=\"line\"><code class=\"plain\">                next(err);</code></div>\n<div class=\"line\"><code class=\"plain\">            } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">                req.log.info(</code><code class=\"string\">&apos;got cars &apos;</code><code class=\"plain\"> + JSON.stringify(results));</code></div>\n<div class=\"line\"><code class=\"plain\">                resp.render(</code><code class=\"string\">&apos;car&apos;</code><code class=\"plain\">, {cars:results});</code></div>\n<div class=\"line\"><code class=\"plain\">            }</code></div>\n<div class=\"line\">&#xA0;</div>\n<div class=\"line\"><code class=\"plain\">        });</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">});</code></div>\n<div class=\"line\">&#xA0;</div>\n<div class=\"line\"><code class=\"plain\">module.exports = TestRoute;</code></div>\n</div>\n    </div>\n    <p>The first line of the <tt class=\" \">action</tt> function retrieves the <tt class=\" \">car</tt> model by name:    </p>\n    <p><tt class=\" \">var model = req.server.getModel(&apos;car&apos;);</tt>    </p>\n    <p>The next line calls the <tt class=\" \">findAll</tt> function of the model. It&#x2019;s important to note that calling APIs is different than calling models. Calling an API programmatically on the server is nearly identical to calling it remotely - you supply some input parameters and call execute and it returns the API response. Calling a model programmatically is slightly different. Since it&#x2019;s a model, it does not have a REST interface. Instead, it has the functions that are called underneath the covers when an API is called, so a <tt class=\" \">GET</tt> call to an API is the same as a <tt class=\" \">findAll</tt> call on the model. The other difference is in the response data. The model only returns the data results - hence the results are placed in an object property called <tt class=\" \">car</tt>, so my UI template can render it properly.    </p>\n    <p>As you can see, API Builder Web makes it easy to build responsive desktop and web apps (using your template engine of choice) that seamlessly integrate with API Builder APIs and models.    </p>\n    <p>    </p>\n    </div>\n        </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=43299023\"><span>Edit</span></a>\n    \n        \n    </div>\n</body>\n</html>\n","title":"API Builder Web"});