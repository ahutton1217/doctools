Ext.data.JsonP['API_Builder_Formatters']({"guide":"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title>Formatters</title>\n\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\">\n\n    <link type=\"text/css\" rel=\"stylesheet\">\n    <link type=\"text/css\" rel=\"stylesheet\">\n    <link type=\"text/css\" rel=\"stylesheet\" media=\"print\">\n</link></link></link></meta></meta></head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\"/>\n\n        <div id=\"src-49158047\" class=\"content\">\n                        <h1>Formatters</h1>\n    <p>API Buiider ships with a number of formatters already installed:    </p>\n<ul class=\" \"><li class=\" \">    <p>JSON    </p>\n</li><li class=\" \">    <p>XML    </p>\n</li><li class=\" \">    <p>CSV    </p>\n</li><li class=\" \">    <p>YAML    </p>\n</li><li class=\" \">    <p>Text    </p>\n</li><li class=\" \">    <p>JavaScript    </p>\n</li></ul>    <p>When accessing the API, if you provide an &#x201C;Accept&#x201D; header, the response will be formatted using one of the above.    </p>\n    <p>These formatters can be customized, or new ones can be added.    </p>\n    <div class=\"section section-2 \" id=\"src-49158047_APIBuilderFormatters-\">\n        <h2 class=\"heading \"><span/></h2>\n    </div>\n    <div class=\"section section-2 \" id=\"src-49158047_APIBuilderFormatters-Customizingthebuilt-inJSONformatter\">\n        <h2 class=\"heading \"><span>Customizing the built-in JSON formatter</span></h2>\n    <p>In your app.js, overwrite the built in formatter as follows:    </p>\n    <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\">\n                <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\">\n<div class=\"line\"><code class=\"plain\">Arrow.Formation.formatters.json = function jsonFormatter(req, resp, body, singular, plural, callback) {</code></div>\n<div class=\"line\"><code class=\"plain\">    resp.set(</code><code class=\"string\">&apos;Content-Type&apos;</code><code class=\"plain\">, </code><code class=\"string\">&apos;application/json&apos;</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">    </code><code class=\"keyword\">if</code><code class=\"plain\"> (typeof body === </code><code class=\"string\">&apos;object&apos;</code><code class=\"plain\">) {</code></div>\n<div class=\"line\"><code class=\"plain\">        body.customized = </code><code class=\"keyword\">true</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">        callback(</code><code class=\"keyword\">null</code><code class=\"plain\">, JSON.stringify(body));</code></div>\n<div class=\"line\"><code class=\"plain\">    } </code><code class=\"keyword\">else</code><code class=\"plain\"> {</code></div>\n<div class=\"line\"><code class=\"plain\">        callback(</code><code class=\"keyword\">null</code><code class=\"plain\">, body);</code></div>\n<div class=\"line\"><code class=\"plain\">    }</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n</div>\n    </div>\n    <p>    </p>\n    <p>Now whenever you request a JSON format from the API, it will also inject the <tt class=\" \">&quot;customized&quot;:true</tt> property on objects.    </p>\n    </div>\n    <div class=\"section section-2 \" id=\"src-49158047_APIBuilderFormatters-.1\">\n        <h2 class=\"heading \"><span/></h2>\n    </div>\n    <div class=\"section section-2 \" id=\"src-49158047_APIBuilderFormatters-Addinganewformattype\">\n        <h2 class=\"heading \"><span>Adding a new format type</span></h2>\n    <p>In your app.js, add the new format as follows:    </p>\n    <div class=\"confbox programlisting defaultnew syntaxhighlighter scroll-html-formatted-code\">\n                <div xmlns=\"http://www.w3.org/1999/xhtml\" class=\"defaultnew syntaxhighlighter scroll-html-formatted-code\">\n<div class=\"line\"><code class=\"plain\">Arrow.Formation.formats.push(</code><code class=\"string\">&apos;happy&apos;</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">Arrow.Formation.extensions.happy = </code><code class=\"string\">&apos;text/happy&apos;</code><code class=\"plain\">;</code></div>\n<div class=\"line\"><code class=\"plain\">Arrow.Formation.formatters.happy = function happyFormatter(req, resp, body, singular, plural, callback) {</code></div>\n<div class=\"line\"><code class=\"plain\">    resp.set(</code><code class=\"string\">&apos;Content-Type&apos;</code><code class=\"plain\">, </code><code class=\"string\">&apos;text/happy&apos;</code><code class=\"plain\">);</code></div>\n<div class=\"line\"><code class=\"plain\">    callback(</code><code class=\"keyword\">null</code><code class=\"plain\">, </code><code class=\"string\">&apos;You look super happy today! Oh, and: &apos;</code><code class=\"plain\"> + JSON.stringify(body, </code><code class=\"keyword\">null</code><code class=\"plain\">, </code><code class=\"string\">&apos;\\t&apos;</code><code class=\"plain\">));</code></div>\n<div class=\"line\"><code class=\"plain\">};</code></div>\n</div>\n    </div>\n    <p>Now whenever you request a &#x201C;text/happy&#x201D; format from the API, it will follow the &#x201C;happy&#x201D; protocol (which has been contrived solely for this demonstration of formatters).    </p>\n    </div>\n        </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=49158047\"><span>Edit</span></a>\n    \n        \n    </div>\n</body>\n</html>\n","title":"API Builder Formatters"});