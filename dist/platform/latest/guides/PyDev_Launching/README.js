Ext.data.JsonP['PyDev_Launching']({"guide":"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title>PyDev Launching</title>\n\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <meta content=\"Scroll EclipseHelp Exporter\" name=\"generator\">\n\n    <link type=\"text/css\" rel=\"stylesheet\">\n    <link type=\"text/css\" rel=\"stylesheet\">\n    <link type=\"text/css\" rel=\"stylesheet\" media=\"print\">\n</link></link></link></meta></meta></head>\n<body>\n    <div class=\"container\">\n\t\t<div id=\"banner\" class=\"confbox admonition admonition-note aui-message warning shadowed information-macro\">\n\t\t\t<p>You can now find Appcelerator documentation at <a href=\"https://docs.axway.com/\" target=\"_blank\">https://docs.axway.com/</a>. This site will be taken down in the near future.</p></div>\n        <div class=\"header\"/>\n\n        <div id=\"src-30083058\" class=\"content\">\n                        <h1>PyDev Launching</h1>\n    <div class=\"section section-2 \" id=\"src-30083058_safe-id-UHlEZXZMYXVuY2hpbmctTGF1bmNoaW5nL0RlYnVnZ2luZ1B5dGhvbnNjcmlwdHM\">\n        <h2 class=\"heading \"><span>Launching/Debugging Python scripts</span></h2>\n    </div>\n    <div class=\"section section-2 \" id=\"src-30083058_PyDevLaunching-RegularLaunch\">\n        <h2 class=\"heading \"><span>Regular Launch</span></h2>\n    <p>The easiest way of launching a python file from PyDev is opening an editor and using the <strong class=\" \">F9 keybinding</strong>. Through that command, PyDev will create/reuse a <strong class=\" \">launch</strong> config to run the current editor based on the <strong class=\" \">current settings of the project</strong> (i.e.: if the project is configured as IronPython, it&apos;ll use an IronPython interpreter).    </p>\n    <p>    <img src=\"images/pydev.org/images/debugger/f9.png\" alt=\"images/pydev.org/images/debugger/f9.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\">\n    <br>Another option would be running using the <strong class=\" \">context menu</strong>, where you can choose how you want to make the run (in that way, you could run a python project with a jython interpreter)    </br></img></p>\n    <p>    <img src=\"images/pydev.org/images/debugger/run_as_regular.png\" alt=\"images/pydev.org/images/debugger/run_as_regular.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\">\n        </img></p>\n    </div>\n    <div class=\"section section-2 \" id=\"src-30083058_PyDevLaunching-UnitTestLaunch\">\n        <h2 class=\"heading \"><span>Unit Test Launch</span></h2>\n    <p>If you use <strong class=\" \">unit-tests</strong>, and want to run only a single unit-test or a few unit-tests of a module, you can use the <strong class=\" \">Ctrl+F9 keybinding</strong>, which will open a tree where you can choose which test(s) you want to run:    </p>\n    <p>    <img src=\"images/pydev.org/images/debugger/ctrl_f9.png\" alt=\"images/pydev.org/images/debugger/ctrl_f9.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\">\n    <br>In that dialog, there are some options:    </br></img></p>\n<ul class=\" \"><li class=\" \">    <p>Extending the filter and pressing &apos;Enter&apos; will run the filtered tests    </p>\n</li><li class=\" \">    <p>Explicitly selecting the class/tests to run will run those tests    </p>\n</li></ul>    </div>\n    <div class=\"section section-2 \" id=\"src-30083058_PyDevLaunching-DebugLaunch\">\n        <h2 class=\"heading \"><span>Debug Launch</span></h2>\n    <p>To run in debug mode, you can use the <strong class=\" \">context menu</strong>, where you can choose how you want to make the debug (note that in that way, you could debug a python project with a jython interpreter)    </p>\n    <p>    <img src=\"images/pydev.org/images/debugger/run_as_debug.png\" alt=\"images/pydev.org/images/debugger/run_as_debug.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\">\n    <br>Another option would be running the last launch in debug mode. See: `Rerun Last Launch (regular or debug mode)`_    </br></img></p>\n    </div>\n    <div class=\"section section-2 \" id=\"src-30083058_safe-id-UHlEZXZMYXVuY2hpbmctUmVydW5MYXN0TGF1bmNoKHJlZ3VsYXJvcmRlYnVnbW9kZSk\">\n        <h2 class=\"heading \"><span>Rerun Last Launch (regular or debug mode)</span></h2>\n    <p>If you use the F9 and Ctrl+F9 keybindings or launch through the context menu, usually you&apos;ll also want to check the default eclipse preferences so that <strong class=\" \">Ctrl+F11</strong> and <strong class=\" \">F11</strong> will run your last configuration (otherwise, they&apos;ll bring a dialog to run/debug your current editor, which is mostly what&apos;s already given by PyDev through F9 and Ctrl+F9).    </p>\n    <p>To do that, open the eclipse preferences (<strong class=\" \">window &gt; preferences</strong>) and check <strong class=\" \">&quot;Always launch previously launched application&quot;</strong>, that way, when you use <strong class=\" \">F11</strong>, your last launch will be repeated in <strong class=\" \">debug mode</strong> and with <strong class=\" \">Ctrl+F11</strong>, it&apos;ll be relaunched in the <strong class=\" \">regular mode</strong>.    </p>\n    <p>    <img src=\"images/pydev.org/images/debugger/launching_dialog.png\" alt=\"images/pydev.org/images/debugger/launching_dialog.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\">\n    <br>Another option would be running the last launch from the menu. You can go to the menu with keybindings (<strong class=\" \">Alt+R, then &apos;T&apos; regular run or &apos;H&apos; for debug run</strong>) and choose some existing launch to be run.    </br></img></p>\n    <p>    <img src=\"images/pydev.org/images/debugger/run_history.png\" alt=\"images/pydev.org/images/debugger/run_history.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\">\n        </img></p>\n    </div>\n    <div class=\"section section-2 \" id=\"src-30083058_PyDevLaunching-Debugging\">\n        <h2 class=\"heading \"><span>Debugging</span></h2>\n    <p>Currently the debugger supports:    </p>\n<ul class=\" \"><li class=\" \">    <p>Step in: <strong class=\" \">F5</strong>    </p>\n</li><li class=\" \">    <p>Step over: <strong class=\" \">F6</strong>    </p>\n</li><li class=\" \">    <p>Step return: <strong class=\" \">F7</strong>    </p>\n</li><li class=\" \">    <p>Continue: <strong class=\" \">F8</strong>    </p>\n</li><li class=\" \">    <p>Breakpoints (with optional condition)    </p>\n</li><li class=\" \">    <p>Stack view showing multiple threads    </p>\n</li><li class=\" \">    <p>Locals and Globals variable display    </p>\n</li><li class=\" \">    <p>Expressions display    </p>\n</li><li class=\" \">    <p>Temporary display for selection: <strong class=\" \">Ctrl+Shift+D</strong>    </p>\n</li><li class=\" \">    <p>Hover showing the selected expression evaluation    </p>\n</li></ul>    <p>To add breakpoints, you can double click the left bar or use Ctrl+F10 &gt; Add breakpoint. In a line with an existing breakpoint Ctrl+F10 will be able to remove the breakpoint, disable it and edit its properties (which can be used to provide conditions for the breakpoint to be hit). Double-clicking an existing breakpoint will remove it.    </p>\n    <p>When you hit a breakpoint, you&apos;ll get a view that allows you to inspect the stack, see locals and globals, hover over variables (or select a text to be evaluated) and add expressions.    </p>\n    <p>    <img src=\"images/pydev.org/images/debugger/debug_perspective.png\" alt=\"images/pydev.org/images/debugger/debug_perspective.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\">\n    <br>Note that the program output is displayed in the console, and the errors in the console are hyperlinked back to the file:    </br></img></p>\n    <p>    <img src=\"images/pydev.org/images/debugger/hyperlink.png\" alt=\"images/pydev.org/images/debugger/hyperlink.png\" class=\"confluence-embedded-image confluence-external-resource confluence-content-image-border\">\n        </img></p>\n    </div>\n        </div><a id=\"editButton\" href=\"https://wiki.appcelerator.org/pages/editpage.action?pageId=30083058\"><span>Edit</span></a>\n    \n        \n    </div>\n</body>\n</html>\n","title":"PyDev Launching"});