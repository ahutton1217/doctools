[
    {
        "name": "ACLs",
        "id": "ACLs-arrowdb",
        "url": "ACLs",
        "type": "arrowdb",
        "content": "ACLs The ACL object implements access control lists for ArrowDB objects. An access control list controls read and write access to any ArrowDB objects it's attached to. For ACS, read and write permission are defined as follows: Read permission includes the ability to show, query and search ArrowDB objects. Write permission includes the ability to update and delete ArrowDB objects. An ACL object includes four attributes: public_read String; if true, all users have read access. Default is false. public_write String; if true, all users have write access. Default is false. reader_ids Comma-separated list of users with read access. writer_ids Comma-separated list of users with write access. The object's owner always has read and write permission. You assign an ACL to an object via the object's acl_id or acl_name properties. Currently, ACLs can be assigned to the following types of ArrowDB objects: Checkins, CustomObjects, Events, Files, Photos, PhotoCollections, Places, Posts, Reviews and Statuses. ACL usage scenarios Public read and write In the following example User1 creates an ACL object named \"photo_access\" that allows both public reading and writing. It then creates a new Photo object and assigns to it the \"photo_access\" ACL so that anyone can can update, delete, show, or query the photo. // Logged in as User1: Cloud.ACLs.create({ name: 'photo_access', public_read: \"true\", public_write: \"true\" }, function (e) {}); // Then create Photo that uses the \"photo_access\" ACL: Cloud.Photos.create({ photo: Titanium.Filesystem.getFile('photo.jpg'), acl_name: 'photo_access' }, function (e) { }); Restrict read access to specific users In the following example (continued), User1 updates the \"photo_access\" ACL object to limit read access to only User2 and User3 of this ACL object. Subsequently, only the application administrator, the ACL object owner (User1), User2 and User3 can read (show, search, or query) the Photo object; write permissions have not changed. // Logged in as User1: Cloud.ACLs.update({ name: 'photo_access', public_read: \"false\", reader_ids: [user2, user3] }, function (e) {}); Restrict write access to specific users In the following example (continued), User1 updates the \"photo_access\" ACL object to limit write access to only User2 and User3. After this update, the application administrator, the ACL object owner (User1), User2 and User3 can write (update/delete) the Photo object. // Logged in as User1: Cloud.ACLs.update({ name: 'photo_access', public_write: \"false\", writer_ids: [user2, user3] }, function (e) {}); "
    },
    {
        "id": "ACLs-property-created_at-arrowdb",
        "url": "ACLs-property-created_at",
        "type": "arrowdb",
        "name": "ACLs.created_at",
        "content": "ACL creation date. Date"
    },
    {
        "id": "ACLs-property-id-arrowdb",
        "url": "ACLs-property-id",
        "type": "arrowdb",
        "name": "ACLs.id",
        "content": "ID of the ACL object, automatically generated by ArrowDB. String"
    },
    {
        "id": "ACLs-property-name-arrowdb",
        "url": "ACLs-property-name",
        "type": "arrowdb",
        "name": "ACLs.name",
        "content": "Name of the ACL object. The name field is not queryable using the query API. String"
    },
    {
        "id": "ACLs-property-pretty_json-arrowdb",
        "url": "ACLs-property-pretty_json",
        "type": "arrowdb",
        "name": "ACLs.pretty_json",
        "content": "Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. Boolean"
    },
    {
        "id": "ACLs-property-public_read-arrowdb",
        "url": "ACLs-property-public_read",
        "type": "arrowdb",
        "name": "ACLs.public_read",
        "content": "Determines whether objects controlled by this ArrowDB are publicly readable. Default is false. String"
    },
    {
        "id": "ACLs-property-public_write-arrowdb",
        "url": "ACLs-property-public_write",
        "type": "arrowdb",
        "name": "ACLs.public_write",
        "content": "Determines whether objects controlled by this ArrowDB are publicly writable. Default is false. String"
    },
    {
        "id": "ACLs-property-readers-arrowdb",
        "url": "ACLs-property-readers",
        "type": "arrowdb",
        "name": "ACLs.readers",
        "content": "List of IDs identifying users who can read objects controlled by this ACL. String[]"
    },
    {
        "id": "ACLs-property-updated_at-arrowdb",
        "url": "ACLs-property-updated_at",
        "type": "arrowdb",
        "name": "ACLs.updated_at",
        "content": "ACL update date. Date"
    },
    {
        "id": "ACLs-property-user-arrowdb",
        "url": "ACLs-property-user",
        "type": "arrowdb",
        "name": "ACLs.user",
        "content": "Owner of the ACL. Users"
    },
    {
        "id": "ACLs-property-writers-arrowdb",
        "url": "ACLs-property-writers",
        "type": "arrowdb",
        "name": "ACLs.writers",
        "content": "List of IDs identifying users who can update objects controlled by this ACL. String[]"
    },
    {
        "id": "ACLs-method-add-arrowdb",
        "url": "ACLs-method-add",
        "type": "arrowdb",
        "name": "ACLs.add",
        "content": "Adds one or more user(s) to an existing ACL object, identified by its id or name. POST acls/add.json name Name of the ACL object. Either name or id must be specified. id ID of the ACL oject. Either name or id must be specified. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. reader_ids Comma separated list of IDs identifying users who can read objects controlled by this ACL. writer_ids Comma separated list of IDs identifying users who can update an object. controlled by this ACL. return void titanium This example adds a user to an ACL object and checks the response. Cloud.ACLs.addUser({ name: 'testACL', reader_ids: readers.ids.join(','), writer_ids: writers.ids.join(',') }, function (e) { if (e.success) { alert('Added!'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"name=access_photo_album\" -F \"reader_ids[]=4fcdab1f47b7b71933000008\" -F \"writer_ids[]=4fcdab1f47b7b71933000009\" https://api.cloud.appcelerator.com/v1/acls/add.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"addAcl\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"name\": @\"testACL\", @\"reader_ids\": @\"4fcdab1f47b7b71933000008\", @\"writer_ids\": @\"4fcdab1f47b7b71933000009\" }; [APSACLs add:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"name\", \"access_photo_album\"); data.put(\"reader_ids\", \"4fcdab1f47b7b71933000008\"); data.put(\"writer_ids\", \"4fcdab1f47b7b71933000009\"); try { APSACLs.addUser(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Added user to ACL!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSACLs\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSACLs\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSACLs\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.aclsAddUser({ name: 'testACL', reader_ids: readers.ids.join(','), writer_ids: writers.ids.join(',') }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Added!'); } }); "
    },
    {
        "id": "ACLs-method-check-arrowdb",
        "url": "ACLs-method-check",
        "type": "arrowdb",
        "name": "ACLs.check",
        "content": "Checks the permissions a specified user is granted by a specified ACL. In the response, \"read_permission\": \"yes\" means the user has read permission; if this property is omitted or the value is not \"yes\", the user does not have read permission. Similarly, \"write_permission\": \"yes\" means the user has write permission. If the property is omitted or the value is not \"yes\", the user does not have write permission. GET acls/check.json name Name of the ACL object. Either name or id must be specified. id ID of the ACL oject. Either name or id must be specified. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. user_id User ID of the user to check. return void titanium This example checks a user's permissions in an ACL and checks the response. Cloud.ACLs.checkUser({ name: 'testACL', user_id: userID }, function (e) { if (e.success) { alert('Read Permission: ' + e.permission['read permission'] + '\\nWrite Permission: ' + e.permission['write permission']); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/acls/check.json?key=&pretty_json=true&name=access_photo_album&user_id=4fcdd3c547b7b71c0b000004\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"checkAcl\" }, \"response\": { \"permission\": { \"read_permission\": true, \"write_permission\": false } } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"name\": @\"testACL\", @\"user_id\": @\"4fcdd3c547b7b71c0b000004\" }; [APSACLs checkUser:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"name\", \"access_photo_album\"); data.put(\"user_id\", \"4fcdd3c547b7b71c0b000004\"); try { APSACLs.checkUser(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONObject res = e.getResponse().getJSONObject(\"permission\"); Log.i(\"APSACLs\", \"User permission: \" + res.toString()); } catch (JSONException err) { Log.e(\"APSACLs\", \"Exception thrown: \" + err.toString()); } } else { Log.e(\"APSACLs\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSACLs\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSACLs\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.aclsCheckUser({ name: 'testACL', user_id: userID }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Read Permission: ' + JSON.stringify(result.body.response.permission.read_permission) + '\\nWrite Permission:' + JSON.stringify(result.body.response.permission.write_permission) ); } }); "
    },
    {
        "id": "ACLs-method-count-arrowdb",
        "url": "ACLs-method-count",
        "type": "arrowdb",
        "name": "ACLs.count",
        "content": "Retrieves the total number of ACL objects. GET acls/count.json return void titanium Example request to retrieve the total number of ACL objects. Cloud.sendRequest({ url : \"acls/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/acls/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"aclsCount\", \"count\": 1 } } ios Example request to retrieve the total number of ACL objects. [[APSCloud sharedInstance] sendRequest:@\"acls/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of ACL objects. APSCloud.getInstance().sendRequest(\"acls/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.aclsCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "ACLs-method-create-arrowdb",
        "url": "ACLs-method-create",
        "type": "arrowdb",
        "name": "ACLs.create",
        "content": "Creates an ACL object, which can be used to control access to ArrowDB objects. POST acls/create.json name Name of the ACL object. reader_ids Comma separated list of IDs identifying users who can read objects controlled by this ACL. writer_ids Comma separated list of IDs identifying users who can update an object. controlled by this ACL. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. public_read Determines whether objects controlled by this ArrowDB are publically readable. Default is false. public_write Determines whether objects controlled by this ArrowDB are publically writable. Default is false. su_id Specifies the owner of the new URL. Only allowed if the current login user is an application admin. Otherwise, the new ACL is always owned by the current login user. return void titanium This example creates an ACL object and checks the response. Cloud.ACLs.create({ name: 'testACL', reader_ids: readers.ids.join(','), writer_ids: writers.ids.join(','), public_read: \"false\", public_write: \"false\" }, function (e) { if (e.success) { alert('Created!'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b c.txt -c c.txt -F \"name=access_photo_album\" -F \"reader_ids[]=4fcdab1f47b7b71933000003\" -F \"reader_ids[]=4fcdab1f47b7b71933000004\" -F \"reader_ids[]=4fcdab2047b7b71933000005\" -F \"writer_ids[]=4fcdab1f47b7b71933000003\" https://api.cloud.appcelerator.com/v1/acls/create.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"createAcl\" }, \"response\": { \"acls\": [ { \"id\": \"4fcdab2047b7b7193300000c\", \"name\": \"access my album\", \"created_at\": \"2012-06-05T06:45:52+0000\", \"updated_at\": \"2012-06-05T06:45:52+0000\", \"public_read\": false, \"user\": { \"id\": \"4fcdab2047b7b71933000007\", \"first_name\": \"Abe\", \"last_name\": \"Bob\", \"created_at\": \"2012-06-01T06:43:01+0000\", \"updated_at\": \"2012-06-01T06:43:01+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2012-06-01T06:43:01+0000\", \"email\": \"a@mike.com\", \"admin\": \"false\" }, \"readers\": [ \"4fcdab1f47b7b71933000003\", \"4fcdab1f47b7b71933000004\", \"4fcdab2047b7b71933000005\", \"4fcdab2047b7b71933000007\" ], \"public_write\": false, \"writers\": [ \"4fcdab1f47b7b71933000003\", \"4fcdab2047b7b71933000007\" ] } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"name\": @\"testACL\", @\"reader_ids\": @\"4fcdab1f47b7b71933000003\", @\"reader_ids\": @\"4fcdab1f47b7b71933000003\" }; [APSACLs create:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"name\", \"access_photo_album\"); data.put(\"reader_ids\", \"4fcdab1f47b7b71933000003,4fcdab1f47b7b71933000004,4fcdab1f47b7b71933000005\"); data.put(\"writer_ids\", \"4fcdab1f47b7b71933000003\"); try { APSACLs.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Created ACL!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSACLs\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSACLs\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSACLs\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.aclsCreate({ name: 'testACL', reader_ids: readers.ids.join(','), writer_ids: writers.ids.join(','), public_read: \"false\", public_write: \"false\" }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.acls[0]); } }); "
    },
    {
        "id": "ACLs-method-delete-arrowdb",
        "url": "ACLs-method-delete",
        "type": "arrowdb",
        "name": "ACLs.delete",
        "content": "Deletes an ACL object with the given id or name. An application admin can delete any ACL object. DELETE acls/delete.json id ID of the ACL oject to delete. Either name or id must be specified. name Name of the ACL object to delete. Either name or id must be specified. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. su_id User to delete the ACL object on behalf of. The user must be the creator of the object. The current user must be an application admin to remove an ACL on behalf of another user. return void titanium This example deletes an ACL object and checks the response. Cloud.ACLs.remove({ name: 'testACL' }, function (e) { if (e.success) { alert('Removed!'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE -F \"name=access_photo_album\" \"https://api.cloud.appcelerator.com/v1/acls/delete.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"deleteAcl\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"acl_id\": @\"ACL_ID\" }; [APSACLs remove:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"name\", \"access_photo_album\"); try { APSACLs.remove(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Removed!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSACLs\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSACLs\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSACLs\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.aclsDelete({ name: 'testACL' }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Deleted!'); } }); "
    },
    {
        "id": "ACLs-method-query-arrowdb",
        "url": "ACLs-method-query",
        "type": "arrowdb",
        "name": "ACLs.query",
        "content": "Performs a custom query of ACLs. Regular application users can only query ACLs that they have created. Application admins can query ACLs for an arbitrary user by specifying the user_id method parameter. (In applications created with ArrowDB 1.1.7 and earlier, any user can query another user's ACLs, regardless of whether they are an admin or not.) The name field is not queryable. Applications created with ArrowDB 1.1.5 and later can paginate query results using skip and limit parameters. For details, see Query Pagination. Currently you can not query or sort data stored inside an array or hash in custom fields. For general information on queries, see Search and Query guide. GET acls/query.json count Used for paginating queries. If set to true, the response's meta object contains a count field that indicates the number of objects that matched the query constraints. page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. user_id ID of the user whose ACLs should be returned. You must be an application admin to use this parameter. return void titanium Use the Modules.Cloud.sendRequest() method to invoke this REST API directly. rest Example cURL request. $ curl -c cookies.txt -b cookies.txt -X GET \"https://api.cloud.appcelerator.com/v1/acls/query.json?key=&pretty_json=true&count=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"queryACL\", \"count\": 3 }, \"response\": { \"acls\": [ { \"id\": \"5418475c20110835ae0008ec\", \"name\": \"all2\", \"created_at\": \"2014-09-16T14:21:16+0000\", \"updated_at\": \"2014-09-16T14:21:16+0000\", \"user\": { \"id\": \"54174bab20110835b6000013\", \"created_at\": \"2014-09-15T20:27:23+0000\", \"updated_at\": \"2014-09-15T20:27:24+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2014-09-15T20:27:23+0000\", \"username\": \"admin2\", \"admin\": \"false\", \"stats\": { \"photos\": { \"total_count\": 0 }, \"storage\": { \"used\": 0 } }, \"friend_counts\": { \"requests\": 0, \"friends\": 0 } }, \"public_read\": false, \"readers\": [ \"54174bab20110835b6000013\" ], \"public_write\": false, \"writers\": [ \"54174bab20110835b6000013\" ] }, { \"id\": \"5418475920110835ae0008eb\", \"name\": \"all\", \"created_at\": \"2014-09-16T14:21:13+0000\", \"updated_at\": \"2014-09-16T14:21:13+0000\", \"user\": { \"id\": \"54174bab20110835b6000013\", \"created_at\": \"2014-09-15T20:27:23+0000\", \"updated_at\": \"2014-09-15T20:27:24+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2014-09-15T20:27:23+0000\", \"username\": \"admin2\", \"admin\": \"false\", \"stats\": { \"photos\": { \"total_count\": 0 }, \"storage\": { \"used\": 0 } }, \"friend_counts\": { \"requests\": 0, \"friends\": 0 } }, \"public_read\": false, \"readers\": [ \"54174bab20110835b6000013\" ], \"public_write\": false, \"writers\": [ \"54174bab20110835b6000013\" ] }, { \"id\": \"54133da5ee2fa4caa30003dc\", \"name\": \"erbody2\", \"created_at\": \"2014-09-12T18:38:30+0000\", \"updated_at\": \"2014-09-12T18:38:30+0000\", \"user\": { \"id\": \"54132aa4ee2fa4caa30001ba\", \"created_at\": \"2014-09-12T17:17:24+0000\", \"updated_at\": \"2014-09-12T17:17:24+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2014-09-12T17:17:24+0000\", \"username\": \"tims\", \"admin\": \"false\", \"stats\": { \"photos\": { \"total_count\": 0 }, \"storage\": { \"used\": 0 } }, \"friend_counts\": { \"requests\": 0, \"friends\": 0 } }, \"public_read\": true, \"public_write\": true } ] } } ios Use the [APSCloud sendRequest] method to invoke this REST API directly. android Use the APSCloud.sendRequest() method to invoke this REST API directly. nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.aclsQuery({}, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.acls.forEach(function(acl) { console.log(acl.name); }); } }); "
    },
    {
        "id": "ACLs-method-remove-arrowdb",
        "url": "ACLs-method-remove",
        "type": "arrowdb",
        "name": "ACLs.remove",
        "content": "Removes one or more user(s) from an ACL object with the given id or name. You can remove users from the readers list, which grants read permission, the writers list, which grants update/delete permission, or both. DELETE acls/remove.json name Name of the ACL object. Either name or id must be specified. id ID of the ACL oject. Either name or id must be specified. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. reader_ids Comma separated list of IDs to remove from the readers list. writer_ids Comma separated list of IDs to remove from the writers list. return void titanium This example removes a user from an ACL object and checks the response. Cloud.ACLs.removeUser({ name: 'testACL', reader_ids: readers.ids.join(','), writer_ids: writers.ids.join(',') }, function (e) { if (e.success) { alert('Removed!'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE -F \"name=access_photo_album\" -F \"reader_ids[]=4fcdab1f47b7b71933000008\" -F \"writer_ids[]=4fcdab1f47b7b71933000009\" https://api.cloud.appcelerator.com/v1/acls/remove.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"removeAcl\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"name\": @\"testACL\", @\"reader_ids\": @\"4fcdab1f47b7b71933000003\", @\"reader_ids\": @\"4fcdab1f47b7b71933000003\" }; [APSACLs removeUser:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; Map data = new HashMap(); data.put(\"name\", \"access_photo_album\"); data.put(\"reader_ids\", \"4fcdab1f47b7b71933000008\"); try { APSACLs.removeUser(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"User removed from ACL!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSACLs\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSACLs\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSACLs\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.aclsRemoveUser({ name: 'testACL', reader_ids: readers.ids.join(','), writer_ids: writers.ids.join(',') }, function(err, result) { if (err) { console.error(err.message); } else { console.log('removed!'); } }); "
    },
    {
        "id": "ACLs-method-show-arrowdb",
        "url": "ACLs-method-show",
        "type": "arrowdb",
        "name": "ACLs.show",
        "content": "Shows the ACL object with the given id or name. GET acls/show.json id ID of the ACL oject. Either name or id must be specified. name Name of the ACL object. Either name or id must be specified. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests an ACL object and checks the response. Cloud.ACLs.show({ name: 'testACL' }, function (e) { if (e.success) { alert('Shown!'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/acls/show.json?key=&pretty_json=true&name=access_photo_album\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"showAcl\" }, \"response\": { \"acls\": [ { \"id\": \"4fcdd3c647b7b71c0b00000c\", \"name\": \"access_photo_album\", \"user_id\": \"4fcdd3c647b7b71c0b000007\", \"created_at\": \"2012-06-05T09:39:18+0000\", \"updated_at\": \"2012-06-05T09:39:20+0000\", \"public_read\": false, \"readers\": [ \"4fcdd3c547b7b71c0b000003\", \"4fcdd3c547b7b71c0b000004\", \"4fcdd3c547b7b71c0b000005\", \"4fcdd3c547b7b71c0b000006\" ], \"public_write\": false, \"writers\": [ \"4fcdd3c547b7b71c0b000003\", \"4fcdd3c547b7b71c0b000004\", \"4fcdd3c547b7b71c0b000005\" ] } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"name\": @\"testACL\" }; [APSACLs show:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"name\", \"access_photo_album\"); try { APSACLs.show(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { Toast.makeText(currentActivity, e.getResponseString(), Toast.LENGTH_SHORT); } catch (APSCloudException err) { Log.e(\"APSACLs\", \"Exception thrown: \" + err.toString()); } } else { Log.e(\"APSACLs\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSACLs\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSACLs\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.aclsShow({ name: 'testACL' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.acls); } }); "
    },
    {
        "id": "ACLs-method-update-arrowdb",
        "url": "ACLs-method-update",
        "type": "arrowdb",
        "name": "ACLs.update",
        "content": "Updates an ACL object to change its access control list. When updating an ACL, you can change the members of the readers list and the writers list, or change the value of the public_read and public_write flags. An application admin can update any ACL object. PUT acls/update.json id ID of the ACL oject. Either name or id must be specified. name Name of the ACL object. Either name or id must be specified. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. reader_ids Comma separated list of IDs identifying users who can read objects controlled by this ACL. To remove all users from the readers list, simply set reader_ids=\"\". This removes all users except for the owner from the list. writer_ids Comma separated list of IDs identifying users who can update an object. controlled by this ACL. To remove all users from the writers list, simply set writer_ids=\"\". This removes all users except for the owner from the list. public_read Determines whether objects controlled by this ArrowDB are publically readable. Default is false. public_write Determines whether objects controlled by this ArrowDB are publically writable. Default is false. su_id User to update the ACL object on behalf of. The user must be the creator of the object. The current user must be an application admin to update an ACL object on behalf of another user. return void titanium This example updates an ACL object and checks the response. Cloud.ACLs.update({ name: 'testACL', reader_ids: '', writer_ids: '', public_read: \"true\", public_write: \"true\" }, function (e) { if (e.success) { alert('Updated!'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b c.txt -c c.txt -X PUT -F \"name=access_photo_album\" -F \"public_read=true\" -F \"public_write=true\" https://api.cloud.appcelerator.com/v1/acls/update.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"updateAcl\" }, \"response\": { \"acls\": [ { \"id\": \"4fcdd3c647b7b71c0b00000c\", \"name\": \"access_photo_album\", \"user_id\": \"4fcdd3c647b7b71c0b000007\", \"created_at\": \"2012-06-05T09:39:18+0000\", \"updated_at\": \"2012-06-05T09:39:20+0000\", \"public_read\": true, \"public_write\": true } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"name\": @\"testACL\", @\"reader_ids\": @\"\", @\"writer_ids\": @\"\", @\"public_read\": @\"true\", @\"public_write\": @\"true\" }; [APSACLs update:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"name\", \"access_photo_album\"); data.put(\"public_read\", \"true\"); data.put(\"public_write\", \"true\"); try { APSACLs.update(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Updated!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSACLs\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSACLs\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSACLs\", \"Exception thrown: \" + e.toString()); }` nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.aclsUpdate({ name: 'testACL', reader_ids: '', writer_ids: '', public_read: 'true', public_write: 'true' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.acls[0]); } }); "
    },
    {
        "name": "Chats",
        "id": "Chats-arrowdb",
        "url": "Chats",
        "type": "arrowdb",
        "content": "Chats The Chats API provides methods for sending chat messages from one user to another user, or to a group of users called a chat group. Chat groups are formed implicitly when users send chat messages. For example, if user A sends a message to users B and C, a chat group is formed with users A, B, and C. If user C subsequently sends a message to user B, a second chat group is formed with users B and C as members. If you have configured push notifications for your application, you can optionally specify to a send push notifications to message recipients' devices as well. "
    },
    {
        "id": "Chats-property-chatgroup-arrowdb",
        "url": "Chats-property-chatgroup",
        "type": "arrowdb",
        "name": "Chats.chatgroup",
        "content": "The chat group that the chat belongs to. Hash"
    },
    {
        "id": "Chats-property-created_at-arrowdb",
        "url": "Chats-property-created_at",
        "type": "arrowdb",
        "name": "Chats.created_at",
        "content": "Creation date for this user object. Date"
    },
    {
        "id": "Chats-property-custom_fields-arrowdb",
        "url": "Chats-property-custom_fields",
        "type": "arrowdb",
        "name": "Chats.custom_fields",
        "content": "User defined fields. See Custom Data Fields. String/Hash"
    },
    {
        "id": "Chats-property-id-arrowdb",
        "url": "Chats-property-id",
        "type": "arrowdb",
        "name": "Chats.id",
        "content": "Generated unique ID for this chat message. String"
    },
    {
        "id": "Chats-property-message-arrowdb",
        "url": "Chats-property-message",
        "type": "arrowdb",
        "name": "Chats.message",
        "content": "Chat message. String"
    },
    {
        "id": "Chats-property-photo-arrowdb",
        "url": "Chats-property-photo",
        "type": "arrowdb",
        "name": "Chats.photo",
        "content": "New photo to attach to the chat message. Photos"
    },
    {
        "id": "Chats-property-updated_at-arrowdb",
        "url": "Chats-property-updated_at",
        "type": "arrowdb",
        "name": "Chats.updated_at",
        "content": "Last update time for this user object. Date"
    },
    {
        "id": "Chats-method-count-arrowdb",
        "url": "Chats-method-count",
        "type": "arrowdb",
        "name": "Chats.count",
        "content": "Retrieves the total number of Chat objects. GET chats/count.json return void titanium Example request to retrieve the total number of Chat objects. Cloud.sendRequest({ url : \"chats/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/chats/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"chatsCount\", \"count\": 1 } } ios Example request to retrieve the total number of Chat objects. [[APSCloud sharedInstance] sendRequest:@\"chats/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of Chat objects. APSCloud.getInstance().sendRequest(\"chats/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.chatsCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "Chats-method-create-arrowdb",
        "url": "Chats-method-create",
        "type": "arrowdb",
        "name": "Chats.create",
        "content": "Sends a chat message to another user or a group of users. Sending a message creates a new chat group if there is no existing chat group containing the current user and the designated recipients. To generate a push notification, include the channel and payload parameters. POST chats/create.json to_ids Comma-separated list of user ID(s) to receive the message. The current user ID and to_ids together determine which chat group a message belongs to. The chat group is created if necessary. You must specify either a to_ids list or the chat_group_id for an existing chat group. chat_group_id Identifies an existing chat group by ID. If you already know the id of a chat group, you can use it to specify which chat group this message should go to. You must specify either a to_ids list or the chat_group_id for an existing chat group. message Message to send. photo New photo to attach to the chat message. When you use the photo parameter to attach a new photo, you can use the custom resize and sync options. photo_id ID of an existing photo to attach to the chat message. custom_fields User defined fields. See Custom Data Fields. channel Channel for a push notification. To send a push notification to the recipients after a new chat message is created, you can pass in the channel and payload parameters. For more information, see PushNotifications.notify. payload Message payload for push notification. The message defined in payload will be delivered to all the recipients as long as they have subscribed to the specified channel. For example, if all of your app's users are subscribed to channel \"Chat\", then you can pass channel -- \"Chat\", and payload: { \"from\": \"sender user_id\", \"message\": \"Hello everyone!\", \"sound\": \"default\", \"alert\" : \"From Joe: Hello everyone!\" } su_id Send on behalf of the identified user. Current user must be an application admin to send a message on behalf of another user. response_json_depth To receive a list of participant IDs, set response_json_depth to 2. If you have already cached all the user objects participating in the chat group and wish to receive a smaller JSON response, you can set response_json_depth to 1 to remove participant user's info from chat group in the JSON response. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example sends a chat message to a list of users and checks the response. Cloud.Chats.create({ to_ids: ids.join(','), message: 'Good morning' }, function (e) { if (e.success) { for (var i = 0; i rest Example cURL request with response_json_depth set to 2: $ curl -b cookies.txt -c cookies.txt -F \"message=What's up?\" -F \"photo=@photo.jpg\" -F \"to_ids=54ac083d03545008a500037b,54ac085f035450089a0003ac\" \"http://api.cloud.appcelerator.com/v1/chats/create.json?key=&response_json_depth=2&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"createChatMessage\" }, \"response\": { \"chats\": [ { \"id\": \"54ac1ba354f9d309ff000032\", \"created_at\": \"2015-01-06T17:30:12+0000\", \"updated_at\": \"2015-01-06T17:30:12+0000\", \"message\": \"Hi again\", \"from\": { \"id\": \"54ac18aa035450089a0003c3\", \"created_at\": \"2015-01-06T17:17:30+0000\", \"updated_at\": \"2015-01-06T17:17:30+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2015-01-06T17:17:30+0000\", \"username\": \"user124\", \"admin\": \"false\", \"stats\": { \"photos\": { \"total_count\": 0 }, \"storage\": { \"used\": 0 } }, \"friend_counts\": { \"requests\": 0, \"friends\": 0 } }, \"photo\": { \"id\": \"54ac1ba354f9d309ff000033\", \"filename\": \"photo.jpg\", \"size\": 302481, \"md5\": \"897273d704b02dec5d069749e2f23d12\", \"created_at\": \"2015-01-06T17:30:12+0000\", \"updated_at\": \"2015-01-06T17:30:12+0000\", \"processed\": false, \"content_type\": \"image/jpeg\", \"user_id\": \"54ac18aa035450089a0003c3\" }, \"chat_group\": { \"id\": \"54ac19ae03545008a50003aa\", \"created_at\": \"2015-01-06T17:21:50+0000\", \"updated_at\": \"2015-01-06T17:30:12+0000\", \"message\": \"Hi again\", \"participate_ids\": [ \"54ac083d03545008a500037b\", \"54ac085f035450089a0003ac\", \"54ac18aa035450089a0003c3\" ] } } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"to_ids\": @[@\"4edef6f7d9ca7247b8000004\", @\"4edf0c20d9ca724a82000003\"], @\"message\": @\"Good morning\" }; [APSChats create:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"to_ids\", \"4edef6f7d9ca7247b8000004,4edf0c20d9ca724a82000003\"); data.put(\"message\", \"Hello!\"); try { APSChats.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Chat sent!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSChats\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSChats\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSChats\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.chatsCreate({ to_ids: ids.join(','), message: 'Good morning' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.chats[0]); } }); "
    },
    {
        "id": "Chats-method-delete-arrowdb",
        "url": "Chats-method-delete",
        "type": "arrowdb",
        "name": "Chats.delete",
        "content": "Deletes a chat message. DELETE chats/delete.json chat_id ID of the chat message to delete. su_id User to delete the Chat object on behalf of. The user must be the sender of the chat message. Current user must be an application admin to send a message on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Requires Release 3.2.0. Cloud.Chats.remove({ chat_id: savedChatId }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE \"http://api.cloud.appcelerator.com/v1/chats/delete.json?key=&chat_id=4d8bc645d0afbe0363000013\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"deleteChat\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"chat_id\": savedChatId }; [APSChats remove:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"chat_id\", \"4d713b4f6f70951043000001\"); try { APSChats.remove(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Chat removed!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSChats\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSChats\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSChats\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.chatsDelete({ chat_id: savedChatId }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Deleted!'); } }); "
    },
    {
        "id": "Chats-method-get_chat_groups-arrowdb",
        "url": "Chats-method-get_chat_groups",
        "type": "arrowdb",
        "name": "Chats.get_chat_groups",
        "content": "Lists chat groups. If user A sends chat message to user B and C, users A, B and C automatically form a chat group. Use this API to get a list of chat groups the current user belongs to. GET chats/get_chat_groups.json page Request page number, default is 1. per_page Number of results per page, default is 10. where Constraint values for fields. where should be encoded JSON. If where is not specified, query returns all objects. See the Search and Query guide for more information. order Sort results by one or more fields. See the Search and Query guide for more information. response_json_depth Nested object depth level counts in JSON response. To reduce server API calls the JSON response may include, in addition to the objects returned by the query, other important data related to the returned objects, such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests a lists of chat groups that the current user belongs to and checks the response. Cloud.Chats.getChatGroups(function (e) { if (e.success) { for (var i = 0; i rest Example cURL request: Get a list of chat groups the current user belongs to, sorted by groups with most recent activity first. $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/chats/get_chat_groups.json?order=-updated_at&key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"getChatGroups\", \"page\": 1, \"per_page\": 10, \"total_pages\": 1, \"total_results\": 3 }, \"response\": { \"chat_groups\": [ { \"id\": \"4ee04f4dd9ca72680d000009\", \"created_at\": \"2011-12-08T05:46:53+0000\", \"updated_at\": \"2011-12-08T05:46:53+0000\", \"participate_users\": [ { \"id\": \"4ee04f4cd9ca72680d000002\", \"first_name\": \"Bob\", \"last_name\": \"Dude\", \"created_at\": \"2011-12-08T05:46:52+0000\", \"updated_at\": \"2011-12-08T05:46:52+0000\", \"external_accounts\": [ ], \"username\": \"bob\", \"email\": \"bob@dude.com\" }, { \"id\": \"4ee04f4cd9ca72680d000003\", \"first_name\": \"Alice\", \"last_name\": \"Gal\", \"created_at\": \"2011-12-08T05:46:52+0000\", \"updated_at\": \"2011-12-08T05:46:52+0000\", \"external_accounts\": [ ], \"username\": \"alice\", \"email\": \"alice@gal.com\" } ] }, { \"id\": \"4ee04f4dd9ca72680d000017\", \"created_at\": \"2011-12-08T05:46:53+0000\", \"updated_at\": \"2011-12-08T05:46:53+0000\", \"participate_users\": [ { \"id\": \"4ee04f4cd9ca72680d000002\", \"first_name\": \"Bob\", \"last_name\": \"Dude\", \"created_at\": \"2011-12-08T05:46:52+0000\", \"updated_at\": \"2011-12-08T05:46:52+0000\", \"external_accounts\": [ ], \"username\": \"bob\", \"email\": \"bob@dude.com\" }, { \"id\": \"4ee04f4cd9ca72680d000003\", \"first_name\": \"Alice\", \"last_name\": \"Gal\", \"created_at\": \"2011-12-08T05:46:52+0000\", \"updated_at\": \"2011-12-08T05:46:52+0000\", \"external_accounts\": [ ], \"username\": \"alice\", \"email\": \"alice@gal.com\" }, { \"id\": \"4ee04f4cd9ca72680d000004\", \"first_name\": \"Joe\", \"last_name\": \"Guy\", \"created_at\": \"2011-12-08T05:46:52+0000\", \"updated_at\": \"2011-12-08T05:46:52+0000\", \"external_accounts\": [ ], \"username\": \"joe\", \"email\": \"joe@guy.com\" } ] }, { \"id\": \"4ee04f4dd9ca72680d000012\", \"created_at\": \"2011-12-08T05:46:53+0000\", \"updated_at\": \"2011-12-08T05:46:53+0000\", \"participate_users\": [ { \"id\": \"4ee04f4cd9ca72680d000002\", \"first_name\": \"Bob\", \"last_name\": \"Dude\", \"created_at\": \"2011-12-08T05:46:52+0000\", \"updated_at\": \"2011-12-08T05:46:52+0000\", \"external_accounts\": [ ], \"username\": \"bob\", \"email\": \"bob@dude.com\" }, { \"id\": \"4ee04f4cd9ca72680d000004\", \"first_name\": \"Joe\", \"last_name\": \"Guy\", \"created_at\": \"2011-12-08T05:46:52+0000\", \"updated_at\": \"2011-12-08T05:46:52+0000\", \"external_accounts\": [ ], \"username\": \"joe\", \"email\": \"joe@guy.com\" } ] } ] } } ios Example iOS APS SDK call: [APSChats getChatGroups:nil withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu groups\", (unsigned long)((NSArray *) e.response[@\"chat_groups\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); try { APSChats.getChatGroups(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONObject chat_groups = e.getResponse().getJSONArray(\"chat_groups\"); // Do something with the chat_groups array } catch (JSONException err) { Log.e(\"APSChats\", \"Exception thrown: \" + err.toString()) } } else { Log.e(\"APSChats\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSChats\", \"Exception thrown: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSChats\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.chatsGetChatGroups(function(err, result) { if (err) { console.error(err.message); } else { result.body.response.chat_groups.forEach(function(chat) { console.log(chat); }); } }); "
    },
    {
        "id": "Chats-method-query-arrowdb",
        "url": "Chats-method-query",
        "type": "arrowdb",
        "name": "Chats.query",
        "content": "Performs a custom query of chat messages with sorting and pagination. Currently you can not query or sort data stored inside array or hash in custom fields. In ArrowDB 1.1.5 and later, you can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. For details about using the query parameters, see the Search and Query guide. GET chats/query.json participate_ids Comma-separated list of user ID(s) of the users belonging to a chat group. You can use this field to narrow down a query to a certain chat group. The current user can only query chat messages in chat groups he or she is participating in. For example, suppose that users A, B and C form one chat group, and users B and C form a second chat group without A. User A does not have permission to query chats in the chat group that consists of only users B and C. You must specify either a participate_ids list or the chat_group_id of an existing chat group to query. chat_group_id A chat group's id. Instead of using a participate_ids list, if you already know the id of a chat group, you can use it to narrow down a query. You must specify either a participate_ids list or the chat_group_id of an existing chat group to query. page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. where Constraint values for fields. where should be encoded JSON. You can query any of the standard values for a Chat object, as well as any custom fields that contain simple values, such as String, Number or Boolean values. If where is not specified, query returns all objects. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. return void titanium This example requests a list of chat messages and checks the response. Cloud.Chats.query({ participate_ids: ids.join(','), where: { updated_at: { '$gt': last_update_time } } }, function (e) { if (e.success) { for (var i = 0; i rest Example cURL request. Assuming each chat message has an assigned geo location, the following finds all chat messages among users Bob (id: 4ee05d69d9ca726b85000002), Alice (id: 4ee05d69d9ca726b85000003), and userJoe (id: 4ee05d69d9ca726b85000004) sent after 2011-11-17T22:53:48+0000, and within 5 miles of latitude 37.12 and longitude -122.23. Note that you need to convert miles to radians (5/3959 = 0.00126). $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode 'participate_ids=4ee05d69d9ca726b85000002,4ee05d69d9ca726b85000003,4ee05d69d9ca726b85000004' --data-urlencode 'where={\"created_at\":{\"$gte\":\"2011-11-17T22:53:48+0000\"}, \"coordinates\":{\"$nearSphere\":[-122.23,37.12], \"$maxDistance\" : 0.00126}}' --data-urlencode 'order=created_at' \"https://api.cloud.appcelerator.com/v1/chats/query.json?key=&count=true&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"queryChatMessages\", \"count\": 100 }, \"response\": { \"chats\": [ { \"id\": \"4ee05d6ad9ca726b85000018\", \"created_at\": \"2011-12-08T06:47:06+0000\", \"updated_at\": \"2011-12-08T06:47:06+0000\", \"message\": \"What's up?\", \"custom_fields\": { \"coordinates\": [-122.23, 37.12] } }, \"from\": { \"id\": \"4ee05d69d9ca726b85000002\", \"first_name\": \"Bob\", \"last_name\": \"Dude\", \"created_at\": \"2011-12-08T06:47:05+0000\", \"updated_at\": \"2011-12-08T06:47:06+0000\", \"external_accounts\": [ ], \"username\": \"bob\", \"email\": \"bob@dude.com\" }, \"chat_group\": { \"id\": \"4ee05d6ad9ca726b85000017\", \"created_at\": \"2011-12-08T06:47:06+0000\", \"updated_at\": \"2011-12-08T06:47:06+0000\", \"participate_users\": [ { \"id\": \"4ee05d69d9ca726b85000002\", \"first_name\": \"Bob\", \"last_name\": \"Dude\", \"created_at\": \"2011-12-08T06:47:05+0000\", \"updated_at\": \"2011-12-08T06:47:06+0000\", \"external_accounts\": [ ], \"username\": \"bob\", \"email\": \"bob@dude.com\" }, { \"id\": \"4ee05d69d9ca726b85000003\", \"first_name\": \"Alice\", \"last_name\": \"Gal\", \"created_at\": \"2011-12-08T06:47:05+0000\", \"updated_at\": \"2011-12-08T06:47:05+0000\", \"external_accounts\": [ ], \"username\": \"alice\", \"email\": \"alice@gal.com\" }, { \"id\": \"4ee05d69d9ca726b85000004\", \"first_name\": \"Joe\", \"last_name\": \"Guy\", \"created_at\": \"2011-12-08T06:47:05+0000\", \"updated_at\": \"2011-12-08T06:47:05+0000\", \"external_accounts\": [ ], \"username\": \"joe\", \"email\": \"joe@guy.com\" } ] } } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"participate_ids\": @[@\"4edef6f7d9ca7247b8000004\", @\"4edf0c20d9ca724a82000003\"], @\"where\": @{ @\"updated_at\": @{ @\"$gt\": @\"2013-12-26T19:00:00+0000\" } } }; [APSChats query:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu groups\", (unsigned long)((NSArray *) e.response[@\"chats\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success!\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap; data.put(\"participate_ids\", \"4ee05d69d9ca726b85000002,4ee05d69d9ca726b85000003,4ee05d69d9ca726b85000004\"); data.put(\"order\", \"created_at\"); try { APSChats.query(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray chats = e.getResponse().getJSONArray(\"chats\"); if (chats.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.chatsQuery({ participate_ids: ids.join(','), where: { updated_at: { '$gt': last_update_time } } }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.chats.forEach(function(chat) { console.log(chat); }); } }); "
    },
    {
        "name": "Checkins",
        "id": "Checkins-arrowdb",
        "url": "Checkins",
        "type": "arrowdb",
        "content": "Checkins The Checkins API provides methods to create and manage checkins to a Place or an Event. "
    },
    {
        "id": "Checkins-property-created_at-arrowdb",
        "url": "Checkins-property-created_at",
        "type": "arrowdb",
        "name": "Checkins.created_at",
        "content": "Message creation date. Date"
    },
    {
        "id": "Checkins-property-custom_fields-arrowdb",
        "url": "Checkins-property-custom_fields",
        "type": "arrowdb",
        "name": "Checkins.custom_fields",
        "content": "User defined fields. See Custom Data Fields. String/Hash"
    },
    {
        "id": "Checkins-property-event-arrowdb",
        "url": "Checkins-property-event",
        "type": "arrowdb",
        "name": "Checkins.event",
        "content": "The event object associated with the checkin. Events"
    },
    {
        "id": "Checkins-property-id-arrowdb",
        "url": "Checkins-property-id",
        "type": "arrowdb",
        "name": "Checkins.id",
        "content": "Generated unique ID for this checkin. String"
    },
    {
        "id": "Checkins-property-message-arrowdb",
        "url": "Checkins-property-message",
        "type": "arrowdb",
        "name": "Checkins.message",
        "content": "Checkin message. String"
    },
    {
        "id": "Checkins-property-photo-arrowdb",
        "url": "Checkins-property-photo",
        "type": "arrowdb",
        "name": "Checkins.photo",
        "content": "The primary photo for the checkin. Photos"
    },
    {
        "id": "Checkins-property-place-arrowdb",
        "url": "Checkins-property-place",
        "type": "arrowdb",
        "name": "Checkins.place",
        "content": "The place object associated with the checkin. Places"
    },
    {
        "id": "Checkins-property-tags-arrowdb",
        "url": "Checkins-property-tags",
        "type": "arrowdb",
        "name": "Checkins.tags",
        "content": "Comma-separated list of tags associated with this checkin. String"
    },
    {
        "id": "Checkins-property-updated_at-arrowdb",
        "url": "Checkins-property-updated_at",
        "type": "arrowdb",
        "name": "Checkins.updated_at",
        "content": "Message update date. Date"
    },
    {
        "id": "Checkins-property-user-arrowdb",
        "url": "Checkins-property-user",
        "type": "arrowdb",
        "name": "Checkins.user",
        "content": "Checkin owner. Users"
    },
    {
        "id": "Checkins-method-batch_delete-arrowdb",
        "url": "Checkins-method-batch_delete",
        "type": "arrowdb",
        "name": "Checkins.batch_delete",
        "content": "Deletes Checkin objects that match the query constraints provided in the where parameter. If no where parameter is provided, all Checkin objects are deleted. Note that an HTTP 200 code (success) is returned if the call completed successfully but the query matched no objects. For performance reasons, the number of objects that can be deleted in a single batch delete operation is limited to 100,000. The matched objects are deleted asynchronously in a separate process. The Place, Event, or Photo associated with any of the matched objects is not deleted. You must be an application admin to run this command. DELETE checkins/batch_delete.json where Encoded JSON object that specifies constraint values for Checkins objects to delete. If not specified, all Checkins objects are deleted. return void titanium Example request to delete all Checkin objects. Cloud.sendRequest({ url : \"checkins/batch_delete.json\", method : \"DELETE\" }, function(e) { if (e.success) { alert(\"All Checkin objects have been deleted.\"); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE -F \"where={\\\"favorite_color\\\":\\\"blue\\\"}\" https://api.cloud.appcelerator.com/v1/checkins/batch_delete.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"batchDelete\" } } ios Example request to delete all Checkin objects. [[APSCloud sharedInstance] sendRequest:@\"checkins/batch_delete.json\" method:@\"DELETE\" data:nil handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"All Checkin object have been deleted.\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to delete all Checkin objects. APSCloud.getInstance().sendRequest(\"checkins/batch_delete.json\", \"DELETE\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"All Checkin objects have been deleted.\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.checkinsBatchDelete({ where: { favorite_color: 'blue' } }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Baleeted!'); } }); "
    },
    {
        "id": "Checkins-method-count-arrowdb",
        "url": "Checkins-method-count",
        "type": "arrowdb",
        "name": "Checkins.count",
        "content": "Retrieves the total number of Checkin objects. GET checkins/count.json return void titanium Example request to retrieve the total number of Checkin objects. Cloud.sendRequest({ url : \"checkins/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/checkins/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"checkinsCount\", \"count\": 1 } } ios Example request to retrieve the total number of Checkin objects. [[APSCloud sharedInstance] sendRequest:@\"checkins/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of Checkin objects. APSCloud.getInstance().sendRequest(\"checkins/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.checkinsCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "Checkins-method-create-arrowdb",
        "url": "Checkins-method-create",
        "type": "arrowdb",
        "name": "Checkins.create",
        "content": "Creates a checkin associated with either a Places or Events object. You should specify either a Places or Events object, but not both. If both are provided, the Places object will be used. A checkin message is optional. The optional photo parameter contains the binary data stream representing the photo included with the checkin. If a photo is included, the response includes a \"processed\" flag which indicates if the photo has been resized and stored reliably in the Appcelerator Cloud Services storage engine. This will be false initially be false. POST checkins/create.json place_id ID of the Places to check in to. You can associate a checkin with either a Places or Events object but not both. event_id ID of the Events to check in to. You can associate a checkin with either a Places or Events object but not both. message Message to attach to the checkin. photo New photo to attach as the primary photo for the checkin. When you use the photo parameter to attach a new photo, you can use the custom resize and sync options. photo_id ID of an existing photo to attach as the primary photo for the checkin. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the JSON response may include not just the objects that are being queried/searched, but also important data related to the queried objects, such as the object's owner or referencing objects. Default depth is 1. Valid values are 1-8. tags Comma separated list of tags for this checkin. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this checkin object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this checkin object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id User ID to create the checkin on behalf of. The current login user must be an application admin to create a checkin on behalf of another user. return void titanium This example creates a checkin and checks the response. Cloud.Checkins.create({ place_id: myPlaceId, message: 'What a great view!', photo: Titanium.Filesystem.getFile('photo.jpg') }, function (e) { if (e.success) { var checkin = e.checkins[0]; alert('Success:\\\\n' + 'id: ' + checkin.id + '\\\\n' + 'place: ' + checkin.place.name); } else { alert('Error:\\\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"message=Try the grilled steak burrito\" -F \"place_id=4d6f13e96f70953608000012\" -F \"photo=@photo.jpg\" https://api.cloud.appcelerator.com/v1/checkins/create.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"createCheckin\" }, \"response\": { \"checkins\": [ { \"id\":\"4d713b4f6f70951043000001\", \"message\":\"Try the grilled steak burrito\", \"created_at\":\"2011-03-04T19:19:43+0000\", \"updated_at\":\"2011-03-04T19:19:43+0000\", \"place\": { \"id\":\"4d6f13e96f70953608000012\", \"name\":\"Maya Restaurant\", \"created_at\":\"2011-03-03T04:07:05+0000\", \"updated_at\":\"2011-03-03T04:07:05+0000\", \"address\":\"303 2nd Street\", \"city\":\"San Francisco\", \"state\":\"CA\", \"country\":\"United States\", \"phone\":\"(415) 543-2928\", \"lat\":37.784732, \"lng\":-122.395441 }, \"user\": { \"id\":\"4d6e77386f70950c89000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-02T16:58:32+0000\", \"updated_at\":\"2011-03-02T17:51:42+0000\" }, \"photo\": { \"id\":\"4d713b4f6f70951043000002\", \"filename\":\"photo.jpg\", \"size\":584344, \"md5\":\"589b8ad43ed20bf8e622d719642bc939\", \"created_at\":\"2011-03-04T19:19:43+0000\", \"updated_at\":\"2011-03-04T19:19:43+0000\", \"processed\":false } } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"place_id\": myPlaceId, @\"message\": @\"What a great view!\", @\"photo\": UIImageJPEGRepresentation(image, 1.0) }; [APSCheckins create:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"place_id\", \"4d6f13e96f70953608000012\"); try { APSCheckins.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Created!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSCheckins\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSCheckins\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSCheckins\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''), fs = require('fs'); arrowDBApp.checkinsCreate({ place_id: myPlaceId, message: 'What a great view!', photo: fs.createFileStream('photo.jpg') }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.checkins); } }); "
    },
    {
        "id": "Checkins-method-delete-arrowdb",
        "url": "Checkins-method-delete",
        "type": "arrowdb",
        "name": "Checkins.delete",
        "content": "Deletes a checkin. The Place, Event, or Photo associated with the checkin is not deleted. An application admin can delete any Checkin object. DELETE checkins/delete.json checkin_id ID of the checkin to delete. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. su_id User to delete the Checkin object on behalf of. The user must be the creator of the object. The current user must be an application admin to delete a Checkin object on behalf of another user. return void titanium This example deletes a checkin and checks the response. Cloud.Checkins.remove({ checkin_id: myCheckinId }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE http://api.cloud.appcelerator.com/v1/checkins/delete.json?key=&pretty_json=true&checkin_id=4d8bc645d0afbe0363000013 Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"deleteCheckin\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"checkin_id\": myCheckinId }; [APSCheckins remove:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"checkin_id\", \"4d713b4f6f70951043000001\"); try { APSCheckins.remove(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Removed!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSCheckins\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSCheckins\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSCheckins\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.checkinsDelete({ checkin_id: myCheckinId }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Checkins-method-query-arrowdb",
        "url": "Checkins-method-query",
        "type": "arrowdb",
        "name": "Checkins.query",
        "content": "Performs a custom query of checkins with sorting and pagination. Currently you can not query or sort data stored inside array or hash in custom fields. In ArrowDB 1.1.5 and later, you can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. For details about using the query parameters, see the Search and Query guide. GET checkins/query.json page Request page number, default is 1. This parameter is only available to ArrowDB applications created before ArrowDB 1.1.5. Applications created with ArrowDB 1.1.5 and later must use ranged-based queries queries to paginate their queries. per_page Number of results per page, default is 10. This parameter is only available to ArrowDB applications created before ArrowDB 1.1.5. Applications created with ArrowDB 1.1.5 and later must use ranged-based queries queries to paginate their queries. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. where Constraint values for fields. where should be encoded JSON. If where is not specified, query returns all objects. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. For example: sel={\"all\":[\"username\",\"first_name\",\"confirmed_at\"]} Note: you need to use \"all\" then a list of fields you wan to sel as it applies to the nested json. show_user_like If set to true, each Checkin object in the response includes \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked` field is not included in the response. unsel Selects the object fields NOT to display. Do not use this parameter with sel. For example: unsel={\"all\":[\"username\",\"first_name\",\"admin\"]} Note: you need to use \"all\" then a list of fields you wan to unsel as it applies to the nested json. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests information about checkins and checks the response. Cloud.Checkins.query({ page: 1, per_page: 20, order: '-updated_at' }, function (e) { if (e.success) { for (var i = 0; i rest The following cURL request searches checkins by location, if your app assigned a geographic location to each checkin (see Geographic Coordinates in Custom Fields. The request includes show_user_like=true as a query string parameter. The sample JSON response includes a single Checkins object that contains \"current_user_liked\":\"true\", indicating that the current user has liked this object. $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode 'where={\"coordinates\":{\"$nearSphere\":[-122.23,37.12], \"$maxDistance\" : 0.00126}}' \"https://api.cloud.appcelerator.com/v1/checkins/query.json?key=&pretty_json=true&show_user_like=true&count=true\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"queryCheckins\", \"count\": 100 }, \"response\": { \"checkins\": [ { \"id\":\"4d713b4f6f70951043000001\", \"message\":\"Try the grilled steak burrito\", \"created_at\":\"2011-03-04T19:19:43+0000\", \"updated_at\":\"2011-03-04T19:19:43+0000\", \"custom_fields\": { \"coordinates\": [-122.23, 37.12] } }, \"current_user_liked\": true, \"place\": { \"id\":\"4d6f13e96f70953608000012\", \"name\":\"Maya Restaurant\", \"created_at\":\"2011-03-03T04:07:05+0000\", \"updated_at\":\"2011-03-03T04:07:05+0000\", \"address\":\"303 2nd Street\", \"city\":\"San Francisco\", \"state\":\"CA\", \"country\":\"United States\", \"phone\":\"(415) 543-2928\", \"lat\":37.784732, \"lng\":-122.395441 }, \"user\": { \"id\":\"4d6e77386f70950c89000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-02T16:58:32+0000\", \"updated_at\":\"2011-03-02T17:51:42+0000\" }, \"photo\": { \"id\":\"4d713b4f6f70951043000002\", \"filename\":\"photo.jpg\", \"size\":584344, \"md5\":\"589b8ad43ed20bf8e622d719642bc939\", \"created_at\":\"2011-03-04T19:19:43+0000\", \"updated_at\":\"2011-03-04T19:19:47+0000\", \"processed\":true, \"content_type\":\"image/jpeg\", \"urls\": { \"square_75\":\"http://storage.appcelerator.com/osxW8CUVzwuIlxjJZC1HS8hJdc3mV9ON/photos/4d713b4f6f70951043000002/photo_square_75.jpg\", \"thumb_100\":\"http://storage.appcelerator.com/osxW8CUVzwuIlxjJZC1HS8hJdc3mV9ON/photos/4d713b4f6f70951043000002/photo_thumb_100.jpg\", \"small_240\":\"http://storage.appcelerator.com/osxW8CUVzwuIlxjJZC1HS8hJdc3mV9ON/photos/4d713b4f6f70951043000002/photo_small_240.jpg\", \"medium_500\":\"http://storage.appcelerator.com/osxW8CUVzwuIlxjJZC1HS8hJdc3mV9ON/photos/4d713b4f6f70951043000002/photo_medium_500.jpg\", \"medium_640\":\"http://storage.appcelerator.com/osxW8CUVzwuIlxjJZC1HS8hJdc3mV9ON/photos/4d713b4f6f70951043000002/photo_medium_640.jpg\", \"large_1024\":\"http://storage.appcelerator.com/osxW8CUVzwuIlxjJZC1HS8hJdc3mV9ON/photos/4d713b4f6f70951043000002/photo_large_1024.jpg\", \"original\":\"http://storage.appcelerator.com/osxW8CUVzwuIlxjJZC1HS8hJdc3mV9ON/photos/4d713b4f6f70951043000002/photo_original.jpg\" } } } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"page\": @1, @\"per_page\": @20, @\"order\": @\"-updated_at\" }; [APSCheckins query:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu checkins\", (unsigned long)((NSArray *) e.response[@\"checkins\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap; JSONObject params = new JSONObject(\"{'coordinates': {'$nearSphere': [-122.1,37.1], '$maxDistance': 0.00126}}\"); data.put(\"where\", params); try { APSCheckins.query(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray checkins = e.getResponse().getJSONArray(\"checkins\"); if (checkins.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.checkinsQuery({ limit: 20, order: '-updated_at' }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.checkins.forEach(function(checkin){ console.log(checkin); }); } }); "
    },
    {
        "id": "Checkins-method-show-arrowdb",
        "url": "Checkins-method-show",
        "type": "arrowdb",
        "name": "Checkins.show",
        "content": "Returns the contents of the identified checkin. GET checkins/show.json checkin_id ID of the checkin to show. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. show_user_like If set to true the Checkin object in the response will include \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked field is not included in the response. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests information about a checkin and checks the response. Cloud.Checkins.show({ checkin_id: myCheckinId }, function (e) { if (e.success) { var checkin = e.checkins[0]; alert('Success:\\n' + 'id: ' + checkin.id + '\\n' + 'place: ' + checkin.place.name + '\\n' + 'updated_at: ' + checkin.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request that passes show_user_like=true as a parameter; the Checkin object returned in the JSON response contains \"current_user_liked\": true, indicating that the current user liked the retrieved object. $ curl -b cookies.txt -c cookies.txt https://api.cloud.appcelerator.com/v1/checkins/show.json?key=&pretty_json=true&checkin_id=4d8bc645d0afbe0363000013&show_user_like=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"showCheckins\" }, \"response\": { \"checkins\": [ { \"id\":\"4d8bc645d0afbe0363000013\", \"created_at\":\"2011-03-24T22:31:34+0000\", \"current_user_liked\": true, \"updated_at\":\"2011-03-24T22:31:34+0000\", \"place\": { \"id\":\"4d8bc62ad0afbe0363000012\", \"name\":\"Cocoafish\", \"created_at\":\"2011-03-24T22:31:06+0000\", \"updated_at\":\"2011-03-24T22:31:06+0000\", \"address\":\"58 South Park Ave.\", \"city\":\"San Francisco\", \"state\":\"California\", \"country\":\"United States\", \"website\":\"cocoafish.com\", \"twitter\":\"cocoafish\", \"latitude\":37.782227, \"longitude\":-122.393159 }, \"user\": { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Mike\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-24T18:11:52+0000\", \"photo\": { \"id\":\"4d88448ed0afbe0e4e000003\", \"filename\":\"photo.jpg\", \"size\":584344, \"md5\":\"589b8ad43ed20bf8e622d719642bc939\", \"created_at\":\"2011-03-22T06:41:18+0000\", \"updated_at\":\"2011-03-22T06:41:24+0000\", \"processed\":true, \"collection_name\":\"_cocoafish_user_profile\", \"content_type\":\"image/jpeg\", \"urls\": { \"square_75\":\"http://storage.appcelerator.com/gjvI579NDKJNuhBBj9HGWhbGDISHcCvL/photos/4d88448ed0afbe0e4e000003/photo_square_75.jpg\", \"thumb_100\":\"http://storage.appcelerator.com/gjvI579NDKJNuhBBj9HGWhbGDISHcCvL/photos/4d88448ed0afbe0e4e000003/photo_thumb_100.jpg\", \"small_240\":\"http://storage.appcelerator.com/gjvI579NDKJNuhBBj9HGWhbGDISHcCvL/photos/4d88448ed0afbe0e4e000003/photo_small_240.jpg\", \"medium_500\":\"http://storage.appcelerator.com/gjvI579NDKJNuhBBj9HGWhbGDISHcCvL/photos/4d88448ed0afbe0e4e000003/photo_medium_500.jpg\", \"medium_640\":\"http://storage.appcelerator.com/gjvI579NDKJNuhBBj9HGWhbGDISHcCvL/photos/4d88448ed0afbe0e4e000003/photo_medium_640.jpg\", \"large_1024\":\"http://storage.appcelerator.com/gjvI579NDKJNuhBBj9HGWhbGDISHcCvL/photos/4d88448ed0afbe0e4e000003/photo_large_1024.jpg\", \"original\":\"http://storage.appcelerator.com/gjvI579NDKJNuhBBj9HGWhbGDISHcCvL/photos/4d88448ed0afbe0e4e000003/photo_original.jpg\" } } }, \"photo\": { \"id\":\"4d8bc645d0afbe0363000014\", \"filename\":\"photo.jpg\", \"size\":584344, \"md5\":\"589b8ad43ed20bf8e622d719642bc939\", \"created_at\":\"2011-03-24T22:31:33+0000\", \"updated_at\":\"2011-03-24T22:31:33+0000\", \"processed\":false } } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"checkin_id\": myCheckinId }; [APSCheckins show:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Show checkin %@\", ((NSArray *) e.response[@\"checkins\"])[0][@\"id\"] ]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"checkin_id\", \"4d713b4f6f70951043000001\"); try { APSCheckins.show(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { Toast.makeText(currentActivity, e.getResponseString(), Toast.LENGTH_SHORT); } catch (APSCloudException err) { Log.e(\"APSCheckins\", \"Exception thrown: \" + err.toString()); } } else { Log.e(\"APSCheckins\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSCheckins\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSCheckins\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.checkinsShow({ checkin_id: myCheckinId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.checkins); } }); "
    },
    {
        "id": "Checkins-method-update-arrowdb",
        "url": "Checkins-method-update",
        "type": "arrowdb",
        "name": "Checkins.update",
        "content": "Updates a checkin for the currenty logged in user. Application admins can update another user's checkin on their behalf by including the su_id field in the request. PUT checkins/update.json checkin_id ID of the Checkins to update. place_id ID of the Places to check in to. You can associate a checkin with either a Places or Events object but not both. event_id ID of the Events to check in to. You can associate a checkin with either a Places or Events object but not both. message Message to attach to the checkin. photo New Photos object to attach as the primary photo for the checkin. When you use the photo parameter to attach a new photo, you can use the custom resize and sync options. photo_id ID of an existing Photos object to attach as the primary photo for the checkin. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. tags Comma-separated list of tags for this checkin. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this checkin object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this checkin object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id ID of Users to update the checkin on behalf of. The current login user must be an application admin to create a checkin on behalf of another user. return void titanium Example request to update a Checkin object. Cloud.sendRequest({ url : \"checkins/update.json\", method : \"PUT\", data: { \"checkin_id\": \"4d713b4f6f70951043000001\", \"message\": \"Try the grilled steak burrito with guacamole!\" } }, function(e) { if (e.success) { alert(\"All Review objects have been deleted.\"); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"message=Try the grilled steak burrito with guacamole!\" -F \"checkin_id=4d713b4f6f70951043000001\" \"https://api.cloud.appcelerator.com/v1/checkins/update.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"updateCheckin\" }, \"response\": { \"checkins\": [ { \"id\":\"4d713b4f6f70951043000001\", \"message\":\"Try the grilled steak burrito with guacamole!\", \"created_at\":\"2011-03-04T19:19:43+0000\", \"updated_at\":\"2011-03-04T20:31:50+0000\", \"place\": { \"id\":\"4d6f13e96f70953608000012\", \"name\":\"Maya Restaurant\", \"created_at\":\"2011-03-03T04:07:05+0000\", \"updated_at\":\"2011-03-03T04:07:05+0000\", \"address\":\"303 2nd Street\", \"city\":\"San Francisco\", \"state\":\"CA\", \"country\":\"United States\", \"phone\":\"(415) 543-2928\", \"lat\":37.784732, \"lng\":-122.395441 }, \"user\": { \"id\":\"4d6e77386f70950c89000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-02T16:58:32+0000\", \"updated_at\":\"2011-03-02T17:51:42+0000\" }, \"photo\": { \"id\":\"4d713b4f6f70951043000002\", \"filename\":\"photo.jpg\", \"size\":584344, \"md5\":\"589b8ad43ed20bf8e622d719642bc939\", \"created_at\":\"2011-03-04T19:19:43+0000\", \"updated_at\":\"2011-03-04T19:19:43+0000\", \"processed\":false } } ] } } ios Example request to update a Checkin object. NSDictionary *params = @{ @\"checkin_id\": @\"4d713b4f6f70951043000001\", @\"message\": @\"Try the grilled steak burrito with guacamole!\" }; [[APSCloud sharedInstance] sendRequest:@\"checkins/update.json\" method:@\"PUT\" data:params handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:e.responseString\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to update a Checkin object. HashMap data = new HashMap(); data.put(\"checkin_id\", \"4d713b4f6f70951043000001\"); data.put(\"message\", \"Try the grilled steak burrito with guacamole!\"); APSCloud.getInstance().sendRequest(\"checkins/update.json\", \"PUT\", data, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(e.getResponseString()) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.checkinsUpdate({ 'checkin_id': '4d713b4f6f70951043000001', 'message': 'Try the grilled steak burrito with guacamole!' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.checkins); } }); "
    },
    {
        "name": "Clients",
        "id": "Clients-arrowdb",
        "url": "Clients",
        "type": "arrowdb",
        "content": "Clients The Clients API lets you lookup a user location based on IP address if the user's device fails to provide location information. "
    },
    {
        "id": "Clients-method-geolocate-arrowdb",
        "url": "Clients-method-geolocate",
        "type": "arrowdb",
        "name": "Clients.geolocate",
        "content": "Provides location data about the mobile device or computer your app is running on based on its IP address. This feature uses MaxMind GeoIP to return the most accurate IP-based geolocation data possible. Note that the results are not not based on GPS signals nor WiFi triangulation commonly used on mobile devices. See MaxMind GeoIP city accuracy for more information. An example use of this data is to verify the country that the app user in, so that access can be given to application data. An error will be returned of the location cannot be determined from the IP address. A successful lookup will return at minimum a ISO 3166 country code. GET clients/geolocate.json ip_address Alternate IP address to lookup instead of using the device's own address. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example locates a client and checks the response. Cloud.Clients.geolocate({ ip_address: clientIPAddress }, function (e) { if (e.success) { alert('Success:\\n' + 'ip_address: ' + e.ip_address + '\\n' + 'latitude: ' + e.location.latitude + '\\n' + 'longitude: ' + e.location.longitude); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/clients/geolocate.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"geolocateClient\" }, \"response\": { \"ip_address\": \"184.72.37.109\", \"location\": { \"country_code\": \"US\", \"city\": \"Seattle\", \"state\": \"WA\", \"postal_code\": \"98144\", \"latitude\": 47.5839, \"longitude\": -122.2995 } } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"ip_address\": clientIPAddress }; [APSClients geolocate:data withBlock:^(APSResponse *e) { if (e.success) { NSDictionary *loc = e.response[@\"location\"]; NSString *message = [NSString stringWithFormat:@\"lat: %@ lon: %@\", loc[@\"latitude\"], loc[@\"longitude\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); try { APSClients.geolocate(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { Log.i(\"APSClients\", e.getResponseString()); } catch (APSCloudException err1) { Log.e(\"APSClients\", err1.toString()); } } else { Log.e(\"APSClients\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSClients\", e.toString()); } }); } catch (APSCloudException err2) { Log.e(\"APSClients\", err2.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.clientsGeolocate({ ip_address: clientIPAddress }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Success:\\n' + 'ip_address: ' + result.body.response.ip_address + '\\n' + 'latitude: ' + result.body.response.location.latitude + '\\n' + 'longitude: ' + result.body.response.location.longitude); } }); "
    },
    {
        "name": "CustomObjects",
        "id": "CustomObjects-arrowdb",
        "url": "CustomObjects",
        "type": "arrowdb",
        "content": "CustomObjects The CustomObjects API lets you define your own object types that can be integrated with existing ArrowDB objects. Each CustomObject can have a default primary photo and have associated reviews, comments, and likes. To distinguish different types of custom ArrowDB objects, you use a unique URL for each class of custom object. The URL for a custom object method has the following format: https://api.cloud.appcelerator.com/v1/objects/classname/method.json For example, if your application uses cars and drivers objects, you would use different URLs to create them: https://api.cloud.appcelerator.com/v1/objects/cars/create.json https://api.cloud.appcelerator.com/v1/objects/drivers/create.json When custom objects are returned in a response, the classname is used as a property name. For example, if you query a list of custom cars objects, the response would include a cars array: response: { \"cars\": [ // array of \"cars\" objects ] } You define the fields of a custom object by specifying a fields property to the create or update methods. For instance, if you want to define a car object, you might include the following fields: { \"make\": \"nissan\", \"color\": \"blue\", \"year\": 2005, \"purchased_at\": \"2011-11-02 17:07:37 -0700\", \"used\": false } Supported data types for custom object fields are: TypeExample String \"blue\" Number 23 or 1.234 Date \"2011-11-02 17:07:37 -0700\". If a string value matches date format \"yyyy-mm-dd hh:mm:ss +zzzz\" or \"yyyy-mm-ddThh:mm:ss+zzzz\", it will be converted to a Date type on the Appcelerator Cloud Services backend Fields can also include more complex data types such as Array and Hash. Hash and Array can be nested inside each other. Currently, data stored inside a Hash is not queryable. TypeExample Hash {\"age\":23,\"scores\":{\"math\":90, \"physics\":100}, \"my_favorite_colors\":[\"blue\",\"red\"]} Array [\"nissan\", \"honda\", \"toyota\"] or [2006, 2008], [{\"age\":28}, {\"color\":\"blue\"}] Two custom fields have special meaning: tags and coordinates. If fields contains a tags key and you do not pass a separate tags parameter, the values in fields.tags will be stored in the object's tags field. To enable geographical search, fields can include a coordinates key to store geographic coordinates. The coordinates value can be a single location: coordinates: [longitude, latitude] Or multiple locations: coordinates: [[longitude1,latitude1], [longitude2, latitude2]...]. So for the above example, if we want to store coordinates for the car, we have: fields: { \"make\": \"nissan\", \"color\": \"blue\", \"year\": 2005, \"purchased_at\": \"2011-11-02 17:07:37 -0700\", \"used\": false, \"coordinates\": [-122.1, 37.1] } The fields you define for a custom object are added in to the predefined fields, so a cars object returned by a query might look like this: \"cars\": [{ \"id\":, \"4ec42de1d9ca72c50700000d\", \"created_at\": \"2011-11-16T21:40:49+0000\", \"updated_at\": \"2011-11-16T21:40:49+0000\", \"make\": \"nissan\", \"color\": \"blue\", \"year\": 2005, \"purchased_at\": \"2011-11-02 17:07:37 -0700\", \"used\": false, \"coordinates\": [-122.1, 37.1] }] "
    },
    {
        "id": "CustomObjects-property-acls-arrowdb",
        "url": "CustomObjects-property-acls",
        "type": "arrowdb",
        "name": "CustomObjects.acls",
        "content": "Single-element array containing the ACL associated with this object (if any). ACLs[]"
    },
    {
        "id": "CustomObjects-property-created_at-arrowdb",
        "url": "CustomObjects-property-created_at",
        "type": "arrowdb",
        "name": "CustomObjects.created_at",
        "content": "Creation date for this user object. Date"
    },
    {
        "id": "CustomObjects-property-id-arrowdb",
        "url": "CustomObjects-property-id",
        "type": "arrowdb",
        "name": "CustomObjects.id",
        "content": "Generated unique ID for this object. String"
    },
    {
        "id": "CustomObjects-property-photo-arrowdb",
        "url": "CustomObjects-property-photo",
        "type": "arrowdb",
        "name": "CustomObjects.photo",
        "content": "Primary photo for this object. Photos"
    },
    {
        "id": "CustomObjects-property-tags-arrowdb",
        "url": "CustomObjects-property-tags",
        "type": "arrowdb",
        "name": "CustomObjects.tags",
        "content": "List of tags associated with this object. String[]"
    },
    {
        "id": "CustomObjects-property-updated_at-arrowdb",
        "url": "CustomObjects-property-updated_at",
        "type": "arrowdb",
        "name": "CustomObjects.updated_at",
        "content": "Last update time for this user object. Date"
    },
    {
        "id": "CustomObjects-property-user-arrowdb",
        "url": "CustomObjects-property-user",
        "type": "arrowdb",
        "name": "CustomObjects.user",
        "content": "Owner of this object. Users"
    },
    {
        "id": "CustomObjects-method-admin_drop_collection-arrowdb",
        "url": "CustomObjects-method-admin_drop_collection",
        "type": "arrowdb",
        "name": "CustomObjects.admin_drop_collection",
        "content": "Drops a CustomObjects collection of a specified type. The collection is dropped asynchronously in a separate process. You must be an application admin to run this command. DELETE objects/:classname/admin_drop_collection.json classname Type of custom object. Specified as part of the URL path, not in the parameters. return void titanium Example request to delete all Car objects. Cloud.sendRequest({ url : \"objects/cars/admin_drop_collection.json\", method : \"DELETE\" }, function(e) { if (e.success) { alert(\"All Car objects have been deleted.\"); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request that drops the CustomObjects collection of type car: $ curl -b c.txt -c c.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/objects/car/admin_drop_collection.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"dropCollection\" } } ios Example request to delete all Car objects. [[APSCloud sharedInstance] sendRequest:@\"objects/cars/admin_drop_collection.json\" method:@\"DELETE\" data:nil handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:e.responseString delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to delete all Car objects. APSCloud.getInstance().sendRequest(\"objects/cars/admin_drop_collection.json\", \"DELETE\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"All Car objects have been removed.\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"REST\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSUsers\", \"Exception throw: \" + e.toString()); } }); nodejs For Node.js calls, pass the class name to the classname property of the parameters object: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.customObjectsAdminDropCollection({ classname: 'cars' }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED'); } }); "
    },
    {
        "id": "CustomObjects-method-batch_create-arrowdb",
        "url": "CustomObjects-method-batch_create",
        "type": "arrowdb",
        "name": "CustomObjects.batch_create",
        "content": "Creates up to 100 custom objects. The current user must be an application admin to use this API. If there is an error inserting one of the objects, the response payload will return a 200 code, the number of objects created, and the error for creating the first object that failed. The HTTP response will be 202. The classname of the object is part of the URL. You do not have to define classname ahead of time. It will be created on the fly. POST objects/:classname/batch_create.json classname Type of custom object. Specified as part of the URL path, not in the parameters. json_array Array of JSON-encoded objects to create. You may specify up to 100 objects. You do not have to define fields ahead of time, simply set key-value pairs of the fields. Since the data must be encoded as JSON, keys must not contain the dot character. You may pass the following predefined fields: acl_id, photo_id and user_id, to attach an ACL, Photo, or User object, respectively. Note that ArrowDB will not check if the ID exists. json_array = [ { custom_field: 'red', acl_id: '1234567890abcdef', photo_id: '0987654321fedcba', user_id: 'ab12cd34ef098765' } ] The tags field is not supported for the batch create operations. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example creates a new custom object and checks the response. Cloud.sendRequest({ url: 'objects/foo/batch_create.json', method: 'POST', data: { json_array: [{'foo': 'bar'}, {'foo':'baz'}] } }, function (e) { if (e.success) { console.log(e.meta.message); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request that creates a few \"foo\" objects: $ curl -b cookies.txt -c cookies.txt -X POST --data-urlencode 'json_array=[{\"foo\":\"bar\"}, {\"foo\":\"baz\"}]' https://api.cloud.appcelerator.com/v1/objects/foo/batch_create.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"message\": '{\"ok\"=>1, \"n\"=>2, \"nInserted\"=>2}', \"method_name\": \"batchCreate\" }, } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"json_array\": @[ @{@\"foo\":@\"bar\"}, @{@\"foo\":@\"baz\"} ] }; [[APSCloud sharedInstance] sendRequest:@\"objects/foo/batch_create.json\" method:@\"POST\" data:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"%@\", [e.meta valueForKey:@\"message\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; JSONArray myArray = new JSONArray(); myArray.put(new JSONObject(\"{'foo':'bar'}\")); myArray.put(new JSONObject(\"{'foo':'baz'}\")); HashMap data = new HashMap(); data.put(\"json_array\", myArray); APSCloud.getInstance().sendRequest(\"objects/foo/batch_create.json\", \"POST\", data, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Created!\"): .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSObjects\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.post( '/v1/objects/foos/batch_create.json', { json_array: [{'foo': 'bar'}, {'foo':'baz'}] }, function(err, result) { if (err) { console.error(err); } else { console.log(result.body.meta.message) } }); "
    },
    {
        "id": "CustomObjects-method-batch_delete-arrowdb",
        "url": "CustomObjects-method-batch_delete",
        "type": "arrowdb",
        "name": "CustomObjects.batch_delete",
        "content": "Deletes CustomObjects objects that match the query constraints provided in the where parameter. If no where parameter is provided, all CustomObject objects are deleted. Note that an HTTP 200 code (success) is returned if the call completed successfully but the query matched no objects. For performance reasons, the number of objects that can be deleted in a single batch delete operation is limited to 100,000. The matched objects are deleted asynchronously in a separate process. The primary photos associated with the matched objects are not deleted. You must be an application admin to run this command. DELETE objects/:classname/batch_delete.json where Encoded JSON object that specifies constraint values for CustomObjects objects to delete. If not specified, all CustomObjects objects are deleted. classname Type of custom object. Specified as part of the URL path, not in the parameters. return void titanium Example request to delete all Car objects. Cloud.sendRequest({ url : \"objects/cars/batch_delete.json\", method : \"DELETE\" }, function(e) { if (e.success) { alert(\"All Car objects have been deleted.\"); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE -F \"where={\\\"favorite_color\\\":\\\"blue\\\"}\" https://api.cloud.appcelerator.com/v1/objects/car/batch_delete.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"batchDelete\" } } ios Example request to delete all Car objects. [[APSCloud sharedInstance] sendRequest:@\"objects/cars/batch_delete.json\" method:@\"DELETE\" data:nil handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:e.responseString delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to delete all Car objects. APSCloud.getInstance().sendRequest(\"objects/cars/batch_delete.json\", \"DELETE\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"All Car objects have been deleted.\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs For Node.js calls, pass the class name to the classname property of the parameters object: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.customObjectsBatchDelete({ classname: 'cars', where: {color: 'blue'} }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED'); } }); "
    },
    {
        "id": "CustomObjects-method-count-arrowdb",
        "url": "CustomObjects-method-count",
        "type": "arrowdb",
        "name": "CustomObjects.count",
        "content": "Retrieves the total number of objects of the specified class. GET objects/:classname/count.json classname Type of custom object. Specified as part of the URL path, not in the parameters. return void titanium Example request to retrieve the total number of Car objects. Cloud.sendRequest({ url : \"objects/cars/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/objects/cars/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"objectsCount\", \"count\": 1 } } ios Example request to retrieve the total number of Car objects. [[APSCloud sharedInstance] sendRequest:@\"objects/cars/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of Car objects. APSCloud.getInstance().sendRequest(\"objects/cars/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs For Node.js calls, pass the class name to the classname property of the parameters object: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.customObjectsCount({ classname: 'cars' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "CustomObjects-method-create-arrowdb",
        "url": "CustomObjects-method-create",
        "type": "arrowdb",
        "name": "CustomObjects.create",
        "content": "Create a custom object of type classname. The classname of the object is part of the URL. You do not have to define classname ahead of time. It will be created on the fly POST objects/:classname/create.json classname Type of custom object. Specified as part of the URL path, not in the parameters. fields JSON encoding of object fields. You don't have to define fields ahead of time, simply set key-value pairs of the fields. Since the data must be encoded as JSON, keys must not contain the dot character. For instance, if you want to define a car object: { \"make\": \"nissan\", \"color\": \"blue\", \"year\": 2005, \"purchased_at\": \"2011-11-02 17:07:37 -0700\", \"used\": false } See the main description for CustomObjects for more information on fields. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. tags Comma-separated list of tags associated with this object. If the tags parameter is omitted and a tags key is included in the fields dictionary, fields.tags will be used instead. photo New photo to attach as the primary photo for the object. When you use the photo parameter to attach a new photo, you can use the custom resize and sync options. photo_id ID of an existing photo to attach as the primary photo for the object. acl_name Name of an ACLs to associate with this checkin object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this checkin object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id User ID to create the object on behalf of. The current login user must be an application admin to create an object on behalf of another user. return void titanium This example creates a new custom object and checks the response. Cloud.Objects.create({ classname: 'cars', fields: { make: 'nissan', color: 'blue', year: 2005 } }, function (e) { if (e.success) { var car = e.cars[0]; alert('Success:\\n' + 'id: ' + car.id + '\\n' + 'make: ' + car.make + '\\n' + 'color: ' + car.color + '\\n' + 'year: ' + car.year + '\\n' + 'created_at: ' + car.created_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request that creates a \"car\" object with custom coordinates: $ curl -b cookies.txt -c cookies.txt -F \"fields={\\\"color\\\":\\\"blue\\\", \\\"make\\\": \\\"nissan\\\", \\\"purchased_at\\\" : \\\"2011-11-02 17:07:37 -0700\\\", \\\"year\\\" : 2005, \\\"used\\\" : false, \\\"coordinates\\\":[-122.1, 37.1]}\" https://api.cloud.appcelerator.com/v1/objects/car/create.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"createObject\" }, \"response\": { \"car\": [ { \"color\": \"blue\", \"make\": \"nissan\", \"purchased_at\": \"2011-11-03T00:07:37+0000\", \"year\": 2005, \"used\": false, \"coordinates\": [ [ -122.1, 37.1 ] ], \"id\": \"4ec42de1d9ca72c50700000d\", \"created_at\": \"2011-11-16T21:40:49+0000\", \"updated_at\": \"2011-11-16T21:40:49+0000\" } ] } } In iOS, you can simply create a NSDictionary to represent a custom object's fields. Here is the mapping of data types in iOS: TypeExampleiOS Class String \"blue\" NString Number 123 or 1.234 [NSNumber numberWithInt:] or [NSNumber numberWithDouble:] Boolean true or false [NSNumber numberWithBoo:] Date \"2011-11-02 17:07:37 -0700\") NSDate Hash {\"age\": 23, \"color\": \"blue\"} NSDictionary Array [123, 234] or [\"mike\", \"joe\"] NSArray Geo coordinates [lng, lat], e.g. [122.33, 37.48] CLLocation null Set a value to null NSNull If you would like to use your own custom data type, you need to provide an -(id)JSON encode method in your object class. @interface MyObject : NSObject { NSString *color; NSNumber *mileage; } @end @implementation MyObject /*! Provide custom and/or encodable object to parse to JSON string. @result Object encodable as JSON such as NSDictionary, NSArray, NSString, NSNumber, NSDate or NSNull */ - (id)JSON { return [NSDictionary dictionaryWithObjectsAndKeys:self.color, @\"color\", self.mileage, @mileage, nil]; } @end MyObject *object = [[MyObject alloc] init]; NSMutableDictionary *customFields = [NSMutableDictionary dictionaryWithCapacity:1]; [customFields setObject:object forKey:@\"MyObject\"]; ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"classname\": @\"cars\", @\"fields\": @{ @\"make\": @\"nissan\", @\"color\": @\"blue\", @\"year\": @2005 } }; [APSObjects create:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"id: %@\", ((NSArray *)e.response[@\"cars\"])[0][@\"id\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; JSONObject fields = new JSONObject(\"{'color':'blue', 'make': 'nissan', 'purchased_at' : '2011-11-02 17:07:37 -0700', 'year' : 2005, 'used' : false, 'coordinates':[-122.1, 37.1]}\"); HashMap data = new HashMap(); data.put(\"fields\", fields); data.put(\"classname\", \"cars\"); try { APSObjects.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Created!\"): .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSObjects\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSObjects\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSObjects\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.customObjectsCreate({ classname: 'cars', fields: { make: 'nissan', color: 'blue', year: 2005 } }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.cars[0]); } }); "
    },
    {
        "id": "CustomObjects-method-delete-arrowdb",
        "url": "CustomObjects-method-delete",
        "type": "arrowdb",
        "name": "CustomObjects.delete",
        "content": "Only the owner of the object or user who is granted write permission by the object's ACL can delete the object. The primary photo associated with the CustomObject is not deleted. An application admin can delete any custom object. DELETE objects/:classname/delete.json classname Type of custom object. Specified as part of the URL path, not in the parameters. id The object ID of the custom object to delete. You must specify either id or ids. ids A comma-separated list of object IDs of the custom objects to delete. You must specify either id or ids. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. su_id User to delete the Custom object on behalf of. The user must be the creator of the object. The current user must be an application admin to delete a Custom object on behalf of another user. return void titanium This example deletes a custom object and checks the response. Cloud.Objects.remove({ classname: 'cars', id: savedCar1.id }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/objects/car/delete.json?key=&pretty_json=true&id=4ec42e91d9ca72c507000010\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"deleteObjects\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"classname\": @\"cars\", @\"id\": savedCarID }; [APSObjects remove:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"id\", \"4ec42e91d9ca72c507000010\"); data.put(\"classname\", \"cars\"); try { APSObjects.remove(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Removed!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSObjects\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSObjects\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSObjects\", \"Exception thrown: \" + e.toString()); } nodejs For Node.js calls, pass the class name to the classname property of the parameters object: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.customObjectsDelete({ classname: 'cars', id: savedCar1.id }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "CustomObjects-method-query-arrowdb",
        "url": "CustomObjects-method-query",
        "type": "arrowdb",
        "name": "CustomObjects.query",
        "content": "Query custom object by specified fields with sorting and paginating. Notes: If a custom object contains fields or values that are greater than 1KB in length, you will not be able to query on that field. For more information, see Indexing Size Limit for Custom Objects and Fields. Currently, you cannot query or sort data stored inside an array or hash. You can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. For details about using the query parameters, see the Search and Query guide. GET objects/:classname/query.json classname Type of custom object. Specified as part of the URL path, not in the parameters. page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. show_user_like If set to true, each CustomObject in the response includes \"current_user_liked: true\" if the current user has liked the object. If the current user has not liked the object, the current_user_liked field is not included in the response. where Constraint values for fields. where should be encoded JSON. Each value in the search query needs to be less that 1024 bytes. If the value is larger than 1024 bytes, the query does not return any results. In addition to developer created fields, custom objects include four predefined fields that can be queried as well: user_id: String. Object owner's user ID. tags_array: String. List of tags. created_at: Date. Timestamp when the object was created. updated_at: Date. Timestamp when the object was updated. If where is not specified, query returns all objects. order Sort results by one or more fields, specified as a comma-separated list of field names. See the Search and Query guide for more information. Fields with a Hash data type cannot be sorted. Custom objects include two predefined sortable fields: `created_at: Date` - Timestamp when the object was created. `updated_at: Date` - Timestamp when the object was last updated. For example, if you want to query cars and sort them by make and created_at: \"order\": \"make,created_at\" To reverse the sorting order, simply add - in front of a field. For example, to sort results by make in ascending order then by created_at in descending order: \"order\": \"make,-created_at\" sel Selects the object fields to display. Do not use this parameter with unsel. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. return void titanium This example requests information about custom objects and checks the response. Cloud.Objects.query({ classname: 'cars', page: 1, per_page: 10, where: { color: 'blue' } }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.cars.length); for (var i = 0; i rest Example cURL request: $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode 'where={\"color\":\"blue\",\"coordinates\":{\"$nearSphere\":[-122.1,37.1], \"$maxDistance\" : 0.00126}}' --data-urlencode 'order=-purchased_at' \"https://api.cloud.appcelerator.com/v1/objects/car/query.json?key=&pretty_json=true&count=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"queryCustomObjects\", \"count\": 100 }, \"response\": { \"car\": [ { \"color\": \"blue\", \"make\": \"toyota\", \"purchased_at\": \"2011-11-19T00:07:37+0000\", \"year\": 2011, \"new\": false, \"coordinates\": [ [ -122.3, 37.2 ] ], \"id\": \"4ec563d4d9ca72d25d000012\", \"created_at\": \"2011-11-17T19:43:16+0000\", \"updated_at\": \"2011-11-17T19:43:16+0000\" }, { \"color\": \"blue\", \"purchased_at\": \"2011-11-03T00:07:37+0000\", \"coordinates\": [ [ -122.1, 37.1 ] ], \"id\": \"4ec42db6d9ca72c50700000b\", \"created_at\": \"2011-11-16T21:40:06+0000\", \"updated_at\": \"2011-11-16T21:40:06+0000\" } ] } } Appcelerator Cloud Services iOS SDK provided a CCWhere class to build where clause in query easily. First you need to instantiate a CCWhere object: CCWhere *where = [[[CCWhere alloc] init] autorelease]; Then you can add your query constrains by calling one of the following methods: -(void)fieldName:(NSString *)fieldName lessThan:(NSObject *)value; -(void)fieldName:(NSString *)fieldName greaterThan:(NSObject *)value; -(void)fieldName:(NSString *)fieldName equalTo:(NSObject *)value; -(void)fieldName:(NSString *)fieldName notEqualTo:(NSObject *)value; -(void)fieldName:(NSString *)fieldName lessThanEqualTo:(NSObject *)value; -(void)fieldName:(NSString *)fieldName greaterThanEqualTo:(NSObject *)value; -(void)fieldName:(NSString *)fieldName containedIn:(NSArray *)values; -(void)fieldName:(NSString *)fieldName notContainedIn:(NSArray *)values; -(void)fieldName:(NSString *)fieldName regex:(NSString *)value; -(void)fieldName:(NSString *)fieldName nearLat:(double)latitude nearLng:(double)longitude; -(void)fieldName:(NSString *)fieldName nearLat:(double)latitude nearLng:(double)longitude maxDistanceKm:(double)distanceKm; -(void)fieldName:(NSString *)fieldName nearLat:(double)latitude nearLng:(double)longitude maxDistanceMi:(double)distanceMi; The first parameter is the name of the field you want to query on. Then set the where object along with other query parameters in the paramDict for CCRequest. paramDict = [NSDictionary dictionaryWithObjectsAndKeys:where, @\"where\", @\"mileage,-purchased_at\", @\"order\", nil]; ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"classname\": @\"cars\", @\"page\": @1, @\"per_page\": @10, @\"where\": @{ @\"color\": @\"blue\" } }; [APSObjects query:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu cars\", (unsigned long)((NSArray *)e.response[@\"cars\"]).count]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap; JSONObject params = new JSONObject(\"{'color': 'blue'}\"); data.put(\"where\", params); data.put(\"classname\", \"cars\"); try { APSObjects.query(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray classname = e.getResponse().getJSONArray(\"classname\"); if (classname.length() nodejs For Node.js calls, pass the class name to the classname property of the parameters object: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.customObjectsQuery({ classname: 'cars', limit: 10, where: { color: 'blue' } }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.cars.forEach(function(car) { console.log(car); }); } }); "
    },
    {
        "id": "CustomObjects-method-show-arrowdb",
        "url": "CustomObjects-method-show",
        "type": "arrowdb",
        "name": "CustomObjects.show",
        "content": "Show a custom object's info. GET objects/:classname/show.json classname Type of custom object. Specified as part of the URL path, not in the parameters. id The object ID of the custom object to show. You must specify either id or ids. ids A comma-separated list of object IDs of the custom objects to show. You must specify either id or ids. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. show_user_like If set to true the CustomObject in the response will include \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked field is not included in the response. return void titanium This example requests information about custom objects and checks the response. Cloud.Objects.show({ classname: 'cars', ids: [ savedCar1.id, savedCar2.id ] }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.cars.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X GET --data-urlencode 'ids=4ec42e91d9ca72c507000010,4ec42de1d9ca72c50700000d' \"https://api.cloud.appcelerator.com/v1/objects/car/show.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"showObjects\" }, \"response\": { \"car\": [ { \"color\": \"blue\", \"make\": \"nissan\", \"purchased_at\": \"2011-11-03T00:07:37+0000\", \"year\": 2005, \"used\": false, \"coordinates\": [ [ -122.1, 37.1 ] ], \"id\": \"4ec42de1d9ca72c50700000d\", \"created_at\": \"2011-11-16T21:40:49+0000\", \"updated_at\": \"2011-11-16T21:40:49+0000\" }, { \"color\": \"red\", \"make\": \"honda\", \"purchased_at\": \"2011-11-09T00:07:37+0000\", \"year\": 2011, \"new\": false, \"coordinates\": [ [ -123.1, 38.1 ] ], \"id\": \"4ec42e91d9ca72c507000010\", \"created_at\": \"2011-11-16T21:43:45+0000\", \"updated_at\": \"2011-11-16T21:43:45+0000\" } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"classname\": @\"cars\", @\"ids\": @[car1ID, car2ID] }; [APSObjects show:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Show %lu cars\", (unsigned long)((NSArray *)e.response[@\"cars\"]).count]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"ids\", \"4ec42e91d9ca72c507000010,4ec42de1d9ca72c50700000d\"); data.put(\"classname\", \"cars\"); try { APSObjects.show(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { Toast.makeText(currentActivity, e.getResponseString(), Toast.LENGTH_SHORT); } catch (APSCloudException err) { Log.e(\"APSObjects\", \"Exception thrown: \" + err.toString()); } } else { Log.e(\"APSObjects\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSObjects\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSObjects\", \"Exception thrown: \" + e.toString()); } nodejs For Node.js calls, pass the class name to the classname property of the parameters object: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.customObjectsShow({ classname: 'cars', ids: [ savedCar1.id, savedCar2.id ] }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.cars.forEach(function(car) { console.log(car); }); } }); "
    },
    {
        "id": "CustomObjects-method-update-arrowdb",
        "url": "CustomObjects-method-update",
        "type": "arrowdb",
        "name": "CustomObjects.update",
        "content": "Any of the same parameters as Create Custom Object can be used to update a custom object. Only the owner of the object or user who is entitled write permission(ACL) to the object can update the object. Application Admin can update any Custom Object. PUT objects/:classname/update.json id The object ID of the custom object to update. classname Type of custom object. Specified as part of the URL path, not in the parameters. fields JSON encoding of object fields to update. If any of the fields do not exist in the current object, they will be added. To delete an existing field, use {\"field_name\" : null}. For example, the car object created in CustomObject.create is: { \"make\": \"nissan\", \"color\": \"blue\", \"year\": 2005, \"purchased_at\": \"2011-11-02 17:07:37 -0700\", \"used\": false, \"coordinates\": [-122.1, 37.1] } To change color, remove the purchased_at field and add a new field mileage, you could pass the following JSON object to fields: { \"color\": \"purple\", \"purchased_at\": null, \"mileage\": 10000 } tags Comma-separated list of tags to associate with this object, for example, \"hiking,swiming.\" Replaces any existing tags. If the tags parameter is omitted and a tags key is included in the fields dictionary, fields.tags will be used instead. photo New photo to attach as the primary photo for the object. When you use the photo parameter to attach a new photo, you can use the custom resize and sync options. photo_id ID of an existing photo to attach as the primary photo for the object. acl_name Name of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id User to update the Custom object on behalf of. The user must be the creator of the object. The current user must be an application admin to update a Custom object on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example updates a custom object and checks the response. Cloud.Objects.update({ classname: 'cars', id: savedCar1.id, fields: { color: 'purple', mileage: 10000 } }, function (e) { if (e.success) { var car = e.cars[0]; alert('Success:\\n' + 'id: ' + car.id + '\\n' + 'make: ' + car.make + '\\n' + 'color: ' + car.color + '\\n' + 'year: ' + car.year + '\\n' + 'mileage: ' + car.mileage + '\\n' + 'updated_at: ' + car.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X PUT --data-urlencode 'fields={\"color\":\"purple\", \"purchased_at\":null, \"mileage\":10000}' \"https://api.cloud.appcelerator.com/v1/objects/car/update.json?key=&pretty_json=true&id=4ec42de1d9ca72c50700000d\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"updateCustomObject\" }, \"response\": { \"car\": [ { \"make\": \"nissan\", \"year\": 2005, \"used\": false, \"color\": \"purple\", \"mileage\": 10000, \"coordinates\": [ [ -122.1, 37.1 ] ], \"id\": \"4ec42de1d9ca72c50700000d\", \"created_at\": \"2011-11-16T21:40:49+0000\", \"updated_at\": \"2011-11-16T22:25:23+0000\" } ] } } Update is almost the same as create. If you wish to remove a field, you can set the field to NSNull. ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"classname\": @\"cars\", @\"id\": savedCarID, @\"fields\": @{ @\"color\": @\"purple\", @\"mileage\": @10000 } }; [APSObjects update:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"id: %@\", ((NSArray *)e.response[@\"cars\"])[0][@\"id\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; JSONObject fields = new JSONObject(\"{'color': 'purple', 'purchased_at': null, 'mileage': 10000}\"); HashMap data = new HashMap(); data.put(\"id\", \"4ec42e91d9ca72c507000010\"); data.put(\"classname\", \"cars\"); data.put(\"fields\", fields); try { APSObjects.update(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Updated!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSObjects\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSObjects\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSObjects\", \"Exception thrown: \" + e.toString()); } nodejs For Node.js calls, pass the class name to the classname property of the parameters object: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.customObjectsUpdate({ classname: 'cars', id: savedCar1.id, fields: { color: 'purple', mileage: 10000 } }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.cars.forEach(function(car) { console.log(car); }); } }); "
    },
    {
        "name": "Emails",
        "id": "Emails-arrowdb",
        "url": "Emails",
        "type": "arrowdb",
        "content": "Emails The email_from_template method lets you send customized emails to your users. You can send plain text, HTML, or multi-part emails. Before you can use this method, you must first do the following: Configure your Email settings in Dashboard, or the Settings tab in My Apps. Create at least one email template, which may contain a plain-text body, an HTML-formatted body, or both. See Managing Email Templates for details on creating an email template. When you call email_from_template, you specify the name of the template, to use, the email recipient(s), and optionally the content type to use when sending the email (plain, HTML, or multi-part). Using placeholder fields The template's subject and body can contain placeholder fields delineated by double curly brackets ({{}}). You include a parameter for each placeholder field in the method call specifying the value to insert. For example, if your email template's subject field contains Hi {{first_name}}!, you would include a parameter named first_name, as shown below: curl -F \"recipients=joe@company.com\" -F \"template=welcome\" -F \"first_name=Joe\" https://api.cloud.appcelerator.com/v1/custom_mailer/email_from_template.json?key= "
    },
    {
        "id": "Emails-method-count-arrowdb",
        "url": "Emails-method-count",
        "type": "arrowdb",
        "name": "Emails.count",
        "content": "Retrieves the total number of email templates. GET email_templates/count.json return void titanium Example request to retrieve the total number of email templates. Cloud.sendRequest({ url : \"email_templates/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/email_templates/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"email_templatesCount\", \"count\": 1 } } ios Example request to retrieve the total number of Email objects. [[APSCloud sharedInstance] sendRequest:@\"emails/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of Email objects. APSCloud.getInstance().sendRequest(\"emails/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.emailsCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "Emails-method-email_from_template-arrowdb",
        "url": "Emails-method-email_from_template",
        "type": "arrowdb",
        "name": "Emails.email_from_template",
        "content": "Sends an email to a list of email addresses you specify. When sending an email, you specify the name of an email template created in Dashboard (see Managing Email Templates), and one or more email recipients. You can optionally specify the email content type ( HTML, plain-text, or multipart), as well as values for any placeholder fields defined by the template. The below examples demonstrate these concepts. An email template's body can contain HTML-formatted or plain-text content , or both. When you send an email, you can specify whether the email should be sent as HTML, plain text, or multipart using the content_type parameter. A multipart email contains both the plain text and HTML versions; which version is displayed is determined by the recipient's email client. If the content_type parameter is not provided in the request, the format is automatically chosen based on the following rules: If the email template contains both HTML and plain-text bodies, it will be sent in a multipart format. If the email template contains only an HTML body, it will be sent in an HTML format. If the email template contains only a plain-text body. it will be sent in plain-text format. If the content_type parameter is provided in the request, then the following must be true: If content_type is \"html\", then the email template must define an HTML body. If content_type is \"plain\", then the email template must define a plain text body. If content_type is \"multipart\", then the email template must define both HTML and plain text body. POST custom_mailer/email_from_template.json template Name of the email template you have created. recipients Comma separated list of email addresses. content_type Specifies the email's content-type. The following values are valid: \"plain\" If specified, the email template must define a plain text body. \"html\" If specified, the email template must define an HTML body. \"multipart\" If specified, the email template must define both a plain text and HTML body. See Managing Email Templates for details on creating email templates. from The sender's email address. Notes: If you use Google as your SMTP server, the email will always be sent using the email account you used to configure the SMTP service. Some SMTP service provider require the sender's email address to be present. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example sends an Email to \"joe@company.com\" using an email template named \"welcome\" that defines a plain-text body with the following content, including a placeholder field named {{first_name}}: Welcome {{first_name}}, Thanks for signing up! The Management In addition to the recipient and email template, the Cloud.Emails.send() method also specifies a value for the {{first_name}} placeholder: Cloud.Emails.send({ template: 'welcome', recipients: 'joe@company.com', first_name: \"Joe\" }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest This example sends an Email to \"joe@company.com\" using an email template named \"welcome\" that defines a plain-text body with the following content, including a placeholder field named {{first_name}}: Welcome {{first_name}}, Thanks for signing up! The Management Below is an example cURL request that specifies the email template to use, recipient, and value to insert in the {{first_name}} placeholder field. $ curl -b cookies.txt -c cookies.txt -F \"first_name=Joe\" \"recipients=joe@company.com\" -F \"template=welcome\" https://api.cloud.appcelerator.com/v1/custom_mailer/email_from_template.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"emailFromTemplate\" } } ios This example sends an Email to \"joe@company.com\" using an email template named \"welcome\" that defines a plain-text body with the following content, including a placeholder field named {{first_name}}: Welcome {{first_name}}, Thanks for signing up! The Management Example iOS APS SDK call that specifies the email template to use, recipient, and value to insert in the {{first_name}} placeholder field: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"template\": @\"welcome\", @\"recipients\": @\"joe@company.com\", @\"first_name\": @\"Joe\" }; [APSEmails send:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android This example sends an Email to \"joe@company.com\" using an email template named \"welcome\" that defines a plain-text body with the following content, including a placeholder field named {{first_name}}: Welcome {{first_name}}, Thanks for signing up! The Management Example Android APS SDK call that specifies the email template to use, recipient, and value to insert in the {{first_name}} placeholder field: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"recipients\", \"joe@company.com\"); data.put(\"template\", \"welcome\"); data.put(\"first_name\", \"Joe\"); try { APSEmails.send(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Alert\").setMessage(\"Sent!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSEmail\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSEmails\", \"Exception thrown: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSEmails\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.emailsSend({ template: 'welcome', recipients: 'joe@company.com', first_name: \"Joe\" }, function(err, result) { if (err) { console.error(err.message); } else { console.log('E-mail sent!'); } }); "
    },
    {
        "name": "Events",
        "id": "Events-arrowdb",
        "url": "Events",
        "type": "arrowdb",
        "content": "Events The Events API provides methods to create and manage events. Events can be one-time or recurring. "
    },
    {
        "id": "Events-property-acls-arrowdb",
        "url": "Events-property-acls",
        "type": "arrowdb",
        "name": "Events.acls",
        "content": "Array of ACLs associated with this object. ACLs[]"
    },
    {
        "id": "Events-property-created_at-arrowdb",
        "url": "Events-property-created_at",
        "type": "arrowdb",
        "name": "Events.created_at",
        "content": "Event creation timestamp. Date"
    },
    {
        "id": "Events-property-custom_fields-arrowdb",
        "url": "Events-property-custom_fields",
        "type": "arrowdb",
        "name": "Events.custom_fields",
        "content": "User defined fields. See Custom Data Fields. Hash"
    },
    {
        "id": "Events-property-details-arrowdb",
        "url": "Events-property-details",
        "type": "arrowdb",
        "name": "Events.details",
        "content": "Description of the event. String"
    },
    {
        "id": "Events-property-duration-arrowdb",
        "url": "Events-property-duration",
        "type": "arrowdb",
        "name": "Events.duration",
        "content": "Event duration, in seconds. Number"
    },
    {
        "id": "Events-property-ical-arrowdb",
        "url": "Events-property-ical",
        "type": "arrowdb",
        "name": "Events.ical",
        "content": "Event time and recurrence in iCalendar (RFC 5545) format. String"
    },
    {
        "id": "Events-property-id-arrowdb",
        "url": "Events-property-id",
        "type": "arrowdb",
        "name": "Events.id",
        "content": "Generated unique ID for this event. String"
    },
    {
        "id": "Events-property-name-arrowdb",
        "url": "Events-property-name",
        "type": "arrowdb",
        "name": "Events.name",
        "content": "Event name. String"
    },
    {
        "id": "Events-property-photo-arrowdb",
        "url": "Events-property-photo",
        "type": "arrowdb",
        "name": "Events.photo",
        "content": "Primary photo for the event. Photos"
    },
    {
        "id": "Events-property-place-arrowdb",
        "url": "Events-property-place",
        "type": "arrowdb",
        "name": "Events.place",
        "content": "Event location. Places"
    },
    {
        "id": "Events-property-recurring-arrowdb",
        "url": "Events-property-recurring",
        "type": "arrowdb",
        "name": "Events.recurring",
        "content": "Recurrence schedule. Can take the following values: \"daily\", \"weekly\", \"monthly\", or \"yearly\". String"
    },
    {
        "id": "Events-property-recurring_count-arrowdb",
        "url": "Events-property-recurring_count",
        "type": "arrowdb",
        "name": "Events.recurring_count",
        "content": "Number of occurrences for the event. Number"
    },
    {
        "id": "Events-property-recurring_until-arrowdb",
        "url": "Events-property-recurring_until",
        "type": "arrowdb",
        "name": "Events.recurring_until",
        "content": "Date of last recurrence. Date"
    },
    {
        "id": "Events-property-start_time-arrowdb",
        "url": "Events-property-start_time",
        "type": "arrowdb",
        "name": "Events.start_time",
        "content": "Event start time. Date"
    },
    {
        "id": "Events-property-tags-arrowdb",
        "url": "Events-property-tags",
        "type": "arrowdb",
        "name": "Events.tags",
        "content": "Array of tags associated with this event. String[]"
    },
    {
        "id": "Events-property-updated_at-arrowdb",
        "url": "Events-property-updated_at",
        "type": "arrowdb",
        "name": "Events.updated_at",
        "content": "Event modification timestamp. Date"
    },
    {
        "id": "Events-property-user-arrowdb",
        "url": "Events-property-user",
        "type": "arrowdb",
        "name": "Events.user",
        "content": "Event owner. Users"
    },
    {
        "id": "Events-method-batch_delete-arrowdb",
        "url": "Events-method-batch_delete",
        "type": "arrowdb",
        "name": "Events.batch_delete",
        "content": "Deletes Events objects that match the query constraints provided in the where parameter. If no where parameter is provided, all Events objects are deleted. Note that an HTTP 200 code (success) is returned if the call completed successfully but the query matched no objects. For performance reasons, the number of objects that can be deleted in a single batch delete operation is limited to 100,000. The matched objects are deleted asynchronously in a separate process. Any Place associated with the matched objects are not deleted. You must be an application admin to run this command. DELETE events/batch_delete.json where Encoded JSON object that specifies constraint values for Events objects to delete. If not specified, all Events objects are deleted. return void titanium Example request to delete all Event objects. Cloud.sendRequest({ url : \"events/batch_delete.json\", method : \"DELETE\" }, function(e) { if (e.success) { alert(\"All Event objects have been deleted.\"); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE -F \"where={\\\"favorite_color\\\":\\\"blue\\\"}\" https://api.cloud.appcelerator.com/v1/events/batch_delete.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"batchDelete\" } } ios Example request to delete all Event objects. [[APSCloud sharedInstance] sendRequest:@\"events/batch_delete.json\" method:@\"DELETE\" data:nil handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"All Event object have been deleted.\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to delete all Event objects. APSCloud.getInstance().sendRequest(\"events/batch_delete.json\", \"DELETE\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"All Event objects have been deleted.\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.eventsBatchDelete(function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Events-method-count-arrowdb",
        "url": "Events-method-count",
        "type": "arrowdb",
        "name": "Events.count",
        "content": "Retrieves the total number of Event objects. GET events/count.json return void titanium Example request to retrieve the total number of Event objects. Cloud.sendRequest({ url : \"events/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/events/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"eventsCount\", \"count\": 1 } } ios Example request to retrieve the total number of Event objects. [[APSCloud sharedInstance] sendRequest:@\"events/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of Event objects. APSCloud.getInstance().sendRequest(\"events/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.eventsCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "Events-method-create-arrowdb",
        "url": "Events-method-create",
        "type": "arrowdb",
        "name": "Events.create",
        "content": "Create an event. Times given with time zones other than UTC (for example PST during daylight savings is -0700) will be converted to UTC. An ical string will be returned to represent the occurrences of the event. For the event that is set as a recurring event, once created, there will be several \"event occurrences\" created associating with the event object on server side, one \"event occurrence\" represents a single occurrence of the recurring event. An \"event occurrence\" contains start and end time of the event's occurrence which are calculated according to the \"recurring\" settings of the event object. Instead of computing actual individual occurrences of a recurring event on the client side, you can use event occurrences query api to get a list of occurrences associated of a repeating event. To get all occurrences for a recurring event object, you can call show_occurrences event occurrence](/docs/api/v1/events/show_occurrences) and pass in the event's id. POST events/create.json name Event name. start_time Event start time. details Description of the event. duration Event duration, in seconds. recurring Recurrance schedule. Can take the following values: \"daily\", \"weekly\", \"monthly\", or \"yearly\". Must be used together with recurring_count or recurring_until to limit the number of occurances. The total number of occurrences of an event in either case is limited to 1000. recurring_count Number of occurrences for the event. recurring_until Date of last recurrance. place_id ID for the Places where the event takes place. photo New photo to attach as the primary photo for the event. When you use the photo parameter to attach a new photo, you can use the custom resize and sync options. photo_id ID of an existing photo to attach as the primary photo for the event. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this event. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this event. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. tags Comma-separated list of tags associated with this event. su_id User ID to create the event on behalf of. The current login user must be an application admin to create an event on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example creates a new event and checks the response. Cloud.Events.create({ name: 'Celebration', start_time: starttime, duration: 3600, recurring: 'monthly', recurring_count: 5 }, function (e) { if (e.success) { var event = e.events[0]; alert('Success:\\n' + 'id: ' + event.id + '\\n' + 'name: ' + event.name + '\\n' + 'updated_at: ' + event.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"name=Appcelerator Meetup Group\" -F \"photo=@photo.jpg\" -F \"place_id=4d7e62d6d0afbe04170000a4\" -F \"start_time=2011-03-22T20:59:50+0000\" -F \"duration=3600\" https://api.cloud.appcelerator.com/v1/events/create.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"createEvent\" }, \"response\": { \"events\": [ { \"id\":\"4d870f8bd0afbe1074000017\", \"name\":\"Appcelerator Meetup Group\", \"created_at\":\"2011-03-21T08:42:51+0000\", \"updated_at\":\"2011-03-21T08:42:51+0000\", \"start_time\": \"2011-03-22T20:59:50+0000\", \"duration\": 3600, \"created_at\": \"2011-09-12T20:07:23+0000\", \"updated_at\": \"2011-09-12T20:07:23+0000\", \"ical\": \"DTSTART:20110322T205950Z\\nDURATION:PT1H\\nRRULE:FREQ=WEEKLY;COUNT=10\", \"recurring\": \"weekly\", \"recurring_count\": 10, \"num_occurrences\": 10, \"user\": { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" }, \"place\": { \"id\":\"4d7e62d6d0afbe04170000a4\", \"name\":\"Maya Restaurant\", \"created_at\":\"2011-03-14T18:47:50+0000\", \"updated_at\":\"2011-03-14T18:47:50+0000\", \"address\":\"303 2nd Street\", \"city\":\"San Francisco\", \"state\":\"CA\", \"country\":\"United States\", \"phone\":\"(415) 543-2928\", \"latitude\":37.784732, \"longitude\":-122.395441 }, \"photo\": { \"id\":\"4dcf5385d0afbe1833000009\", \"filename\":\"photo.jpg\", \"size\":584344, \"md5\":\"589b8ad43ed20bf8e622d719642bc939\", \"created_at\":\"2011-05-15T04:16:05+0000\", \"updated_at\":\"2011-05-15T04:16:05+0000\", \"processed\":false } } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"name\": @\"Celebration\", @\"start_time\": @\"2011-05-15T04:16:05+0000\", @\"duration\": @3600, @\"recurring\": @\"monthly\", @\"recurring_count\": @5 }; [APSEvents create:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"start_time\", \"2011-03-22T20:59:50+0000\"); data.put(\"duration\", \"3600\"); data.put(\"name\", \"Appcelerator Meetup Group\"); data.put(\"place_id\", \"4d7e62d6d0afbe04170000a4\"); try { APSEvents.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Created!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSEvents\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSEvents\", e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSEvents\", e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.eventsCreate({ name: 'Celebration', start_time: starttime, duration: 3600, recurring: 'monthly', recurring_count: 5 }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.events[0]); } }); "
    },
    {
        "id": "Events-method-delete-arrowdb",
        "url": "Events-method-delete",
        "type": "arrowdb",
        "name": "Events.delete",
        "content": "Delete the event with the given id. Only the original submitter can delete the event. The Place associated with the object is not deleted. Application Admin can delete any Event object. DELETE events/delete.json event_id ID of the event to delete. su_id User to delete the Event object on behalf of. The user must be the creator of the object. The current user must be an application admin to delete an Event object on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example deletes a event and checks the response. Cloud.Events.remove({ event_id: savedEventId }, function (e) { if (e.success) { alert('Removed'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/events/delete.json?key=&pretty_json=true&event_id=4d86d26ed0afbe107400000f\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"deleteEvent\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"event_id\": savedEventId }; [APSEvents remove:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"event_id\", \"4d7e62d6d0afbe04170000a4\"); try { APSEvents.remove(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSEvents\", \"Removed!\"); } else { Log.e(\"APSEvents\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSEvents\", e.toString()); } }); } catch (APSClientError e) { Log.e(\"APSEvents\", e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.eventsDelete({ event_id: savedEventId }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Events-method-query-arrowdb",
        "url": "Events-method-query",
        "type": "arrowdb",
        "name": "Events.query",
        "content": "Perform custom query of events with sorting and paginating. Currently you can not query or sort data stored inside array or hash in custom fields. In ArrowDB 1.1.5 and later, you can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. In addition to the custom fields, you can query the following event fields: Name Type Summary name String Event's name user_id String Event owner's user ID place_id String If an event belongs to a place, the associated place_id tags_array Array Array of tags assigned to the Event. start_time Time Start time of an event num_occurences Integer Number of time the event repeats lnglat Geo location array - [longitude, latitude] If an event belongs to a place, you can use lnglat to query events by place location created_at Date Timestamp when the event was created updated_at Date Timestamp when the event was last updated For details about using the query parameters, see the Search and Query guide. GET events/query.json page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. This parameter is only available to ArrowDB applications created before ArrowDB 1.1.5. Applications created with ArrowDB 1.1.5 and later must use ranged-based queries queries to paginate their queries. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. where Constraint values for fields. where should be encoded JSON. If where is not specified, query returns all objects. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. show_user_like If set to true, each Event in the response includes \"current_user_liked: true\" if the current user has liked the object. If the current user has not liked the object, the current_user_liked field is not included in the response. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests a list of events and checks the response. Cloud.Events.query(function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.events.length); for (var i = 0; i rest Example cURL request that queries events with name \"meetup\" near latitude 37.12, longitude -122.23 within 5 miles: $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode 'where={\"name\":\"meetup\",\"lnglat\":{\"$nearSphere\":[-122.23,37.12], \"$maxDistance\" : 0.00126}}' \"https://api.cloud.appcelerator.com/v1/events/query.json?key=&pretty_json=true&count=true\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"queryEvents\", \"count\": 100 }, \"response\": { \"events\": [ { \"id\":\"4d870f8bd0afbe1074000017\", \"name\":\"meetup\", \"start_time\":\"2011-03-22T04:00:00+0000\", \"created_at\":\"2011-03-21T08:42:51+0000\", \"updated_at\":\"2011-03-21T08:42:51+0000\" \"user\": { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" }, \"place\": { \"id\":\"4d7e62d6d0afbe04170000a4\", \"name\":\"Maya Restaurant\", \"created_at\":\"2011-03-14T18:47:50+0000\", \"updated_at\":\"2011-03-14T18:47:50+0000\", \"address\":\"303 2nd Street\", \"city\":\"San Francisco\", \"state\":\"CA\", \"country\":\"United States\", \"phone\":\"(415) 543-2928\", \"latitude\":37.784732, \"longitude\":-122.395441 } } ] } } ios Example iOS APS SDK call: [APSEvents query:nil withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu events\", (unsigned long)((NSArray *)e.response[@\"events\"]).count]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap; JSONObject params = new JSONObject(\"{'name':'meetup','lnglat':{'$nearSphere':[-122.23,37.12], '$maxDistance' : 0.00126}}\"); data.put(\"where\", params); try { APSEvents.query(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray events = e.getResponse().getJSONArray(\"events\"); for (int i = 0; i nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.eventsQuery({ where: { name:\"meetup\", lnglat: { '$nearSphere':[-122.23,37.12], '$maxDistance' : 0.00126 } } }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.events.forEach(function(evt) { console.log(evt); }); } }); "
    },
    {
        "id": "Events-method-query_occurrences-arrowdb",
        "url": "Events-method-query_occurrences",
        "type": "arrowdb",
        "name": "Events.query_occurrences",
        "content": "Perform custom query of event occurrences with sorting and paginating. Currently, you can not query or sort data stored inside array or hash in custom fields. In addition to custom fields, you can query the following fields: Name Type Summary name String Event's name user_id String Event owner's user id place_id String If an event belongs to a place, the associated place_id start_time Time Start time of an event occurrence end_time Time End time of an event occurrence lnglat Geo location array - [longitude, latitude] If an event belongs to a place, you can use lnglat to query events by place location For details about using the query parameters, see the Search and Query guide. GET events/query/occurrences.json page Request page number, default is 1. This parameter is only available to ArrowDB applications created before ArrowDB 1.1.5. Applications created with ArrowDB 1.1.5 and later must use ranged-based queries queries to paginate their queries. per_page Number of results per page, default is 10. This parameter is only available to ArrowDB applications created before ArrowDB 1.1.5. Applications created with ArrowDB 1.1.5 and later must use ranged-based queries queries to paginate their queries. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. skip Number of records to skip. Must be used together with limit. The specified value must not be less than 0 or an HTTP 400 error will be returned. where Constraint values for fields. where should be encoded JSON. If where is not specified, query returns all objects. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example retrieves a list of event occurrences and checks the response. Cloud.Events.queryOccurrences(function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.event_occurrences.length); for (var i = 0; i rest Example cURL request that queries event occurrences with name \"meetup\" near latitude 37.12, longitude -122.23 within 5 miles $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode 'where={\"name\":\"meetup\",\"lnglat\":{\"$nearSphere\":[-122.23,37.12], \"$maxDistance\" : 0.00126}}' \"https://api.cloud.appcelerator.com/v1/events/query/occurrences.json?key=&pretty_json=true&count=true\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"queryEventOccurrences\", \"count\": 100 }, \"response\": { \"event_occurrences\": [ { \"start_time\": \"2011-03-22T20:59:50+0000\", \"end_time\": \"2011-03-22T21:59:50+0000\", \"event\": { \"id\": \"4e932f74ad44939896000054\", \"name\": \"meetup\", \"start_time\": \"2011-03-22T20:59:50+0000\", \"duration\": 3600, \"created_at\": \"2012-01-31T04:52:02+0000\", \"updated_at\": \"2012-01-31T04:52:02+0000\", \"ical\": \"DTSTART:20110322T205950Z\\nDURATION:PT1H\\nRRULE:FREQ=DAILY;COUNT=3\", \"recurring\": \"daily\", \"recurring_count\": 3, \"recurring_until\": \"2011-03-26T20:59:50+0000\", \"num_occurrences\": 3, \"details\": \"food\", \"user\": { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" }, \"place\": { \"id\":\"4d7e62d6d0afbe04170000a4\", \"name\":\"Maya Restaurant\", \"created_at\":\"2011-03-14T18:47:50+0000\", \"updated_at\":\"2011-03-14T18:47:50+0000\", \"address\":\"303 2nd Street\", \"city\":\"San Francisco\", \"state\":\"CA\", \"country\":\"United States\", \"phone\":\"(415) 543-2928\", \"latitude\":37.784732, \"longitude\":-122.395441 } } } ] } } ios Example iOS APS SDK call: [APSEvents queryOccurrences:nil withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu event_occurrences\", (unsigned long)((NSArray *)e.response[@\"event_occurrences\"]).count]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); JSONObject params = new JSONObject(\"{'name':'meetup','lnglat':{'$nearSphere':[-122.23,37.12], '$maxDistance' : 0.00126}}\"); data.put(\"where\", params); try { APSEvents.queryOccurrences(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { Log.i(\"APSEvents\", e.getResponseString()); } catch (APSCloudException e1) { Log.e(\"APSEvents\", e1.toString()); } } else { Log.e(\"APSEvents\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSEvents\", e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSEvents\", e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.eventsQueryOccurrences({ where: { name:\"meetup\", lnglat: { '$nearSphere':[-122.23,37.12], '$maxDistance' : 0.00126 } } }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.event_occurrences.forEach(function(evt) { console.log(evt); }); } }); "
    },
    {
        "id": "Events-method-search-arrowdb",
        "url": "Events-method-search",
        "type": "arrowdb",
        "name": "Events.search",
        "content": "Full text search of events. Optionally, latitude and longitude can be given to return the list of events starting from a particular location (location is retrieved from place if the event is associated with a place). To bound the results within a certain radius (in km) from the starting coordinates, add the distance parameter. q can be given to search by event name. GET events/search.json page Request page number, default is 1. per_page Number of results per page, default is 10. place_id Restrict search results to events located in the identified Places. user_id Restrict search results to events owned by the identified Users. latitude Latitude of the search starting point. longitude Longitude of the search starting point. distance Maximum distance in km from the starting point identified by longitude, latitude`. start_time Only return events that start on or after start_time. q Space-separated list of keywords, used to perform full text search on event name and tags. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example searches for events near a specified location. Cloud.Events.search({ latitude: lat, longitude: lon }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.events.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/events/search.json?key=&pretty_json=true&place_id=4d7e62d6d0afbe04170000a4\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"searchEvents\", \"page\":1, \"per_page\":10, \"total_pages\":1, \"total_results\":1 }, \"response\": { \"events\": [ { \"id\": \"4e932f74ad44939896000054\", \"name\": \"Appcelerator Cloud Services\", \"start_time\": \"2011-10-10T17:43:00+0000\", \"duration\": 3000, \"created_at\": \"2011-10-10T17:46:29+0000\", \"updated_at\": \"2011-10-10T17:46:29+0000\", \"ical\": \"DTSTART:20111010T174300Z\\nDURATION:PT50M\\nRRULE:FREQ=WEEKLY;COUNT=5\", \"recurring\": \"weekly\", \"recurring_count\": 5, \"recurring_until\": \"2011-10-10T17:43:00+0000\", \"num_occurrences\": 5, \"details\": \"food\", \"user\": { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" }, \"place\": { \"id\":\"4d7e62d6d0afbe04170000a4\", \"name\":\"Maya Restaurant\", \"created_at\":\"2011-03-14T18:47:50+0000\", \"updated_at\":\"2011-03-14T18:47:50+0000\", \"address\":\"303 2nd Street\", \"city\":\"San Francisco\", \"state\":\"CA\", \"country\":\"United States\", \"phone\":\"(415) 543-2928\", \"latitude\":37.784732, \"longitude\":-122.395441 } } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"latitude\": lat, @\"longitude\": lon }; [APSEvents search:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu events\", (unsigned long)((NSArray *)e.response[@\"events\"]).count]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); data.put(\"place_id\", \"4d7e62d6d0afbe04170000a4\"); try { APSEvents.search(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray events = e.getResponse().getJSONArray(\"events\"); final ArrayList objectsList = new ArrayList(); for (int i = 0; i nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.eventsSearch({ latitude: lat, longitude: long }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.events.forEach(function(evt) { console.log(evt); }); } }); "
    },
    {
        "id": "Events-method-search_occurrences-arrowdb",
        "url": "Events-method-search_occurrences",
        "type": "arrowdb",
        "name": "Events.search_occurrences",
        "content": "Full text search of event occurrences. Optionally, latitude and longitude can be given to return the list of event occurrences starting from a particular location (location is retrieved from place if the event is associated with a place). To bound the results within a certain radius (in km) from the starting coordinates, add the distance parameter. q can be given to search by event name. GET events/search/occurrences.json page Request page number, default is 1. per_page Number of results per page, default is 10. place_id Restrict search results to events located in the identified Places. user_id Restrict search results to events owned by the identified Users. latitude Latitude of the search starting point. longitude Longitude of the search starting point. distance Maximum distance in km from the starting point identified by longitude, latitude`. start_time Only return events that start on or after start_time. end_time Only return events that end on or before end_time. q Space-separated list of keywords, used to perform full text search on event name and tags. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example retrieves a list of event occurrences and checks the response. Cloud.Events.searchOccurrences({ place_id: savedPlaceId, start_time: startTime }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.event_occurrences.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"http://api.cloud.appcelerator.com/v1/events/search/occurrences.json?key=&pretty_json=true&place_id=4d7e62d6d0afbe04170000a4\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"searchEventOccurrences\", \"page\":1, \"per_page\":10, \"total_pages\":1, \"total_results\":1 }, \"response\": { \"event_occurrences\": [ { \"start_time\": \"2011-03-22T20:59:50+0000\", \"end_time\": \"2011-03-22T21:59:50+0000\", \"event\": { \"id\": \"4f308b26c3666e22a0000019\", \"name\": \"test event 7\", \"start_time\": \"2011-03-22T20:59:50+0000\", \"duration\": 3600, \"created_at\": \"2012-02-07T02:23:34+0000\", \"updated_at\": \"2012-02-07T02:23:34+0000\", \"ical\": \"DTSTART:20110322T205950Z\\nDURATION:PT1H\\nRRULE:FREQ=DAILY;COUNT=3\", \"recurring\": \"daily\", \"recurring_count\": 3, \"recurring_until\": \"2011-03-26T20:59:50+0000\", \"num_occurrences\": 3, \"details\": \"test details\", \"user\": { \"id\": \"4f308b24c3666e22a0000002\", \"first_name\": \"Bob\", \"last_name\": \"Dude\", \"created_at\": \"2012-02-07T02:23:32+0000\", \"updated_at\": \"2012-02-07T02:23:34+0000\", \"external_accounts\": [ ], \"username\": \"bob\", \"email\": \"bob@dude.com\" }, \"place\": { \"id\": \"4f308b26c3666e22a0000017\", \"name\": \"test place\", \"created_at\": \"2012-02-07T02:23:34+0000\", \"updated_at\": \"2012-02-07T02:23:34+0000\", \"address\": \"test address\", \"city\": \"test city\", \"latitude\": 37.784732, \"longitude\": -122.393159 } } } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"place_id\": savedPlaceId, @\"start_time\": @\"2011-05-15T04:16:05+0000\" }; [APSEvents searchOccurrences:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu event_occurrences\", (unsigned long)((NSArray *)e.response[@\"event_occurrences\"]).count]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"place_id\", \"4d7e62d6d0afbe04170000a4\"); try { APSEvents.searchOccurrences(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { Log.i(\"APSEvents\", e.getResponseString()); } catch (APSCloudException e1) { Log.e(\"APSEvents\", e1.toString()); } } else { Log.e(\"APSEvents\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSEvents\", e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSEvents\", e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.eventsSearchOccurrences({ latitude: lat, longitude: long }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.event_occurrences.forEach(function(evt) { console.log(evt); }); } }); "
    },
    {
        "id": "Events-method-show-arrowdb",
        "url": "Events-method-show",
        "type": "arrowdb",
        "name": "Events.show",
        "content": "Show event(s) with the given IDs. GET events/show.json event_id ID of the event to delete. Either event_id or event_ids must be specified. event_ids Comma-separated list of event IDs to show. response_json_depth Nested object depth level counts in response JSON. In order to reduce server API calls from an application, the response JSON may include not just the identified objects, but also some important data related to the returning objects such as object's owner or referenced objects. Default is 1, valid range is 1 to 8. show_user_like If set to true the Event object in the response will include \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked field is not included in the response. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example retrieves information about a event and checks the response. Cloud.Events.show({ event_id: savedEventId }, function (e) { if (e.success) { var event = e.events[0]; alert('Success:\\n' + 'id: ' + event.id + '\\n' + 'name: ' + event.name + '\\n' + 'updated_at: ' + event.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/events/show.json?key=&pretty_json=true&event_id=4d870f8bd0afbe1074000017\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"showEvents\" }, \"response\": { \"events\": [ { \"id\": \"4e932f74ad44939896000054\", \"name\": \"Appcelerator Cloud Services\", \"start_time\": \"2011-10-10T17:43:00+0000\", \"duration\": 3000, \"created_at\": \"2011-10-10T17:46:29+0000\", \"updated_at\": \"2011-10-10T17:46:29+0000\", \"ical\": \"DTSTART:20111010T174300Z\\nDURATION:PT50M\\nRRULE:FREQ=WEEKLY;COUNT=5\", \"recurring\": \"weekly\", \"recurring_count\": 5, \"recurring_until\": \"2011-10-10T17:43:00+0000\", \"num_occurrences\": 5, \"details\": \"food\", \"user\": { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" }, \"place\": { \"id\":\"4d7e62d6d0afbe04170000a4\", \"name\":\"Maya Restaurant\", \"created_at\":\"2011-03-14T18:47:50+0000\", \"updated_at\":\"2011-03-14T18:47:50+0000\", \"address\":\"303 2nd Street\", \"city\":\"San Francisco\", \"state\":\"CA\", \"country\":\"United States\", \"phone\":\"(415) 543-2928\", \"latitude\":37.784732, \"longitude\":-122.395441 } } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"place_id\": savedPlaceId }; [APSEvents show:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu events\", (unsigned long)((NSArray *)e.response[@\"events\"]).count]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"event_id\", \"4d870f8bd0afbe1074000017\"); try { APSEvents.show(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { Log.i(\"APSEvents\", e.getResponseString()); } catch (APSCloudException e1) { Log.e(\"APSEvents\", e1.toString()); } } else { Log.e(\"APSEvents\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSEvents\", e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSEvents\", e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.eventsShow({ event_id: savedEventId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.events[0]); } }); "
    },
    {
        "id": "Events-method-show_occurrences-arrowdb",
        "url": "Events-method-show_occurrences",
        "type": "arrowdb",
        "name": "Events.show_occurrences",
        "content": "Show the event occurrences of an event with the given event_id. GET events/show/occurrences.json event_id ID of the event to show occurrences of. page Request page number, default is 1. per_page Number of results per page, default is 10. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example retrieves information about an event's occurrences and checks the response. Cloud.Events.showOccurrences({ event_id: savedEventId }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.event_occurrences.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/events/show/occurrences.json?key=&pretty_json=true&event_id=4d870f8bd0afbe1074000017\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"showEventOccurrences\", \"page\": 1, \"per_page\": 10, \"total_pages\": 1, \"total_results\": 1 }, \"response\": { \"event_occurrences\": [ { \"start_time\": \"2011-03-22T20:59:50+0000\", \"end_time\": \"2011-03-22T21:59:50+0000\", \"event\": { \"id\": \"4e932f74ad44939896000054\", \"name\": \"Appcelerator Cloud Services\", \"start_time\": \"2011-03-22T20:59:50+0000\", \"duration\": 3600, \"created_at\": \"2012-01-31T04:52:02+0000\", \"updated_at\": \"2012-01-31T04:52:02+0000\", \"ical\": \"DTSTART:20110322T205950Z\\nDURATION:PT1H\\nRRULE:FREQ=DAILY;COUNT=3\", \"recurring\": \"daily\", \"recurring_count\": 3, \"recurring_until\": \"2011-03-26T20:59:50+0000\", \"num_occurrences\": 3, \"details\": \"food\", \"user\": { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" }, \"place\": { \"id\":\"4d7e62d6d0afbe04170000a4\", \"name\":\"Maya Restaurant\", \"created_at\":\"2011-03-14T18:47:50+0000\", \"updated_at\":\"2011-03-14T18:47:50+0000\", \"address\":\"303 2nd Street\", \"city\":\"San Francisco\", \"state\":\"CA\", \"country\":\"United States\", \"phone\":\"(415) 543-2928\", \"latitude\":37.784732, \"longitude\":-122.395441 } } } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"place_id\": savedPlaceId }; [APSEvents showOccurrences:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu event_occurrences\", (unsigned long)((NSArray *)e.response[@\"event_occurrences\"]).count]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"event_id\", \"4d870f8bd0afbe1074000017\"); try { APSEvents.showOccurrences(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { Log.i(\"APSEvents\", e.getResponseString()); } catch (APSCloudException e1) { Log.e(\"APSEvents\", e1.toString()); } } else { Log.e(\"APSEvents\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSEvents\", e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSEvents\", e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.eventsShowOccurrences({ event_id: savedEventId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.event_occurrences[0]); } }); "
    },
    {
        "id": "Events-method-update-arrowdb",
        "url": "Events-method-update",
        "type": "arrowdb",
        "name": "Events.update",
        "content": "Update the event with the given id. Only the original submitter can update the event. For the event that is set as a recurring event, once created, there will be several \"event occurrences\" created associating with the event object on server side, one \"event occurrence\" represents a single occurrence of the recurring event. An \"event occurrence\" contains start and end time of the event's occurrence which are calulated according to the \"recurring\" settings of the event object. Instead of computing actual individual occurrences of a recurring event on the client side, you can use event occurrences query API to get a list of occurrences associated with a repeating event. To get all \"event occurrence\" of an recurring event object, you can use show_occurrences with the event's id. All the event occurrences will be recomputed if there is any change to the start_time, duration and/or recurring. An application admin can update any Event object. PUT events/update.json event_id ID of the event to update. name Updated event name. start_time Updated event start time. duration Updated event duration, in seconds. recurring New recurrance schedule. Can take the following values: \"daily\", \"weekly\", \"monthly\", or \"yearly\". recurring_count Updated number of occurrences for the event. recurring_until Updated date of last recurrance. details Updated description of the event. place_id ID of the place where this event takes place. photo New photo to assign as the event's primary photo. When you use photo parameter to attach a new photo, you can use it with custom resize and sync options To remove primary photo, simply set \"photo=\" or \"photo_id=\". If the original photo was created by using photo parameter, the photo will be deleted. photo_id ID of an existing photo to use as the event's primary photo. To remove primary photo, simply set \"photo=\" or \"photo_id=\". If the original photo was created by using photo parameter, the photo will be deleted. tags Comma-separated list of tags associated with this event. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this checkin object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this checkin object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id User to update the Event object on behalf of. The user must be the creator of the object. The current user must be an application admin to update the Event object on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example updates a event and checks the response. Cloud.Events.update({ event_id: savedEventId, name: 'Annual Celebration', start_time: starttime, duration: 3600, recurring: 'monthly', recurring_count: 5 }, function (e) { if (e.success) { var event = e.events[0]; alert('Success:\\n' + 'id: ' + event.id + '\\n' + 'name: ' + event.name + '\\n' + 'updated_at: ' + event.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X PUT -F \"event_id=4d870f8bd0afbe1074000017\" -F \"place_id=4d858ca9d0afbe014f000008\" http://api.cloud.appcelerator.com/v1/events/update.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"updateEvent\" }, \"response\": { \"events\": [ { \"id\":\"4d870f8bd0afbe1074000017\", \"name\":\"Appcelerator Cloud Services Meetup Group\", \"start_time\":\"2011-03-22T04:00:00+0000\", \"created_at\":\"2011-03-21T08:42:51+0000\", \"updated_at\":\"2011-03-21T08:57:00+0000\" \"user\": { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" }, \"end_time\":\"2011-03-22T06:00:00+0000\", \"place\": { \"id\":\"4d858ca9d0afbe014f000008\", \"name\":\"El Farolito Taqueria\", \"created_at\":\"2011-03-20T05:12:09+0000\", \"updated_at\":\"2011-03-20T05:12:09+0000\", \"address\":\"2779 Mission Street\", \"city\":\"San Francisco\", \"state\":\"CA\", \"country\":\"United States\", \"phone\":\"(415) 826-4870\", \"latitude\":37.784732, \"longitude\":-122.395441 } } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"event_id\": savedEventId, @\"name\": @\"Annual Celebration\", @\"start_time\": @\"2011-05-15T04:16:05+0000\", @\"duration\": @3600, @\"recurring\": @\"yearly\", @\"recurring_count\": @5 }; [APSEvents update:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final static Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"event_id\", \"4d870f8bd0afbe1074000017\"); data.put(\"place_id\", \"4d7e62d6d0afbe04170000a4\"); try { APSEvents.update(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Updated!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSEvents\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSEvents\", e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSEvents\", e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.eventsUpdate({ event_id: savedEventId, name: 'Annual Celebration', start_time: starttime, duration: 3600, recurring: 'monthly', recurring_count: 5 }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.events[0]); } }); "
    },
    {
        "name": "Files",
        "id": "Files-arrowdb",
        "url": "Files",
        "type": "arrowdb",
        "content": "Files The Files API lets you store files up to 100MB in the ArrowDB cloud. "
    },
    {
        "id": "Files-property-created_at-arrowdb",
        "url": "Files-property-created_at",
        "type": "arrowdb",
        "name": "Files.created_at",
        "content": "Creation date for this user object. Date"
    },
    {
        "id": "Files-property-id-arrowdb",
        "url": "Files-property-id",
        "type": "arrowdb",
        "name": "Files.id",
        "content": "Generated ID for this object. String"
    },
    {
        "id": "Files-property-name-arrowdb",
        "url": "Files-property-name",
        "type": "arrowdb",
        "name": "Files.name",
        "content": "File name. String"
    },
    {
        "id": "Files-property-processed-arrowdb",
        "url": "Files-property-processed",
        "type": "arrowdb",
        "name": "Files.processed",
        "content": "Flag indicating whether the file has finished uploading and is available for access. Boolean"
    },
    {
        "id": "Files-property-s3_acl-arrowdb",
        "url": "Files-property-s3_acl",
        "type": "arrowdb",
        "name": "Files.s3_acl",
        "content": "File permission. Can either by private or public_read. String"
    },
    {
        "id": "Files-property-updated_at-arrowdb",
        "url": "Files-property-updated_at",
        "type": "arrowdb",
        "name": "Files.updated_at",
        "content": "Last update time for this user object. Date"
    },
    {
        "id": "Files-property-url-arrowdb",
        "url": "Files-property-url",
        "type": "arrowdb",
        "name": "Files.url",
        "content": "URL for accessing the file. Only available when processed is true. For private file permission, the URL is temporary and will expire. Default is five minutes. String"
    },
    {
        "id": "Files-property-user-arrowdb",
        "url": "Files-property-user",
        "type": "arrowdb",
        "name": "Files.user",
        "content": "Owner of this object. Users"
    },
    {
        "id": "Files-method-batch_delete-arrowdb",
        "url": "Files-method-batch_delete",
        "type": "arrowdb",
        "name": "Files.batch_delete",
        "content": "Deletes Files objects that match the query constraints provided in the where parameter. If no where parameter is provided, all Files objects are deleted. Note that an HTTP 200 code (success) is returned if the call completed successfully but the query matched no objects. For performance reasons, the number of objects that can be deleted in a single batch delete operation is limited to 100,000. The matched objects are deleted asynchronously in a separate process. You must be an application admin to run this command. DELETE files/batch_delete.json where Encoded JSON object that specifies constraint values for Files objects to delete. If not specified, all Files objects are deleted. return void titanium Example request to delete all File objects. Cloud.sendRequest({ url : \"files/batch_delete.json\", method : \"DELETE\" }, function(e) { if (e.success) { alert(\"All File objects have been deleted.\"); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE -F \"where={\\\"favorite_color\\\":\\\"blue\\\"}\" https://api.cloud.appcelerator.com/v1/files/batch_delete.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"batchDelete\" } } ios Example request to delete all File objects. [[APSCloud sharedInstance] sendRequest:@\"files/batch_delete.json\" method:@\"DELETE\" data:nil handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"All File object have been deleted.\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to delete all File objects. APSCloud.getInstance().sendRequest(\"files/batch_delete.json\", \"DELETE\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"All File objects have been deleted.\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.filesBatchDelete(function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Files-method-count-arrowdb",
        "url": "Files-method-count",
        "type": "arrowdb",
        "name": "Files.count",
        "content": "Retrieves the total number of File objects. GET files/count.json return void titanium Example request to retrieve the total number of File objects. Cloud.sendRequest({ url : \"files/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/files/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"data_filesCount\", \"count\": 1 } } ios Example request to retrieve the total number of File objects. [[APSCloud sharedInstance] sendRequest:@\"files/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of File objects. APSCloud.getInstance().sendRequest(\"files/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.filesCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "Files-method-create-arrowdb",
        "url": "Files-method-create",
        "type": "arrowdb",
        "name": "Files.create",
        "content": "Creates a new file object with a binary attachment or contents of a URL. The size of the file can be up to 100 MB. The response includes a processed flag which indicates if the file has been stored reliably in the Appcelerator Cloud Services storage engine. This will initially be false. Once the file is available in the storage engine, the processed flag will be true, and file url will be available. POST files/create.json name File name. file The attached binary file to upload to ArrowDB. You can specify either file or url, but not both. Note: one way of uploading files when using Node SDK would look like this: function upload(req, res) { console.log(req.body.fileName); // Create buffer for string and readable stream var buffer = new Buffer(req.body.fileObject, 'ascii'); var bufferStream = new stream.PassThrough(); bufferStream.end(buffer); // Setup and login to ArrowDB var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB('f4PlGSZdIzFcoqbQYz9ljoHkxDBSJw2x'); arrowDBApp.usersLogin({ login: 'appc_app_user_dev', password: 'vLTIsB1yqQPcupc4PP' }, function(err, result) { if (err) { console.error(err.message); } else { arrowDBApp.sessionCookieString = result.cookieString; sessionID = result.body.meta.session_id; var fileInfo = { value: bufferStream, options: { filename: req.body.fileName, knownLength: buffer.length } } // On login success create the file arrowDBApp.filesCreate({ name: req.body.fileName, file: fileInfo, session_id: sessionID }, function(err, result) { if (err) { console.error(JSON.stringify(err, null, \"\\t\")); } else { console.log(result.body.response.files[0]); } }); } }); } url URL of file to upload to ArrowDB. You can specify either file or url, but not both. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this file object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. s3_acl Permission level of the file. Set to either: private: Only a logged-in user can access the file. public_read: Anyone can access the file (default). For private permission, when you retrieve the URL for the file using either the show or query method, the link is temporary and will expire. The default is five minutes. When exporting data, the exported URL will be a root URL and not a direct URL to the file. To restrict file access to specific users, use an ACL. acl_id ID of an ACLs to associate with this file object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id User ID to create the file on behalf of. The current login user must be an application admin to create a file on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example creates a new file and checks the response. Cloud.Files.create({ name: 'test.dat', file: Titanium.Filesystem.getFile('test.dat') }, function (e) { if (e.success) { var file = e.files[0]; alert('Success:\\n' + 'id: ' + file.id + '\\n' + 'name: ' + file.name + '\\n' + 'updated_at: ' + file.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request that creates a new file object from a binary attachment: $ curl -b cookies.txt -c cookies.txt -F \"name=my_file\" -F \"file=@resume.pdf\" http://api.cloud.appcelerator.com/v1/files/create.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"stat\":\"ok\", \"code\":200, \"method\":\"createFile\" }, \"response\": { \"files\": [ { \"id\": \"4f05446bc3666eb7ba000001\", \"name\": \"my_file\", \"processed\": false, \"created_at\": \"2012-01-05T06:34:19+0000\", \"updated_at\": \"2012-01-05T06:34:19+0000\", \"user\": { \"id\": \"4f0fe764d9ca72833d000002\", \"first_name\": \"Abe\", \"last_name\": \"Bob\", \"created_at\": \"2012-01-13T08:12:20+0000\", \"updated_at\": \"2012-01-13T08:12:43+0000\", \"external_accounts\": [ ], \"email\": \"a@mike.com\" } } ] } } Example cURL request that creates a new file from a URL: $ curl -b cookies.txt -c cookies.txt -F \"name=my_file\" -F \"url=http://www.appcelerator.com/wp-content/uploads/blog-traditional-companies.png\" http://api.cloud.appcelerator.com/v1/files/create.json?key=&pretty_json=true The JSON response is identical. ios Example iOS call: NSError* error = nil; NSData *fileData = [NSData dataWithContentsOfFile:@\"Test.txt\" options:0 error: &error]; if (fileData == nil) { // handle error NSLog(@\"Failed to read file, error %@\", error); return; } NSDictionary *data = @{ @\"name\" : @\"Test.txt\", @\"file\" : fileData }; [APSFiles create:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *files = e.response[@\"files\"]; NSDictionary *file = files[0]; NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nUpdated at : %@\\n\", file[@\"id\"], file[@\"name\"], file[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"name\", \"my_file\"); data.put(\"photo\", new File(\"/photos/profile.gif\")); try { APSFiles.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"File Uploaded!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSFiles\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSFiles\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSFiles\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''), fs = require('fs'); arrowDBApp.filesCreate({ name: 'test.dat', file: fs.createReadStream('test.dat') }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.files[0]); } }); "
    },
    {
        "id": "Files-method-delete-arrowdb",
        "url": "Files-method-delete",
        "type": "arrowdb",
        "name": "Files.delete",
        "content": "Deletes the file. To delete a file, the current user must be one of the following: The file's owner A user with write priviledges granted by the file's ACL An application admin DELETE files/delete.json file_id ID of the file to delete. su_id User to delete the File object on behalf of. The user must be the creator of the object. The current user must be an application admin to delete the File object on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example deletes a file and checks the response. Cloud.Files.remove({ file_id: savedFileId }, function (e) { if (e.success) { alert('Removed'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/files/delete.json?key=&pretty_json=true&file_id=4f05446bc3666eb7ba000001\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"deleteFile\" } } ios Example iOS call: NSDictionary *data = @{ @\"file_id\" : @\"savedFileId\" }; [APSFiles remove:data withBlock:^(APSResponse *e) { if (e.success){ [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"File Removed\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"file_id\", \"4f05446bc3666eb7ba000001\"); try { APSFiles.remove(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Removed!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSFiles\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSFiles\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSFiles\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.filesDelete({ file_id: savedFileId }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Files-method-query-arrowdb",
        "url": "Files-method-query",
        "type": "arrowdb",
        "name": "Files.query",
        "content": "Perform custom query of files with sorting and paginating. Currently you can not query or sort data stored inside custom fields that have Hash values. In addition to custom fields, here is a list of pre-defined fields in the File object that can be queried and sorted: user_id: String. User ID of the File's owner. created_at: Date. Timestamp when the file was created. updated_at: Date. Timestamp when the file was last updated. In ArrowDB 1.1.5 and later, you can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. For details about using the query parameters, see the Search and Query guide. GET files/query.json page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. where Constraint values for fields. where should be encoded JSON. If where is not specified, query returns all objects. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. expires For private file permission, sets the expiration time in seconds for the temporary link referencing the location to access the file. By default, the link expires in five minutes. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests a list of files and checks the response. Cloud.Files.query({ page: 1, per_page: 20 }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.files.length); for (var i = 0; i rest Example cURL request that queries files with name \"Appcelerator Cloud Services\": $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode 'where={\"name\":\"Appcelerator Cloud Services\"}' \"https://api.cloud.appcelerator.com/v1/files/query.json?key=&pretty_json=true&count=true\" Example JSON response: $ curl -b c.txt -c c.txt -X GET --data-urlencode 'where=[\"user_id\":\"4f0fe764d9ca72833d000002\", \"name\":\"my_file\"] \"https://localhost/v1/files/query.json?key=&pretty_json=true=-created_at&per_page=3\" { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"queryFiles\", \"count\": 100 }, \"response\": { \"files\": [ { \"id\": \"4f0fe787d9ca72833d000041\", \"name\": \"my_file\", \"processed\": true, \"created_at\": \"2012-01-13T08:12:55+0000\", \"updated_at\": \"2012-01-13T08:12:59+0000\", \"url\": \"http://storage.appcelerator.comtest.cocoafish.com/Z6F6oHfp3IqPMT54XDbdo6KA/files/2a/26/4f0fe787d9ca72833d000041/cocoafish.pdf\", \"user\": { \"id\": \"4f0fe764d9ca72833d000002\", \"first_name\": \"Abe\", \"last_name\": \"Bob\", \"created_at\": \"2012-01-13T08:12:20+0000\", \"updated_at\": \"2012-01-13T08:12:43+0000\", \"external_accounts\": [ ], \"email\": \"a@mike.com\" } } ] } } ios Example iOS call: NSDictionary *data = @{ @\"page\" : @1, @\"per_page\": @20 }; [APSFiles query:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *files = e.response[@\"files\"]; for (NSDictionary *file in files) { NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nUpdated at : %@\\n\", file[@\"id\"], file[@\"name\"], file[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap; JSONObject params = new JSONObject(\"{'name': 'Appcelerator Cloud Services'}\"); data.put(\"where\", params); try { APSFiles.query(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray files = e.getResponse().getJSONArray(\"files\"); if (files.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.filesQuery({ limit: 10 }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.files.forEach(function(file) { console.log(file); }); } }); "
    },
    {
        "id": "Files-method-show-arrowdb",
        "url": "Files-method-show",
        "type": "arrowdb",
        "name": "Files.show",
        "content": "Returns information associated with the file. GET files/show.json file_id ID of the file to retrieve information for. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. expires For private file permission, sets the expiration time in seconds for the temporary link referencing the location to access the file. By default, the link expires in five minutes. return void titanium This example retrieves information about a file and checks the response. Cloud.Files.show({ file_id: savedFileId }, function (e) { if (e.success) { var file = e.files[0]; alert('Success:\\n' + 'id: ' + file.id + '\\n' + 'name: ' + file.name + '\\n' + 'updated_at: ' + file.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/files/show.json?key=&pretty_json=true&file_id=4f05446bc3666eb7ba000001\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"showFile\" }, \"response\": { \"files\": [ { \"id\": \"4f05446bc3666eb7ba000001\", \"name\": \"my_file\", \"processed\": true, \"created_at\": \"2012-01-05T06:34:19+0000\", \"updated_at\": \"2012-01-05T06:34:41+0000\", \"url\": \"http://storage.appcelerator.com/KTSfOLVbzHx3R8s4hRiPvSfS1agjrkb0/files/c9/39/4f05489bc3666eb7aa000001/resume.pdf\" \"user\": { \"id\": \"4f0fe764d9ca72833d000002\", \"first_name\": \"Abe\", \"last_name\": \"Bob\", \"created_at\": \"2012-01-13T08:12:20+0000\", \"updated_at\": \"2012-01-13T08:12:43+0000\", \"external_accounts\": [ ], \"email\": \"a@mike.com\" } } ] } } ios Example iOS call: NSDictionary *data = @{ @\"file_id\" : @\"savedFileId\" }; [APSFiles show:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *files = e.response[@\"files\"]; NSDictionary *file = files[0]; NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nUpdated at : %@\\n\", file[@\"id\"], file[@\"name\"], file[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"file_id\", \"4f05446bc3666eb7ba000001\"); try { APSFiles.show(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { Toast.makeText(currentActivity, e.getResponseString(), Toast.LENGTH_SHORT); } catch (APSCloudException err) { Log.e(\"APSFiles\", \"Exception thrown: \" + err.toString()); } } else { Log.e(\"APSFiles\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSFiles\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSFiles\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.filesShow({ file_id: savedFileId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.files[0]); } }); "
    },
    {
        "id": "Files-method-update-arrowdb",
        "url": "Files-method-update",
        "type": "arrowdb",
        "name": "Files.update",
        "content": "Updates an existing file object with a binary attachment, or contents of a URL. When replacing the existing file with a new one, the object's processing flag is set to false, and its url property will not be valid until the new file has been processed and uploaded to the Appcelerator Cloud Services storage cloud. Application administrators can update any File object. PUT files/update.json file_id ID of the file to update. name File name. file The attached binary file to upload to ArrowDB. You can specify either file or url, but not both. url URL of file to upload to ArrowDB. You can specify either file or url, but not both. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this file object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this file object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. s3_acl Permission level of the file. Set to either: private: Only a logged-in user can access the file. public_read: Anyone can access the file (default). This can only be set if you also update the file or url. For private permission, when you retrieve the URL for the file using either the show or query method, the link is temporary and will expire. The default is five minutes. When exporting data, the exported URL will be a root URL and not a direct URL to the file. To restrict file access to specific users, use an ACL. su_id User to update the File object on behalf of. The user must be the creator of the object. The current user must be an application admin to update a File object on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example updates a file and checks the response. Cloud.Files.update({ file_id: savedFileId, name: 'Notice' }, function (e) { if (e.success) { var file = e.files[0]; alert('Success:\\n' + 'id: ' + file.id + '\\n' + 'name: ' + file.name + '\\n' + 'updated_at: ' + file.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request that updates an existing file object with a new binary attachment: curl -b cookies.txt -c cookies.txt -X PUT -F \"file=@newresume.pdf\" -F \"name=new_file_name\" -F \"file_id=4f05446bc3666eb7ba000001\" https://api.cloud.appcelerator.com/v1/files/update.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"updateFile\" }, \"response\": { \"files\": [ { \"id\": \"4f05446bc3666eb7ba000001\", \"name\": \"new_file_name\", \"processed\": false, \"created_at\": \"2012-01-05T06:34:19+0000\", \"updated_at\": \"2012-01-05T06:34:19+0000\", \"user\": { \"id\": \"4f0fe764d9ca72833d000002\", \"first_name\": \"Abe\", \"last_name\": \"Bob\", \"created_at\": \"2012-01-13T08:12:20+0000\", \"updated_at\": \"2012-01-13T08:12:43+0000\", \"external_accounts\": [ ], \"email\": \"a@mike.com\" } } ] } } Example cURL request that updates an existing file object with the contents of a remote URL: curl -b cookies.txt -c cookies.txt -X PUT -F \"url=http://www.appcelerator.com/wp-content/uploads/blog-traditional-companies.png\" -F \"name=new_file_name\" -F \"file_id=4f05446bc3666eb7ba000001\" https://api.cloud.appcelerator.com/v1/files/update.json?key=&pretty_json=true The JSON response is identical. ios Example iOS call: NSDictionary *data = @{ @\"file_id\" : @\"savedFileId\", @\"name\" : @\"Notice\" }; [APSFiles update:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *files = e.response[@\"files\"]; NSDictionary *file = files[0]; NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nUpdated at : %@\\n\", file[@\"id\"], file[@\"name\"], file[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"file_id\", \"4f05446bc3666eb7ba000001\"); data.put(\"name\", \"new_file_name\"); data.put(\"file\", new File(\"/photos/profile.gif\")); try { APSFiles.update(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Updated!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSFiles\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSFiles\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSFiles\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.filesUpdate({ file_id: savedFileId, name: 'Notice' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.files[0]); } }); "
    },
    {
        "name": "Friends",
        "id": "Friends-arrowdb",
        "url": "Friends",
        "type": "arrowdb",
        "content": "Friends The Friends API provides methods for managing friendships between the current user and another user. By default, friendships are two-way (like Facebook): once a friend request is made and approved, both users will show up in each others' friend lists. This default behavior can be changed to one-way following (like Twitter) in the Cloud > Settings & Configuration tab in Appcelerator Dashboard or the Settings tab My Apps. "
    },
    {
        "id": "Friends-method-add-arrowdb",
        "url": "Friends-method-add",
        "type": "arrowdb",
        "name": "Friends.add",
        "content": "Add friends to the current user. By default the friend request is two-way (like Facebook), so after a friend request is made and approved both users will show up in each others' friend lists. This default can be changed to one- way following (like Twitter) in the App Settings for each of your apps. Two-way or one-way friend requests must be approved by the recipient unless approval_required=false is also sent with the request. This allows the user to add any user as a friend without requiring approval. POST friends/add.json user_ids Comma-separated list consisting of IDs of one or more users to add as friends to the current user. A user cannot add himself or herself as a friend. approval_required Indicates whether the friend request requires approval by the other users. Default: true pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example adds a friend and checks the response. Cloud.Friends.add({ user_ids: checked.join(\",\") }, function (e) { if (e.success) { alert('Friend(s) added'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"user_ids=4e02e027d0afbe41ef000003\" \"https://api.cloud.appcelerator.com/v1/friends/add.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"method_name\": \"addFriends\", \"status\": \"ok\" } } ios Example iOS call: NSDictionary data = @{ @\"user_ids\" : @\"userid1, userid2\" }; [APSFriends append:data withBlock:^(APSResponse e) { if (e.success){ [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Friend(s) Addeed\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"user_ids\", \"4d6e77386f70950c89000001,5f6e77386f70950c890efew01\"); try { APSFriends.add(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Friend(s) added\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSFriends\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSFriends\", \"Exception thrown: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSFriends\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.friendsAdd({ user_ids: checked.join(\",\") }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Friend(s) added!'); } }); "
    },
    {
        "id": "Friends-method-approve-arrowdb",
        "url": "Friends-method-approve",
        "type": "arrowdb",
        "name": "Friends.approve",
        "content": "Approve an existing friend request. Each user will be added to the other's friend list. PUT friends/approve.json user_ids Comma-separated list consisting of IDs of one or more users to approve as friends to the current user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example approves pending friend requests and checks the response. Cloud.Friends.approve({ user_ids: checked.join(\",\") }, function (e) { if (e.success) { alert('Friend(s) approved'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X PUT -F \"user_ids=4e02e022d0afbe41ef000002\" \"https://api.cloud.appcelerator.com/v1/friends/approve.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"method_name\": \"approveFriends\", \"status\": \"ok\" } } ios Example iOS call: NSDictionary data = @{ @\"user_ids\" : @\"userid1, userid2\" }; [APSFriends append:data withBlock:^(APSResponse e) { if (e.success){ [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Friend(s) Approved\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"user_ids\", \"4d6e77386f70950c89000001,5f6e77386f70950c890efew01\"); try { APSFriends.approve(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray friendRequests = e.getResponse().getJSONArray(\"friend_requests\"); if (friendRequests.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.friendsApprove({ user_ids: checked.join(\",\") }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Friend(s) approved!'); } }); "
    },
    {
        "id": "Friends-method-query-arrowdb",
        "url": "Friends-method-query",
        "type": "arrowdb",
        "name": "Friends.query",
        "content": "Performs custom query of Friends objects with sorting and paginating of the current logged-in user or the specified user. Only an application admin can perform a query against a specified user using the su_id field. If one-way friendship is enabled, the query returns the users being followed. To return the user's followers, set the followers field to true. You can query or sort based on the data in any of the standard Friend fields. You can also query and sort data based on the values of any custom fields, if the values are simple JSON values. Currently you cannot sort or query based on data stored inside array or hash objects in custom fields. For details about using the query parameters, see the Search and Query guide. GET friends/query.json su_id ID of the user to search for friends. If friendship is set to one way, by default it searches against users that the identified user is following. You can pass followers=true to search the user's followers. You must be an application admin to use this field. followers If set to true and one-way friendship is enabled, returns the user's followers instead of the users being followed. page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. where Constraint values for fields. where should be encoded JSON. If where is not specified, query returns all objects. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Example request to retrieve all of the user's friends. Cloud.sendRequest({ url : \"friends/query.json\", method : \"GET\" }, function(e) { if (e.success) { var results = e.users // Process the results } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest The following example queries for the user's followers. Note that this is only relevant for one-way friendships: $ curl -b cookies.txt -c cookies.txt -X GET --data-urlencode \"followers=true\" \"https://api.cloud.appcelerator.com/v1/friends/query.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"queryFriends\", \"page\": 1, \"per_page\": 10, \"total_pages\": 1, \"total_results\": 1 }, \"response\": { \"users\": [ { \"id\": \"53fbb04ec3aafa0884000497\", \"first_name\": \"Wally\", \"last_name\": \"West\", \"created_at\": \"2014-08-25T21:53:18+0000\", \"updated_at\": \"2014-08-25T22:08:53+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2014-08-25T21:53:18+0000\", \"username\": \"kidflash\", \"admin\": \"false\", \"stats\": { \"photos\": { \"total_count\": 0 }, \"storage\": { \"used\": 0 } }, \"friend_counts\": { \"requests\": 0, \"following\": 1, \"followers\": 1 } } ] } } ios Example request to retrieve all of the user's friends. [[APSCloud sharedInstance] sendRequest:@\"friends/query.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSArray *results = e.response[@\"users\"]; // Process the results } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request that queries for ACLs with the name photo_acls. APSCloud.getInstance().sendRequest(\"friends/query.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray results = e.getResponse().getJSONArray(\"users\"); // Process the results } catch (Exception err) { Log.e(\"APSCloud\", \"Exception thrown: \" + err.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.friendsQuery({ followers: true }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.friends.forEach(function(friend) { console.log(friend); }); } }); "
    },
    {
        "id": "Friends-method-remove-arrowdb",
        "url": "Friends-method-remove",
        "type": "arrowdb",
        "name": "Friends.remove",
        "content": "Removes one or more friends from the user's friends list. DELETE friends/remove.json user_ids Comma-separated list consisting of IDs of one or more users to remove from the current user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example removes friends and checks the response. Cloud.Friends.remove({ user_ids: checked.join(\",\") }, function (e) { if (e.success) { alert('Friend(s) removed'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE -F \"user_ids=4e02e027d0afbe41ef000003\" \"https://api.cloud.appcelerator.com/v1/friends/remove.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"method_name\": \"removeFriends\", \"status\": \"ok\" } } ios Example iOS call: NSDictionary data = @{ @\"user_ids\" : @\"userid1, userid2\" }; [APSFriends remove:data withBlock:^(APSResponse e) { if (e.success){ [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Friend(s) Removed\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"user_ids\", \"4d6e77386f70950c89000001,5f6e77386f70950c890efew01\"); try { APSFriends.remove(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Friend(s) removed!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSFriends\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSFriends\", \"Exception thrown: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSFriends\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.friendsRemove({ user_ids: checked.join(\",\") }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response console.log('Friend(s) removed!'); } }); "
    },
    {
        "id": "Friends-method-requests-arrowdb",
        "url": "Friends-method-requests",
        "type": "arrowdb",
        "name": "Friends.requests",
        "content": "View pending friend requests. GET friends/requests.json requests_to If set to true, returns the users requesting the current user as a friend rather than the pending friend requests that the user needs to approve. response_json_depth Nested object depth level counts in response JSON. In order to reduce server API calls from an application, the response JSON may include not just the objects that are being referred to, but also some important data related to the returned objects such as object's owner or referenced objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example shows pending friend requests and checks the response. Cloud.Friends.requests(function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.friend_requests.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/friends/requests.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"method_name\": \"friendRequests\", \"status\": \"ok\" }, \"response\": { \"friend_requests\": [ { \"created_at\": \"2011-06-23T06:41:47+0000\", \"updated_at\": \"2011-06-23T06:41:47+0000\", \"id\": \"4e02e02bd0afbe41ef000005\", \"user\": { \"created_at\": \"2011-06-23T06:41:39+0000\", \"updated_at\": \"2011-06-23T06:41:44+0000\", \"username\": \"bob\", \"id\": \"4e02e022d0afbe41ef000002\", \"last_name\": \"Dude\", \"email\": \"bob@dude.com\", \"first_name\": \"Bob\" } } ] } } ios Example iOS call: [APSFriends requests:nil withBlock:^(APSResponse e) { if (e.success){ NSArray friendRequests = e.response[@\"friend_requests\"]; for (NSDictionary *friendRequest in friendRequests) { NSString *message = [NSString stringWithFormat:@\"id : %@\\n First Name : %@\\nLast Name : %@\\n\", friendRequest[@\"id\"], friendRequest[@\"first_name\"], friendRequest[@\"last_name\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); try { APSFriends.requests(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray friendRequests = e.getResponse().getJSONArray(\"friend_requests\"); if (friendRequests.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.friendsRequests(function(err, result) { if (err) { console.error(err.message); } else { result.body.response.friends.forEach(function(friend){ console.log(friend.first_name + \" \" + friend.last_name); }); } }); "
    },
    {
        "id": "Friends-method-search-arrowdb",
        "url": "Friends-method-search",
        "type": "arrowdb",
        "name": "Friends.search",
        "content": "Performs a search for users who are friends of the currently logged-in user. An application admin can search for friends of an arbitrary user by specifing the the user_id field. Specifying the optional q parameter allows searching by first name, last name, email address, or username. If no q parameter is specified, all friends of the specified user are returned. If one-way friendship is enabled, the search returns the users being followed. To return the user's followers, set the followers field to true. GET friends/search.json user_id ID of the user to search for friends. You must be an application admin to use this field. If friendship is set to one way, by default it searches against users that the identified user is following. You can pass followers=true to search the user's followers. followers If you have friends set to one way, pass followers=true to query user's followers. q Space-separated list of keywords used to perform full text search on first name, last name, email address, username and tags. page Request page number, default is 1. per_page Number of results per page, default is 10. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests information about particular friends and checks the response. Cloud.Friends.search({ user_id: searchID }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.users.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/friends/search.json?user_id=4e02e022d0afbe41ef000002&q=alice%40gal.com&key=&pretty_json=true\" Example JSON response: { \"meta\": { \"total_pages\": 1, \"code\": 200, \"method_name\": \"searchFriends\", \"page\": 1, \"total_results\": 1, \"per_page\": 10, \"status\": \"ok\" }, \"response\": { \"users\": [ { \"created_at\": \"2011-06-23T06:41:43+0000\", \"updated_at\": \"2011-06-23T06:41:48+0000\", \"username\": \"alice\", \"id\": \"4e02e027d0afbe41ef000003\", \"last_name\": \"Gal\", \"email\": \"alice@gal.com\", \"first_name\": \"Alice\" } ] } } ios Example iOS call: NSDictionary *data = @{ @\"user_id\" : @\"searchUserid\" }; [APSFriends search:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *friendRequests = e.response[@\"friend_requests\"]; for (NSDictionary *friendRequest in friendRequests) { NSString *message = [NSString stringWithFormat:@\"id : %@\\n First Name : %@\\nLast Name : %@\\n\", friendRequest[@\"id\"], friendRequest[@\"first_name\"], friendRequest[@\"last_name\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"user_id\", \"4d6e77386f70950c89000001\"); try { APSFriends.search(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray users = e.getResponse().getJSONArray(\"users\"); for (int i = 0; i nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.friendsSearch({ user_id: searchID }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.friends[0]); } }); "
    },
    {
        "name": "GeoFences",
        "id": "GeoFences-arrowdb",
        "url": "GeoFences",
        "type": "arrowdb",
        "content": "GeoFences The current user must be an application administrator to create, update or delete a geo-fence object. The GeoFences API lets you manage spatial objects with data. Use this API to have the device query the ArrowDB server to retrieve data based on a location. To send a push notification based on the user's location, see the \"Location-Based Push Notification\" section in PushNotifications. Parameters Datetime fields use the ISO 8601 format, for example, YYYY-MM-DDTHH:mm:ss+ZZZZ. Geographic coordinates are specified as arrays with the longitude as the first element and latitude as the second element, that is, [longitude,latitude]. Distance is specified in radians. To calculate the distance in radians, divide the distance you want by the approximate radius of the Earth in the same units. For example, 10 miles is 10 / 3959, or 2 kilometers is 2 / 6371. Getting Started To use the GeoFences API, create geo-fence objects with data to download, then have the device periodically check the ArrowDB server for this data. To create geo-fence objects, use the create method and specify the geographic area and data to download. After creating a geo-fence object, the device can periodically query the ArrowDB server to see if there is any available data to retrieve. Use the query method to specify a geospatial query with the where parameter. If the query returns any results, the application needs to process the payload field of the query response. "
    },
    {
        "id": "GeoFences-property-created_at-arrowdb",
        "url": "GeoFences-property-created_at",
        "type": "arrowdb",
        "name": "GeoFences.created_at",
        "content": "Date when the geo-fence was created. Date"
    },
    {
        "id": "GeoFences-property-end_time-arrowdb",
        "url": "GeoFences-property-end_time",
        "type": "arrowdb",
        "name": "GeoFences.end_time",
        "content": "Datetime when the geo-fence expires. Date"
    },
    {
        "id": "GeoFences-property-id-arrowdb",
        "url": "GeoFences-property-id",
        "type": "arrowdb",
        "name": "GeoFences.id",
        "content": "Generated ID for this geo-fence. String"
    },
    {
        "id": "GeoFences-property-loc-arrowdb",
        "url": "GeoFences-property-loc",
        "type": "arrowdb",
        "name": "GeoFences.loc",
        "content": "JSON-encoded object describing the geographic perimeter of the geo-fence, specified as a circle with a center point of either place_id or coordinates property and the radius property: place_id (String): Use an ArrowDB Places object as the center of the circle. Specify the ID of the Place. coordinates (Array): Center coordinate of the circle. Specify a point as [longitude,latitude]. radius (Number/String): Radius of the bounding circle in radians. To calculate the distance in radians, divide the distance you want by the approximate radius of the Earth in the same units. For example, 10 miles is 10 / 3959 or 2 kilometers is 2 / 6371. Specify the fraction as a string, for example, \"10/3959\" or \"2/6371\". Hash"
    },
    {
        "id": "GeoFences-property-payload-arrowdb",
        "url": "GeoFences-property-payload",
        "type": "arrowdb",
        "name": "GeoFences.payload",
        "content": "JSON-encoded data to retrieve if the geo-fence area intersects the device's location. Hash"
    },
    {
        "id": "GeoFences-property-start_time-arrowdb",
        "url": "GeoFences-property-start_time",
        "type": "arrowdb",
        "name": "GeoFences.start_time",
        "content": "Datetime when to start the geo-fence. Date"
    },
    {
        "id": "GeoFences-property-updated_at-arrowdb",
        "url": "GeoFences-property-updated_at",
        "type": "arrowdb",
        "name": "GeoFences.updated_at",
        "content": "Date when the geo-fence was updated. Date"
    },
    {
        "id": "GeoFences-method-count-arrowdb",
        "url": "GeoFences-method-count",
        "type": "arrowdb",
        "name": "GeoFences.count",
        "content": "Retrieves the total number of GeoFence objects. GET geo_fences/count.json return void titanium Example request to retrieve the total number of GeoFence objects. Cloud.sendRequest({ url : \"geofences/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/geo_fences/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"geofencesCount\", \"count\": 1 } } ios Example request to retrieve the total number of GeoFence objects. [[APSCloud sharedInstance] sendRequest:@\"geofences/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of GeoFence objects. APSCloud.getInstance().sendRequest(\"geofences/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.geoFencesCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count]); } }); "
    },
    {
        "id": "GeoFences-method-create-arrowdb",
        "url": "GeoFences-method-create",
        "type": "arrowdb",
        "name": "GeoFences.create",
        "content": "Creates a geo-fence object with an optional start and end time. POST geo_fences/create.json geo_fence JSON object describing the geographic perimeter, data payload, and start and end time for the geo-fence object. Specify the following propertes: loc (Hash): Required. Geographic perimeter. See loc. payload (Hash): Required. JSON-encoded data to retrieve if a device intersects the geographic perimeter. start_time (Date): Datetime to start the geo-fence. end_time (Date): Datetime to end the geo-fence. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Requires Titanium SDK 3.2.1 or later. The following example creates a geo-fence covering a ten-mile area with San Francisco, CA, USA as the center point: Cloud.GeoFences.create({ geo_fence: { \"loc\":{\"coordinates\":[-122.4167,37.7833], \"radius\":\"10/3959\"}, \"payload\":{\"alert\":\"24-hour sale at our SF flagship store on 12/26!\"}, \"start_time\": \"2014-03-08T00:00\", \"end_time\":\"2014-12-26T19:00\" } }, function (e) { if (e.success) { Ti.API.info(JSON.stringify(e.geo_fences)); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest The following example creates a geo-fence covering a ten-mile area with San Francisco, CA, USA as the center point: $ curl -b cookies.txt -c cookies.txt -X POST -F 'geo_fence={\"loc\":{\"coordinates\":[-122.4167,37.7833], \"radius\":\"10/3959\"}, \"payload\":{\"alert\":\"24-hour sale at our SF flagship store on 12/26!\"}, \"start_time\":\"2013-12-25T00:00\",\"end_time\":\"2013-12-26T19:00\"}' \"http://api.cloud.appcelerator.com/v1/geo_fences/create.json?key=\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"createGeoFence\" }, \"response\": { \"geo_fences\": [ { \"id\": \"52aa2da0d7de142e0e000040\", \"start_time\": \"2013-12-25T00:00:00+0000\", \"end_time\": \"2013-12-26T19:00:00+0000\", \"loc\": { \"coordinates\": [ -122.4167, 37.7833 ], \"radius\": \"10/3959\" }, \"payload\": { \"alert\": \"24-hour sale at our SF flagship store on 12/26!\" }, \"created_at\": \"2013-12-12T21:41:52+0000\", \"updated_at\": \"2013-12-12T21:41:52+0000\" } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"geo_fence\": @{ @\"loc\": @{ @\"coordinates\": @[@-122.4167,@37.7833], @\"radius\": @\"10/3959\" }, @\"payload\": @{ @\"alert\":@\"24-hour sale at our SF flagship store on 12/26!\" }, @\"start_time\": @\"2014-03-08T00:00\", @\"end_time\": @\"2014-12-26T19:00\" } }; [APSGeoFences create:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; JSONObject loc = new JSONObject(\"{'coordinates':[-122.4167,37.7833], 'radius':'10/3959'}\"); JSONObject payload = new JSONObject(\"{'alert':'24-hour sale at our SF flagship store on 12/26!'}\"); HashMap data = new HashMap(); data.put(\"loc\", loc); data.put(\"payload\", payload); data.put(\"start_time\", \"2014-03-08T00:00\"); data.put(\"end_time\", \"2014-12-26T19:00\"); try { APSGeofences.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Created!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSGeofences\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSGeofences\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSGeofences\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.geoFencesCount({ geo_fence: { \"loc\":{\"coordinates\":[-122.4167,37.7833], \"radius\":\"10/3959\"}, \"payload\":{\"alert\":\"24-hour sale at our SF flagship store on 12/26!\"}, \"start_time\": \"2015-12-19T00:00\", \"end_time\":\"2015-12-26T19:00\" } }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.geo_fences[0]); } }); "
    },
    {
        "id": "GeoFences-method-delete-arrowdb",
        "url": "GeoFences-method-delete",
        "type": "arrowdb",
        "name": "GeoFences.delete",
        "content": "Deletes an existing geo-fence object. DELETE geo_fences/delete.json id ID of the geo-fence object to delete. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Requires Titanium SDK 3.2.1 or later. Cloud.GeoFences.remove({ id: geoFenceId }, function (e) { if (e.success) { Ti.API.info(JSON.stringify(e)); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE -F 'id=52aa2da0d7de142e0e000040' \"http://api.cloud.appcelerator.com/v1/geo_fences/delete.json?key=\" Example cURL response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"destroyGeoFence\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"id\": geoFenceId }; [APSGeoFences remove:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"id\", \"52aa2da0d7de142e0e000040\"); try { APSGeofences.remove(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Removed!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSGeofences\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSGeofences\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSGeofences\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.geoFencesDelete({ id: geoFenceId }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "GeoFences-method-query-arrowdb",
        "url": "GeoFences-method-query",
        "type": "arrowdb",
        "name": "GeoFences.query",
        "content": "Perform custom query of geofences with sorting and paginating. In ArrowDB 1.1.5 and later, you can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. For details about using the query parameters, see the Search and Query guide. GET geo_fences/query.json page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. response_json_depth Nested object depth level for response data. Default is 1, valid range is 1 to 8. Response data may include references to other objects, which the server performs additional queries on to include in the response. To reduce server response time, set this parameter to a lower value to reduce server API calls. where A JSON-encoded object that defines the query used. The following fields can be used for the query: start_time end_time loc : For this property, specify a MongoDB Geospatial Query. If where is not specified, query returns all objects. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Requires Titanum SDK 3.2.1 or later. This example searches for geo-fences within 2 km of Oakland, CA, USA: Cloud.GeoFences.query({ where:{ \"loc\": { \"$nearSphere\" : { \"$geometry\" : { \"type\" : \"Point\", \"coordinates\" : [-122.2708,37.8044] }, \"$maxDistance\" : 2000 } } } }, function (e) { if (e.success) { Ti.API.info(JSON.stringify(e.geo_fences)); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest This example searches for geo-fences within 2 km of Oakland, CA, USA: curl -b cookies.txt -c cookies.txt -X GET -F 'where={\"loc\": { \"$nearSphere\" : { \"$geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [-122.2708,37.8044] } , \"$maxDistance\" : 2000 }}}' \"http://api.cloud.appcelerator.com/v1/geo_fences/query.json?key=&count=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"queryGeoFence\", \"count\": 100 }, \"response\": { \"geo_fences\": [ { \"id\": \"52aa2ebbd7de142e0e000041\", \"start_time\": \"2013-12-25T00:00:00+0000\", \"end_time\": \"2013-12-26T19:00:00+0000\", \"loc\": { \"radius\": \"10/3959\", \"coordinates\": [ -122.4167, 37.7833 ] }, \"payload\": { \"alert\": \"24-hour sale at our SF flagship store on 12/26!\" }, \"created_at\": \"2013-12-12T21:46:35+0000\", \"updated_at\": \"2013-12-12T22:41:38+0000\" } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"where\": @{ @\"loc\": @{ @\"$nearSphere\": @{ @\"$geometry\": @{ @\"type\": @\"Point\", @\"coordinates\": @[@-122.2708, @37.8044] }, @\"$maxDistance\" : @2000 } } } }; [APSGeoFences query:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu geo_fences\", (unsigned long)((NSArray *) e.response[@\"geo_fences\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap; JSONObject params = new JSONObject(\"'loc': { '$nearSphere' : { '$geometry' : { 'type' : 'Point' , 'coordinates' : [-122.2708,37.8044] } , '$maxDistance' : 2000 }}}\"); data.put(\"where\", params); try { APSGeofences.query(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray geo_fences = e.getResponse().getJSONArray(\"geo_fences\"); if (geo_fences.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.geoFencesQuery({ where:{ \"loc\": { \"$nearSphere\" : { \"$geometry\" : { \"type\" : \"Point\", \"coordinates\" : [-122.2708,37.8044] }, \"$maxDistance\" : 2000 } } } }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.geo_fences[0]); } }); "
    },
    {
        "id": "GeoFences-method-update-arrowdb",
        "url": "GeoFences-method-update",
        "type": "arrowdb",
        "name": "GeoFences.update",
        "content": "Updates an existing geo-fence object. POST geo_fences/update.json id ID of the geo-fence object to update. geo_fence JSON object describing the geographic perimeter, data payload, and start and end time for the geo-fence object. Specify the following propertes: loc (Hash): Required. Geographic perimeter. See loc. payload (Hash): JSON-encoded data to retrieve if a device intersects the geographic perimeter. start_time (Date): Datetime to start the geo-fence. end_time (Date): Datetime to end the geo-fence. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Requires Titanium SDK 3.2.1 or later. Cloud.GeoFences.update({ id: geoFenceId geo_fence:{\"loc\":{\"place_id\":\"531a1217447d300f05003b69\",\"radius\":\"2/6371\"}} }, function (e) { if (e.success) { Ti.API.info(JSON.stringify(e.geo_fences)); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X PUT -F 'id=52aa2da0d7de142e0e000040' -F 'geo_fence={\"loc\":{\"place_id\":\"52aa310765fe160b3f000042\",\"radius\":\"2/6371\"}}' \"http://api.cloud.appcelerator.com/v1/geo_fences/update.json?key=\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"updateGeoFence\" }, \"response\": { \"geo_fences\": [ { \"id\": \"52aa2da0d7de142e0e000040\", \"start_time\": \"2013-12-25T00:00:00.000Z\", \"end_time\": \"2013-12-26T19:00:00.000Z\", \"loc\": { \"radius\": \"2/6378\", \"coordinates\": [ 0, 0 ], \"place\": { \"id\": \"52aa310765fe160b3f000042\", \"name\": \"pointOne\", \"created_at\": \"2013-12-12T18:41:52.000Z\", \"updated_at\": \"2013-12-12T18:01:18.000Z\", \"latitude\": 0, \"longitude\": 0, \"custom_fields\": { \"coordinates\": [] } }, \"payload\": { \"alert\": \"24-hour sale at our SF flagship store on 12/26!\" }, \"created_at\": \"2013-12-12T21:41:52.000Z\", \"updated_at\": \"2013-12-12T22:01:18.000Z\" } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"id\": geoFenceId, @\"geo_fence\": @{ @\"loc\": @{ @\"place_id\": @\"531a1217447d300f05003b69\", @\"radius\": @\"2/6371\" } } }; [APSGeoFences update:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; JSONObject geo_fence = new JSONObject(\"{'loc':{'place_id':'52aa310765fe160b3f000042','radius':'2/6371'}}\"); HashMap data = new HashMap(); data.put(\"id\", \"52aa2da0d7de142e0e000040\"); data.put(\"geo_fence\", geo_fence); try { APSGeofencess.update(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Updated!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSGeofences\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSGeofences\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSGeofences\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.geoFencesUpdate({ id: geoFenceId geo_fence:{\"loc\":{\"place_id\":\"531a1217447d300f05003b69\",\"radius\":\"2/6371\"}} }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.geo_fences[0]); } }); "
    },
    {
        "name": "KeyValues",
        "id": "KeyValues-arrowdb",
        "url": "KeyValues",
        "type": "arrowdb",
        "content": "KeyValues The KeyValues API provides methods to store and retrieve string or binary data up to 2MB. By default, a key-value pair is publicly readable, but can only be updated or deleted by the object's owner, or an application admin. Each registered user also has a private key-value store. Objects in the private store can only be accessed by the owner or an application admin. "
    },
    {
        "id": "KeyValues-property-id-arrowdb",
        "url": "KeyValues-property-id",
        "type": "arrowdb",
        "name": "KeyValues.id",
        "content": "Generated ID for this key-value pair. String"
    },
    {
        "id": "KeyValues-property-name-arrowdb",
        "url": "KeyValues-property-name",
        "type": "arrowdb",
        "name": "KeyValues.name",
        "content": "Name (or key) for this key-value pair. String"
    },
    {
        "id": "KeyValues-property-type-arrowdb",
        "url": "KeyValues-property-type",
        "type": "arrowdb",
        "name": "KeyValues.type",
        "content": "Value type: \"string\" or \"binary\". If type is omitted, defaults to \"string\". String"
    },
    {
        "id": "KeyValues-property-value-arrowdb",
        "url": "KeyValues-property-value",
        "type": "arrowdb",
        "name": "KeyValues.value",
        "content": "String or binary data. String/BinaryData"
    },
    {
        "id": "KeyValues-method-append-arrowdb",
        "url": "KeyValues-method-append",
        "type": "arrowdb",
        "name": "KeyValues.append",
        "content": "Add the given value to end of the existing one. Not allowed on key-values with binary data. PUT keyvalues/append.json name Name (or key) for the key-value pair. value Value to append to the current value. access_private Determines whether to update this key-value in the publically readable store or in the user's private store. Default is false (publically readable). su_id Update the key-value pair on behalf of the identified user. Login user must be an admin to update a key-value on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example appends a value to a key-value and checks the response. Cloud.KeyValues.append({ name: 'welcome_message', value: ', take a look around' }, function (e) { if (e.success) { var keyvalue = e.keyvalues[0]; alert('Success:\\n' + 'name: ' + keyvalue.name + '\\n' + 'value: ' + keyvalue.value); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X PUT -F \"name=welcome_message\" -F \"value=, take a look around\" https://api.cloud.appcelerator.com/v1/keyvalues/append.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"appendKeyvalue\" }, \"response\": { \"keyvalues\": [ { \"id\":\"4d897a505c032bae9c434696\", \"name\":\"welcome_message\", \"value\":\"Welcome to the Appcelerator Cloud Services Platform, take a look around\", \"created_at\":\"2011-03-23T08:19:50+0000\", \"updated_at\":\"2011-03-23T08:19:50+0000\" } ] } } ios Example iOS call: NSDictionary data = @{ @\"name\" : @\"welcome_message\", @\"value\": @\"take a look around\" }; [APSKeyValues append:data withBlock:^(APSResponse e) { if (e.success){ NSArray keyvalues = e.response[@\"keyvalues\"]; NSDictionary keyValue = keyvalues[0]; NSString *message = [NSString stringWithFormat:@\"Name : %@\\nValue: %@\\n\", keyValue[@\"name\"], keyValue[@\"value\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"name\", \"welcome_message\"); data.put(\"value\", \"take a look around\"); try { APSKeyValues.append(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { JSONArray keyvalues = responseJSON.getJSONArray(\"keyvalues\"); } else { Log.e(\"APSKeyValues\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSKeyValues\", \"Exception thrown: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSKeyValues\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.keyValuesAppend({ name: 'welcome_message', value: ', take a look around' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.keyvalues[0]); } }); "
    },
    {
        "id": "KeyValues-method-count-arrowdb",
        "url": "KeyValues-method-count",
        "type": "arrowdb",
        "name": "KeyValues.count",
        "content": "Retrieves the total number of KeyValue objects. GET keyvalues/count.json return void titanium Example request to retrieve the total number of KeyValue objects. Cloud.sendRequest({ url : \"keyvalues/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/keyvalues/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"keyvaluesCount\", \"count\": 1 } } ios Example request to retrieve the total number of KeyValue objects. [[APSCloud sharedInstance] sendRequest:@\"keyvalues/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of KeyValue objects. APSCloud.getInstance().sendRequest(\"keyvalues/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.keyValuesCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "KeyValues-method-delete-arrowdb",
        "url": "KeyValues-method-delete",
        "type": "arrowdb",
        "name": "KeyValues.delete",
        "content": "Deletes a key-value pair DELETE keyvalues/delete.json name Name (or key) of the key-value pair to delete. access_private Determines whether to delete this key-value in the publically readable store or in the user's private store. Default is false (publically readable store). su_id Delete the key-value pair on behalf of the identified user. Login user must be an admin to delete a key-value on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example deletes a key-value and checks the response. Cloud.KeyValues.remove({ name: 'welcome_message' }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt --request DELETE \"http://api.cloud.appcelerator.com/v1/keyvalues/delete.json?key=&pretty_json=true&name=welcome_message\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"deleteKeyvalue\" } } ios Example iOS call: NSDictionary data = @{ @\"name\" : @\"welcome_message\" }; [APSKeyValues delete:data withBlock:^(APSResponse e) { if (e.success){ [[[UIAlertView alloc] initWithTitle:@\"Success\" message:nil delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"name\", \"welcome_message\"); try { APSKeyValues.remove(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Removed!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSKeyValues\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSKeyValues\", \"Exception thrown: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSKeyValues\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.keyValuesDelete({ name: 'welcome_message' }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "KeyValues-method-get-arrowdb",
        "url": "KeyValues-method-get",
        "type": "arrowdb",
        "name": "KeyValues.get",
        "content": "Gets the value of a key-value pair. If the value is string, the KeyValue object is returned in JSON format. If the value is binary, the value is returned directly without a JSON wrapper and the content type is set to \"application/octct-stream\". GET keyvalues/get.json name Name (or key) for the key-value pair to retrieve. access_private Determines whether to retrieve this key-value from the publically readable store or from the user's private store. Default is false (publically readable). user_id Retrieve a private key-value pair from the identified user's store. Login user must be an application admin to retrieve a key-value from another user's store. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example gets a key-value and checks the response. Cloud.KeyValues.get({ name: 'welcome_message' }, function (e) { if (e.success) { var keyvalue = e.keyvalues[0]; alert('Success:\\n' + 'name: ' + keyvalue.name + '\\n' + 'value: ' + keyvalue.value); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request (String data) curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/keyvalues/get.json?key=&pretty_json=true&name=welcome_message\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"getKeyvalue\" }, \"response\": { \"keyvalues\": [ { \"id\":\"4d897a505c032bae9c434696\", \"name\":\"welcome_message\", \"value\":\"Welcome to Appcelerator Cloud Services\", \"created_at\":\"2011-02-08T23:46:01+0000\", \"updated_at\":\"2011-02-08T23:46:01+0000\" } ] } } Example cURL request (binary data) curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/keyvalues/get.json?key=&pretty_json=true&name=myimage\" > image.jpg ios Example iOS call: NSDictionary data = @{ @\"name\" : @\"welcome_message\" }; [APSKeyValues get:data withBlock:^(APSResponse e) { if (e.success){ NSArray keyvalues = e.response[@\"keyvalues\"]; NSDictionary keyValue = keyvalues[0]; NSString *message = [NSString stringWithFormat:@\"Name : %@\\nValue: %@\\n\", keyValue[@\"name\"], keyValue[@\"value\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"name\", \"welcome_message\"); try { APSKeyValues.get(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONObject keyvalues = e.getResponse().getJSONArray(\"keyvalues\").getJSONObject(0); } catch (JSONException err) { Log.e(\"APSKeyValues\", \"Exception thrown: \" + err.toString()) } } else { Log.e(\"APSKeyValues\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSKeyValues\", \"Exception thrown: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSKeyValues\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.keyValuesGet({ name: 'welcome_message' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.keyvalues[0]); } }); "
    },
    {
        "id": "KeyValues-method-incrby-arrowdb",
        "url": "KeyValues-method-incrby",
        "type": "arrowdb",
        "name": "KeyValues.incrby",
        "content": "Increment the value by the given integer value. Not allowed on key-value pairs with binary data. If the current value in the key-value is not convertable to an integer, the new value replaces the existing value. PUT keyvalues/incrby.json name Name (or key) for the key-value pair. value Integer value to add to the current value. If a floating point number is specified, any fractional portion is dropped. If this value cannot be converted to an integer, the existing value is not changed. access_private Determines whether to update this key-value in the publically readable store or in the user's private store. Default is false (publically readable). su_id Update the key-value pair on behalf of the identified user. Login user must be an admin to update a key-value on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example increments a key-value and checks the response. Cloud.KeyValues.increment({ name: 'score', value: 1 }, function (e) { if (e.success) { var keyvalue = e.keyvalues[0]; alert('Success:\\n' + 'name: ' + keyvalue.name + '\\n' + 'value: ' + keyvalue.value); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X PUT -F \"name=score\" -F \"value=1\" https://api.cloud.appcelerator.com/v1/keyvalues/incrby.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"incrKeyValue\" }, \"response\": { \"keyvalues\": [ { \"id\":\"4d897a505c032bae9c434696\", \"name\":\"score\", \"value\":\"2\", \"created_at\":\"2011-03-23T08:19:50+0000\", \"updated_at\":\"2011-03-23T08:19:50+0000\" } ] } } ios Example iOS call: NSDictionary *data = @{ @\"name\" : @\"score\", @\"value\": @1 }; [APSKeyValues increment:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *keyvalues = e.response[@\"keyvalues\"]; NSDictionary *keyValue = keyvalues[0]; NSString *message = [NSString stringWithFormat:@\"Name : %@\\nValue: %@\\n\", keyValue[@\"name\"], keyValue[@\"value\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"name\", \"score\"); data.put(\"value\", \"1\"); try { APSKeyValues.increment(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONObject keyvalues = e.getResponse().getJSONArray(\"keyvalues\").getJSONObject(0); new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Incremented!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (JSONException err) { Log.e(\"APSKeyValues\", \"Exception throw: \" + err.toString()) } } else { Log.e(\"APSKeyValues\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSKeyValues\", \"Exception thrown: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSKeyValues\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.keyValuesIncrby({ name: 'score', value: 1 }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.keyvalues[0].value); } }); "
    },
    {
        "id": "KeyValues-method-query-arrowdb",
        "url": "KeyValues-method-query",
        "type": "arrowdb",
        "name": "KeyValues.query",
        "content": "Performs a custom query of KeyValues. Currently you can not query or sort data stored inside an array or hash in custom fields. In ArrowDB 1.1.5 and later, you can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. For details about using the query parameters, see the Search and Query guide. GET keyvalues/query.json page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. where Constraint values for fields. where should be encoded JSON. You can query any of the standard values for an ACL object, as well as any custom fields that contain simple values, such as String, Number or Boolean values. If where is not specified, query returns all objects. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. return void titanium Example request to retrieve all KeyValue objects. Cloud.sendRequest({ url : \"keyvalues/query.json\", method : \"GET\", data: { //query params go here } }, function(e) { if (e.success) { var results = e.keyvalues // Process the results } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request. $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/keyvalues/query.json?key=&pretty_json=true&count=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"queryKeyValues\", \"count\": 100 }, \"response\": { \"keyvalues\": [ { \"id\": \"53d80c1988971f081c001238\", \"name\": \"goodbye_message\", \"value\": \"Au revoir from Appcelerator Cloud Services\", \"type\": \"string\", \"private\": false, \"created_at\": \"2014-07-29T21:03:21+0000\", \"updated_at\": \"2014-07-29T21:03:21+0000\", \"user\": { \"id\": \"53d7c9d188971f0824001269\", \"created_at\": \"2014-07-29T16:20:33+0000\", \"updated_at\": \"2014-07-29T20:58:11+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2014-07-29T16:20:33+0000\", \"username\": \"jon\", \"admin\": \"true\", \"stats\": { \"photos\": { \"total_count\": 0 }, \"storage\": { \"used\": 0 } } } }, { \"id\": \"53d80b1c485fc30823001231\", \"name\": \"welcome_message\", \"value\": \"Welcome to Appcelerator Cloud Services\", \"type\": \"string\", \"private\": false, \"created_at\": \"2014-07-29T20:59:08+0000\", \"updated_at\": \"2014-07-29T20:59:08+0000\", \"user\": { \"id\": \"53d7c9d188971f0824001269\", \"created_at\": \"2014-07-29T16:20:33+0000\", \"updated_at\": \"2014-07-29T20:58:11+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2014-07-29T16:20:33+0000\", \"username\": \"jon\", \"admin\": \"true\", \"stats\": { \"photos\": { \"total_count\": 0 }, \"storage\": { \"used\": 0 } } } } ] } } ios Example request to retrieve all KeyValue objects. [[APSCloud sharedInstance] sendRequest:@\"keyvalues/query.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSArray *results = e.response[@\"keyvalues\"]; // Process the results } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve all KeyValue objects. APSCloud.getInstance().sendRequest(\"keyvalues/query.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray results = e.getResponse().getJSONArray(\"keyvalues\"); // Process the results } catch (Exception err) { Log.e(\"APSCloud\", \"Exception thrown: \" + err.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.keyValuesQuery(function(err, result) { if (err) { console.error(err.message); } else { result.body.response.keyvalues.forEach(function (key) { console.log(key.name + \": \" + key.value); }); } }); "
    },
    {
        "id": "KeyValues-method-set-arrowdb",
        "url": "KeyValues-method-set",
        "type": "arrowdb",
        "name": "KeyValues.set",
        "content": "Sets a string or binary value referenced by the key name. The size of the value can be up to 2M, and the key name length can be up to 256 characters. The default value type is String. PUT keyvalues/set.json name The name, or key, for this key-value pair. type Value type: \"string\" or \"binary\". Defaults to \"string\". value Value to assoicate with the key. Binary data can be passed as a binary form part. The REST example shows how to send binary data using curl. access_private Determines whether this key-value is publically readable, or stored in a private store. Default is false (publically readable). If set to true, it sets the key/value stored in the current user's private key-value store. Otherwise, it sets the public key-value pair which is readable to everyone. su_id User to create the key-value pair on behalf of. The current user must be an application admin to set a key-value pair on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example sets a key-value and checks the response. Cloud.KeyValues.set({ name: 'welcome_message', value: 'Welcome to Appcelerator Arrow' }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: If type is string $ curl -b cookies.txt -c cookies.txt -X PUT -F \"name=welcome_message\" -F \"value=Welcome to Appcelerator Arrow\" https://api.cloud.appcelerator.com/v1/keyvalues/set.json?key=&pretty_json=true If type is binary (loading data from a file) $ curl -b cookies.txt -c cookies.txt -X PUT -F \"name=binary\" -F \"type=binary\" -F \"value=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"setKeyvalue\" } } ios Example iOS call: NSDictionary *data = @{ @\"name\" : @\"welcome_message\", @\"value\": @\"Welcome to Appcelerator Arrow\" }; [APSKeyValues set:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *keyvalues = e.response[@\"keyvalues\"]; NSDictionary *keyValue = keyvalues[0]; NSString *message = [NSString stringWithFormat:@\"Name : %@\\nValue: %@\\n\", keyValue[@\"name\"], keyValue[@\"value\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APSI SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; // Create dictionary of parameters to be passed with the reques HashMap data = new HashMap(); data.put(\"name\", \"welcome_message\"); data.put(\"value\", \"Welcome to Appcelerator Arrow\"); try { APSKeyValues.set(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Set!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSKeyValues\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSKeyValues\", \"Exception thrown: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSKeyValues\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.keyValuesSet({ name: 'welcome_message', value: 'Welcome to Appcelerator Arrow' }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Value set!'); } }); "
    },
    {
        "name": "Likes",
        "id": "Likes-arrowdb",
        "url": "Likes",
        "type": "arrowdb",
        "content": "Likes The Likes API lets you add a \"like\" to an existing object. Currently, likes can only be added to the following object types: Posts Photos Users Events Checkins Places CustomObjects Statuses Reviews If an object has one or more likes associated to it, it will return a total like count with the object: \"likes_count\": 2 Determining if the Current User Likes an Object To determine if the current user has liked an ArrowDB object, use the Likes.query method to retrieve a list of objects the user liked. If you are executing a query or show method on the ArrowDB object, pass show_user_like=true as a parameter to the method. If the current user liked an object returned by either of those methods, the response object contains the field \"current_user_liked: true\". See the REST API examples for the Checkins.query and Checkins.show methods for details. "
    },
    {
        "id": "Likes-property-created_at-arrowdb",
        "url": "Likes-property-created_at",
        "type": "arrowdb",
        "name": "Likes.created_at",
        "content": "Creation date for this liked object. Date"
    },
    {
        "id": "Likes-property-id-arrowdb",
        "url": "Likes-property-id",
        "type": "arrowdb",
        "name": "Likes.id",
        "content": "Like Object ID. String"
    },
    {
        "id": "Likes-property-likeable_id-arrowdb",
        "url": "Likes-property-likeable_id",
        "type": "arrowdb",
        "name": "Likes.likeable_id",
        "content": "Object ID of the liked object. String"
    },
    {
        "id": "Likes-property-likeable_type-arrowdb",
        "url": "Likes-property-likeable_type",
        "type": "arrowdb",
        "name": "Likes.likeable_type",
        "content": "Object type of the liked object, which is the name of the object, such as Post, Photo, etc. String"
    },
    {
        "id": "Likes-property-updated_at-arrowdb",
        "url": "Likes-property-updated_at",
        "type": "arrowdb",
        "name": "Likes.updated_at",
        "content": "Last update time for this liked object. Date"
    },
    {
        "id": "Likes-property-user-arrowdb",
        "url": "Likes-property-user",
        "type": "arrowdb",
        "name": "Likes.user",
        "content": "User who generated the like. Users"
    },
    {
        "id": "Likes-method-create-arrowdb",
        "url": "Likes-method-create",
        "type": "arrowdb",
        "name": "Likes.create",
        "content": "Adds a \"like\" to an object. Currently, likes can only be associated with one of the following object types, and a user can only like an object once: Posts Photos Users Events Checkins Places CustomObjects Statuses Reviews Once an object has one or more likes attached to it, it will return a total like count with the object: \"likes_count\": 2 You should specify one, and only one, ArrowDB object ID parameter to identify the target object. POST likes/create.json post_id Post object to like. photo_id Photo object to like. user_id User object to like. event_id Event object to like. place_id Place object to like. checkin_id Checkin object to like. status_id Status object to like. review_id Review object to like. custom_object_id Custom object to like. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Requires Release 3.2.0. The following example increments the like count for the specified Post object. Cloud.Likes.create({ post_id: savedPostId }, function (e) { if (e.success) { var like = e.likes[0]; alert('Success:\\n' + 'id: ' + like.id + '\\n'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"post_id=4e33a817d9ca724745000003\" https://api.cloud.appcelerator.com/v1/likes/create.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"createLike\" }, \"response\": { \"likes\": [ { \"id\": \"4e33a817d9ca724745000006\", \"created_at\": \"2011-07-30T06:43:35+0000\", \"updated_at\": \"2011-07-30T06:43:35+0000\", \"user\": { \"id\": \"4e33a817d9ca724745000002\", \"first_name\": \"Bob\", \"last_name\": \"Dude\", \"created_at\": \"2011-07-30T06:43:35+0000\", \"updated_at\": \"2011-07-30T06:43:35+0000\", \"username\": \"bob\", \"email\": \"bob@dude.com\" } } ] } } ios Example iOS call: NSDictionary data = @{@\"post_id\":@\"savedPostId\"}; [APSLikes create:data withBlock:^(APSResponse e) { if (e.success){ NSArray likes = e.response[@\"likes\"]; NSDictionary like = likes[0]; NSString *message = [NSString stringWithFormat:@\"id : %@\\n\", like[@\"id\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"post_id\", \"4e33a817d9ca724745000003\"); try { APSLikes.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Created!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSLikes\", \"ERROR: \" + e.message()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSLikes\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSLikes\", \"Exception throw: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.likesCreate({ post_id: savedPostId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.likes[0]); } }); "
    },
    {
        "id": "Likes-method-delete-arrowdb",
        "url": "Likes-method-delete",
        "type": "arrowdb",
        "name": "Likes.delete",
        "content": "Delete the like from the target object. Only the original submitter can delete the like. Specify one and only one of the ID parameters to identify the target object. DELETE likes/delete.json post_id Post object to delete \"like\" from. photo_id Photo object to delete \"like\" from. user_id User object to delete \"like\" from. event_id Event object to delete \"like\" from. place_id Place object to delete \"like\" from. checkin_id Checkin object to delete \"like\" from. status_id Status object to delete \"like\" from. review_id Review object to delete \"like\" from. custom_object_id Custom object to delete \"like\" from. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Requires Release 3.2.0. The following example decrements the like count for the specified post. Cloud.Likes.remove({ post_id: savedPostId }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/likes/delete.json?key=&pretty_json=true&post_id=4e33a817d9ca724745000003\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"deleteLike\" } } ios Example iOS call: NSDictionary data = @{@\"post_id\":@\"savedPostId\"}; [APSLikes remove:data withBlock:^(APSResponse e) { if (e.success){ [[[UIAlertView alloc] initWithTitle:@\"Success\" message:nil delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"post_id\", \"4e33a817d9ca724745000003\"); try { APSLikes.remove(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Removed!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSLikes\", \"\" + e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSLikes\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSLikes\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.likesDelete({ post_id: savedPostId }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Likes-method-query-arrowdb",
        "url": "Likes-method-query",
        "type": "arrowdb",
        "name": "Likes.query",
        "content": "Performs custom query of likes with sorting and paginating. You can either query the likes of an object using the object's ID, such as the post_id, photo_id, etc. parameter, or the likes generated by a user, by specifying the user_id parameter. A non-administrator user can only retrieve results on the likes they generated. Application administrators can retrieve results on the likes of all users and query likes generated by other users by specifying the user_id parameter. In addition to custom fields, the following pre-defined fields can be used to query and sort likes: su_id : String. User ID of the User that generated the likes. Only an application admininstrator can query likes of other users. likeable_type : String. Object type of the like object, which is the name of the object, such as Post, Photo, etc. likeable_id : String. Object ID of the like object. created_at : Date. Timestamp when the like was created. updated_at : Date. Timestamp when the like was last updated. In ArrowDB 1.1.5 and later, you can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. For details about using the query parameters, see the Search and Query guide. GET likes/query.json post_id Limit query to likes on the identified Post object. photo_id Limit query to likes on the identified Photo object. event_id Limit query to likes on the identified Event object. place_id Limit query to likes on the identified Place object. checkin_id Limit query to likes on the identified Checkin object. review_id Limit query to likes on the identified Review object. custom_object_id Limit query to likes on the identified Custom object. user_object_id Limit query to likes on the identified User object. su_id Limit query to likes generated by the identified User. Only an application administrator can query likes generated by other users. page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. where Constraint values for fields. where should be encoded JSON. If where is not specified, query returns all objects. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in the response JSON. In order to reduce server API calls from an application, the response JSON may include not just the objects that are being queried/searched, but also some important data related to the returned objects, such as owners and referenced objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This API is currently not supported by the ti.cloud module. rest Queries for status likes from the currently logged in user. If you are an administrator, you will retrieve status likes from all users. $ curl -c cookies.txt -b cookies.txt -X GET -d 'where={\"likeable_type\":\"Status\"}' \"https://api.cloud.appcelerator.com/v1/likes/query.json?key=&pretty_json=true&count=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"queryLikes\", \"count\": 100 }, \"response\": { \"likes\": [ { \"id\": \"5397a2c35ceba6088b000003\", \"created_at\": \"2014-06-11T00:28:51+0000\", \"updated_at\": \"2014-06-11T00:28:51+0000\", \"likeable_id\": \"5397a1db5ceba6088b000002\", \"likeable_type\": \"Status\", \"user\": { \"id\": \"53962f98d298520939000006\", \"created_at\": \"2014-06-09T22:05:12+0000\", \"updated_at\": \"2014-06-11T00:22:11+0000\", \"external_accounts\": [], \"confirmed_at\": \"2014-06-09T22:05:12+0000\", \"username\": \"joeuser\", \"admin\": \"false\", \"stats\": { \"photos\": { \"total_count\": 0 }, \"storage\": { \"used\": 0 } } } } ] } } ios Use the [APSCloud sendRequest] method to invoke this REST API directly. android Use the APSCloud.sendRequest() method to invoke this REST API directly. nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.likesDelete({ where: {'likeable_type': 'Status'} }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.likes.forEach(function (like) { console.log(like); }); } }); "
    },
    {
        "name": "Logs",
        "id": "Logs-arrowdb",
        "url": "Logs",
        "type": "arrowdb",
        "content": "Logs The Logs API provides methods for querying Arrow push notification logs up to 3 months old. Logs older than 3 months are purged. You must be logged in as an application admin to use these methods. Log Pagination Since the Logs API only supports the where query parameter and not count, limit, skip, etc., in order to paginate results, execute a range-based query pagination expression on the push log's _id field. For example, by default, the log IDs are presented in descending order. Use the where parameter to return logs with an _id less than the last _id value in the previous results to retrieve the next list of results. where={\"_id\": {\"$lt\": last_id }} "
    },
    {
        "id": "Logs-method-querypushlogdetails-arrowdb",
        "url": "Logs-method-querypushlogdetails",
        "type": "arrowdb",
        "name": "Logs.querypushlogdetails",
        "content": "Performs a custom query for details about a specific Arrow push notification log item specified in the query's where clause. Returns a PushLogDetails object for the specified log item. GET logs/querypushlogdetails.json where Where clause whose value is JSON object consisting of the field name \"push_id\" and the ID of the push notification log item to query for, for example: where={\"push_id\":\"\"} return void titanium Example request that queries push log details for the specified log item. Cloud.sendRequest({ url : \"logs/querypushlogdetails.json\", method : \"GET\", data: { 'where': {'push_id': '54cab4788a1b3c0933bb3bbc'} } }, function(e) {// The callback called when the request completes if (e.success) { alert(e.push_log_details[0]); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request that queries push log details for the push notification log item with the ID \"53c98055e4b03fa5a90c2942\", which was returned in a previous call to querypushlogs. $ curl -b cookies.txt -c cookies.txt -d 'where={\"push_id\":\"53c98055e4b03fa5a90c2942\"}' -X GET \"http://api.cloud.appcelerator.com/v1/logs/querypushlogdetails.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"queryPushLogDetails\", \"more\": false }, \"response\": { \"push_log_details\": [ { \"_id\": \"53c98055e4b03fa5a90c2942\", \"android_types\": [ { \"GCM\": 2 } ], \"app_id\": \"52b392a7f00ed00b1b000194\", \"channel\": \"#broadcast\", \"created_at\": \"2014-07-18T20:15:17.562Z\", \"device_count\": 2, \"locked_at\": \"2014-07-18T20:15:43.555Z\", \"pem_sent_at\": \"2014-07-18T20:15:43.863Z\", \"push_id\": \"53c980549d8b700fc70008e6\", \"send_status\": 1, \"types\": [ { \"android\": 2 } ], \"updated_at\": \"2014-07-18T20:15:16.579Z\" } ] } } ios Example request to retrieve the specified push log. NSDictionary *params = @{ @\"where\": @{ @\"push_id\" : @\"54cbd82802d20d097b09cf80\" } }; [[APSCloud sharedInstance] sendRequest:@\"logs/querypushlogdetails.json\" method:@\"GET\" data:params handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:e.responseString delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the specified push log. HashMap data = new HashMap(); JSONObject params = new JSONObject(\"{'push_id': '54cc212e8fc90956e00e3a10'}\"); data.put(\"where\", params); APSCloud.getInstance().sendRequest(\"logs/querypushlogdetails.json\", \"GET\", data, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(e.getResponse().toString()) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"REST\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSUsers\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.logsQueryPushLogDetails({ where: {'push_id': '54cab4788a1b3c0933bb3bbc'} }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.push_log_details.forEach(function (log) { console.log(log); }); } }); "
    },
    {
        "id": "Logs-method-querypushlogs-arrowdb",
        "url": "Logs-method-querypushlogs",
        "type": "arrowdb",
        "name": "Logs.querypushlogs",
        "content": "Performs a custom query of Arrow push notification logs with sorting and pagination. Returns a list of PushLogs objects that matched the query parameters. To get additional details about a specific PushLogs item, pass the value of PushLogs._id to a querypushlogdetails query. GET logs/querypushlogs.json where Constraint values for fields. where should be JSON encoded. If where is not specified, query returns all objects. return void titanium Example request that queries for push logs. The callback outputs the push ID and payload if the request was successful. Cloud.sendRequest({ url : \"logs/querypushlogs.json\", method : \"GET\", }, function(e) { if (e.success) { e.push_logs.forEach(function(log){ Ti.API.info(log._id + \":\" + JSON.stringify(log.payload)); }); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X GET \"http://api.cloud.appcelerator.com/v1/logs/querypushlogs.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"queryPushLogs\", \"more\": false }, \"response\": { \"push_logs\": [ { \"_id\": \"539b589fc8499a086d000200\", \"app_id\": \"527032812a30cf5d96000003\", \"created_at\": \"2014-06-13T20:01:35.297Z\", \"expire_after_seconds\": null, \"geo_condition\": null, \"locked_at\": \"2014-06-13T20:01:36.833Z\", \"payload\": \"{\\\"alert\\\":\\\"hello\\\",\\\"sound\\\":\\\"none\\\",\\\"vibrate\\\":false}\", \"to_ids\": null, \"updated_at\": \"2014-06-13T20:01:35.297Z\", \"user_id\": null, \"version\": null }, { \"_id\": \"53581c34d8d8f2b28a000098\", \"channel\": \"test\", \"payload\": \"test schedule\", \"geo_condition\": \"{\\\"$geoWithin\\\":{\\\"$centerSphere\\\":[[-122.0507049560547,37.38685989379883],0.00252589]}}\", \"app_id\": \"527032812a30cf5d96000003\", \"push_schedule_id\": \"53581c34d8d8f2b28a000097\", \"scheduled_at\": \"2014-10-24T00:00:00.000Z\", \"created_at\": \"2014-04-23T20:01:56.409Z\", \"updated_at\": \"2014-04-23T20:01:56.409Z\" }, { \"_id\": \"53581a8ed8d8f2b28a000096\", \"channel\": \"test\", \"payload\": \"test schedule\", \"app_id\": \"527032812a30cf5d96000003\", \"push_schedule_id\": \"53581a8ed8d8f2b28a000095\", \"scheduled_at\": \"2014-10-24T00:00:00.000Z\", \"created_at\": \"2014-04-23T19:54:54.163Z\", \"updated_at\": \"2014-04-23T19:54:54.163Z\" } ] } } ios Example request to retrieve all push logs. [[APSCloud sharedInstance] sendRequest:@\"logs/querypushlogs.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:e.responseString delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve all push logs. try { APSCloud.getInstance().sendRequest(\"logs/querypushlogs.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(e.getResponse().toString()) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSCloud\", \"Error: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.logsQueryPushLogs({ where: {'likeable_type': 'Status'} }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.push_logs.forEach(function (log) { console.log(log); }); } }); "
    },
    {
        "name": "Messages",
        "id": "Messages-arrowdb",
        "url": "Messages",
        "type": "arrowdb",
        "content": "Messages The Messages APIs provides methods for sending private messages between users. "
    },
    {
        "id": "Messages-property-body-arrowdb",
        "url": "Messages-property-body",
        "type": "arrowdb",
        "name": "Messages.body",
        "content": "Message body. String"
    },
    {
        "id": "Messages-property-created_at-arrowdb",
        "url": "Messages-property-created_at",
        "type": "arrowdb",
        "name": "Messages.created_at",
        "content": "Message creation date. Date"
    },
    {
        "id": "Messages-property-from-arrowdb",
        "url": "Messages-property-from",
        "type": "arrowdb",
        "name": "Messages.from",
        "content": "Message sender. Users"
    },
    {
        "id": "Messages-property-id-arrowdb",
        "url": "Messages-property-id",
        "type": "arrowdb",
        "name": "Messages.id",
        "content": "ID of the sent message. String"
    },
    {
        "id": "Messages-property-status-arrowdb",
        "url": "Messages-property-status",
        "type": "arrowdb",
        "name": "Messages.status",
        "content": "Status of the message: in-box messages have status of read, unread, or replied. String"
    },
    {
        "id": "Messages-property-subject-arrowdb",
        "url": "Messages-property-subject",
        "type": "arrowdb",
        "name": "Messages.subject",
        "content": "Message subject. String"
    },
    {
        "id": "Messages-property-thread_id-arrowdb",
        "url": "Messages-property-thread_id",
        "type": "arrowdb",
        "name": "Messages.thread_id",
        "content": "Thread ID of the sent message. String"
    },
    {
        "id": "Messages-property-to-arrowdb",
        "url": "Messages-property-to",
        "type": "arrowdb",
        "name": "Messages.to",
        "content": "Message recipients. Users[]"
    },
    {
        "id": "Messages-property-updated_at-arrowdb",
        "url": "Messages-property-updated_at",
        "type": "arrowdb",
        "name": "Messages.updated_at",
        "content": "Message update date. Date"
    },
    {
        "id": "Messages-method-count-arrowdb",
        "url": "Messages-method-count",
        "type": "arrowdb",
        "name": "Messages.count",
        "content": "Retrieves the total number of Message objects. GET messages/count.json return void titanium Example request to retrieve the total number of Message objects. Cloud.sendRequest({ url : \"messages/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/messages/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"messagesCount\", \"count\": 1 } } ios Example request to retrieve the total number of Message objects. [[APSCloud sharedInstance] sendRequest:@\"messages/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of Message objects. APSCloud.getInstance().sendRequest(\"messages/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.messagesCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "Messages-method-create-arrowdb",
        "url": "Messages-method-create",
        "type": "arrowdb",
        "name": "Messages.create",
        "content": "Sends a message with an optional subject to one or more specified users. The thread_id of the first outgoing message is its own id. Replies to the first or subsequent messages in the thread will all use the id of the first message as their thread_id. The output of this API method is the copy of the message saved to the sender's sent mail. POST messages/create.json to_ids Comma-separated list of one or more IDs of Users to send the message to. body The body of the message. subject Message subject. custom_fields User-defined data. See Custom Objects and Custom Fields. su_id ID of the Users to send message on behalf of. The current login user must be the application admin, in order to send a message on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example creates a new message and checks the response. Cloud.Messages.create({ to_ids: toSet.ids.join(','), body: 'Hello World', subject: 'Test Message' }, function (e) { if (e.success) { var message = e.messages[0]; alert('Success:\\n' + 'id: ' + message.id + '\\n' + 'subject: ' + message.subject + '\\n' + 'body: ' + message.body + '\\n' + 'updated_at: ' + message.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"to_ids=4d71445b6f70951043000006,4d7184f06f70951043000012\" -F \"subject=Sunday Afternoon\" -F \"body=Howabout going to the Academy of Sciences?\" https://api.cloud.appcelerator.com/v1/messages/create.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"createMessage\" }, \"response\": { \"messages\": [ { \"id\":\"4d85418dd0afbe013e000027\", \"thread_id\":\"4d85418dd0afbe013e000025\", \"status\":\"sent\", \"subject\":\"Sunday Afternoon\", \"body\":\"Howabout going to the Academy of Sciences?\", \"created_at\":\"2011-03-19T23:51:41+0000\", \"updated_at\":\"2011-03-19T23:51:41+0000\", \"from\": { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" }, \"to\": [ { \"id\":\"4d854129d0afbe013e000022\", \"first_name\":\"Wei\", \"last_name\":\"Kong\", \"created_at\":\"2011-03-19T23:50:01+0000\", \"updated_at\":\"2011-03-19T23:50:01+0000\" }, { \"id\":\"4d85415ad0afbe013e000023\", \"first_name\":\"George\", \"last_name\":\"Dy\", \"created_at\":\"2011-03-19T23:50:50+0000\", \"updated_at\":\"2011-03-19T23:50:50+0000\" } ] } ] } } ios Example iOS call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"to_ids\" : @\"USER_ID1, USER_ID2, USER_ID3\", @\"body\" : @\"Hello World\", @\"subject\": @\"Test Message\" }; [APSMessages create:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *messages = e.response[@\"messages\"]; NSDictionary *currentMessage = messages[0]; NSString *message = [NSString stringWithFormat:@\"id : %@\\n Subject : %@\\nBody : %@\\nUpdated At :%@\", currentMessage[@\"id\"], currentMessage[@\"subject\"], currentMessage[@\"body\"], currentMessage[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_CLOUD_KEY'); final Activity currentActivity = this; Map data = new HashMap(); data.put(\"to_ids\", \"4d71445b6f70951043000006,4d7184f06f70951043000012\"); data.put(\"body\", \"new message!\"); try { APSMessages.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Created!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSMessages\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSMessages\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSMessages\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.messagesCreate({ to_ids: toSet.ids.join(','), body: 'Hello World', subject: 'Test Message' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.messages[0]); } }); "
    },
    {
        "id": "Messages-method-delete-arrowdb",
        "url": "Messages-method-delete",
        "type": "arrowdb",
        "name": "Messages.delete",
        "content": "Delete the message with the given id. The message must be in the current user's inbox or sent mail. There is currently no trash folder and deletion is permanent. Application Admin can delete any Message object. DELETE messages/delete.json message_id ID of the message to delete. su_id User to delete the Message object on behalf of. The user needs to be either the sender or recipient of the message. The current user must be an application admin to delete a Message object on behalf of another user. return void titanium This example deletes a message and checks the response. Cloud.Messages.remove({ message_id: savedMessageId }, function (e) { if (e.success) { alert('Removed'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/messages/delete.json?key=&pretty_json=true&message_id=4d854389d0afbe013e000029\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"deleteMessage\" } } ios Example iOS call: // Create dictionary of parameters to be passed with the request NSDictionary data = @{@\"message_id\" : @\"message_Identifier\"}; [APSMessages remove:data withBlock:^(APSResponse e) { if (e.success){ [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Message Removed\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_CLOUD_KEY'); final Activity currentActivity = this; Map data = new HashMap(); data.put(\"message_id\", \"4d854389d0afbe013e000029\"); try { APSMessages.remove(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Removed!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSMessages\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSLikes\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSMessages\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.messagesDelete({ message_id: savedMessageId }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Messages-method-delete_thread-arrowdb",
        "url": "Messages-method-delete_thread",
        "type": "arrowdb",
        "name": "Messages.delete_thread",
        "content": "Delete all messages in a thread with the given thread_id. The thread must be in the current user's inbox or sent mail. There is currently no trash folder and deletion is permanent. DELETE messages/delete/thread.json thread_id Thread ID of the message thread to delete. return void titanium This example deletes all messages in a thread and checks the response. Cloud.Messages.removeThread({ thread_id: savedThreadId }, function (e) { if (e.success) { alert('Removed'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/messages/delete/thread.json?key=&pretty_json=true&thread_id=4d854389d0afbe013e000029\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"deleteMessageThread\" } } ios Example iOS call: // Create dictionary of parameters to be passed with the request NSDictionary data = @{@\"thread_id\" : @\"thread_Identifier\"}; [APSMessages removeThread:data withBlock:^(APSResponse e) { if (e.success){ [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Message Removed\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_CLOUD_KEY'); Map data = new HashMap(); data.put(\"thread_id\", \"4d854389d0afbe013e000029\"); try { APSMessages.removeThread(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSMessages\", \"Thread removed!\"); } else { Log.e(\"APSMessages\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSLikes\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSMessages\", \"Exception thrown: \" + e.toString()); } } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.messagesDeleteThread({ thread_id: savedThreadId }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Messages-method-query-arrowdb",
        "url": "Messages-method-query",
        "type": "arrowdb",
        "name": "Messages.query",
        "content": "Performs a custom query of Messages. Currently you can not query or sort data stored inside an array or hash in custom fields. In ArrowDB 1.1.5 and later, you can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. For details about using the query parameters, see the Search and Query guide. GET messages/query.json page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. where Constraint values for fields. where should be encoded JSON. You can query any of the standard values for an ACL object, as well as any custom fields that contain simple values, such as String, Number or Boolean values. If where is not specified, query returns all objects. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. return void titanium Example request to retrieve messages with the subject \"Sunday Afternoon\". Cloud.sendRequest({ url : \"messages/query.json\", method : \"GET\", data: { \"where\" : {\"subject\" : \"Sunday Afternoon\"} } }, function(e) { if (e.success) { alert(JSON.stringify(e)); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request that returns all messages that have the subject \"Sunday Afternoon\": $ curl -b cookies.txt -c cookies.txt -X GET --data-urlencode 'where={\"subject\":\"Sunday Afternoon\"}' \"https://api.cloud.appcelerator.com/v1/messages/query.json?key=&pretty_json=true&count=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"queryMessages\", \"count\": 100 }, \"response\": { \"messages\": [ { \"id\": \"53d8390588971f081c0012ef\", \"from_id\": \"53d7c9d188971f0824001269\", \"to_ids\": [ \"53d8372e88971f0824001463\", \"53d8377388971f0824001465\" ], \"thread_id\": \"53d8390588971f081c0012ee\", \"subthread_id\": \"53d8390588971f081c0012ed\", \"status\": \"unread\", \"subject\": \"Sunday Afternoon\", \"body\": \"Wanna catch a movie later?\" }, { \"id\": \"53d8390588971f081c0012ee\", \"from_id\": \"53d7c9d188971f0824001269\", \"to_ids\": [ \"53d8372e88971f0824001463\", \"53d8377388971f0824001465\" ], \"thread_id\": \"53d8390588971f081c0012ee\", \"subthread_id\": \"53d8390588971f081c0012ed\", \"status\": \"sent\", \"subject\": \"Sunday Afternoon\", \"body\": \"Howabout going to the Academy of Sciences?\" } ] } } ios Example request to retrieve messages with the subject \"Sunday Afternoon\". NSDictionary *params = @{ @\"where\": @{ @\"subject\" : @\"Sunday Afternoon\" } }; [[APSCloud sharedInstance] sendRequest:@\"messagess/query.json\" method:@\"GET\" data:params handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:e.responseString delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve messages with the subject \"Sunday Afternoon\". HashMap data = new HashMap(); JSONObject params = new JSONObject(\"{'subject': 'Sunday Afternoon'}\"); data.put(\"where\", params); APSCloud.getInstance().sendRequest(\"messages/query.json\", \"GET\", data, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(e.getResponseString()) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"REST\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSUsers\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.messagesQuery({ where: {'subject' : 'Sunday Afternoon'} }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.messages.forEach(function (message) { console.log(message); }); } }); "
    },
    {
        "id": "Messages-method-reply-arrowdb",
        "url": "Messages-method-reply",
        "type": "arrowdb",
        "name": "Messages.reply",
        "content": "Replies to all recipients of the given message id. The status of the message will be changed to replied. POST messages/reply.json message_id ID of the message to reply to. body Reply message body text. return void titanium This example replies to a message and checks the response. Cloud.Messages.reply({ message_id: savedMessageId, body: 'Welcome' }, function (e) { if (e.success) { var message = e.messages[0]; alert('Success:\\n' + 'id: ' + message.id + '\\n' + 'subject: ' + message.subject + '\\n' + 'body: ' + message.body + '\\n' + 'updated_at: ' + message.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"body=Academy of sciences sounds great!\" -F \"message_id=4d85418dd0afbe013e000025\" https://api.cloud.appcelerator.com/v1/messages/reply.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"replyMessage\" }, \"response\": { \"messages\": [ { \"id\":\"4d854389d0afbe013e00002a\", \"thread_id\":\"4d85418dd0afbe013e000025\", \"status\":\"sent\", \"subject\":\"Sunday Afternoon\", \"body\":\"Academy of Sciences sounds great!\", \"created_at\":\"2011-03-20T00:00:09+0000\", \"updated_at\":\"2011-03-20T00:00:09+0000\", \"from\": { \"id\":\"4d854129d0afbe013e000022\", \"first_name\":\"Wei\", \"last_name\":\"Kong\", \"created_at\":\"2011-03-19T23:50:01+0000\", \"updated_at\":\"2011-03-19T23:50:01+0000\" }, \"to\": [ { \"id\":\"4d85415ad0afbe013e000023\", \"first_name\":\"George\", \"last_name\":\"Dy\", \"created_at\":\"2011-03-19T23:50:50+0000\", \"updated_at\":\"2011-03-19T23:50:50+0000\" }, { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" } ] } ] } } ios Example iOS call: // Create dictionary of parameters to be passed with the request NSDictionary data = @{ @\"message_id\" : @\"Message_Identifier\", @\"body\" : @\"Welcome\" }; [APSMessages remove:data withBlock:^(APSResponse e) { if (e.success){ NSArray messages = e.response[@\"messages\"]; NSDictionary currentMessage = messages[0]; NSString *message = [NSString stringWithFormat:@\"id : %@\\n Subject : %@\\nBody : %@\\nUpdated At :%@\", currentMessage[@\"id\"], currentMessage[@\"subject\"], currentMessage[@\"body\"], currentMessage[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_CLOUD_KEY'); final Activity currentActivity = this; Map data = new HashMap(); data.put(\"message_id\", \"4d85418dd0afbe013e000025\"); data.put(\"body\", \"reply message!\"); try { APSMessages.reply(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Replied!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSMessages\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSLikes\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSMessages\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.messagesReply({ message_id: savedMessageId, body: 'Welcome' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.messages[0]); } }); "
    },
    {
        "id": "Messages-method-show-arrowdb",
        "url": "Messages-method-show",
        "type": "arrowdb",
        "name": "Messages.show",
        "content": "Shows a message in the user's mailbox. GET messages/show.json message_id ID of the message. return void titanium This example retrieves information about a message and checks the response. Cloud.Messages.show({ message_id: savedMessageId }, function (e) { if (e.success) { var message = e.messages[0]; alert('Success:\\n' + 'id: ' + message.id + '\\n' + 'subject: ' + message.subject + '\\n' + 'body: ' + message.body + '\\n' + 'updated_at: ' + message.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/messages/show.json?key=&message_id=\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"showMessage\", }, \"response\": { \"messages\": [ { \"id\":\"4d85418dd0afbe013e000025\", \"thread_id\":\"4d85418dd0afbe013e000025\", \"status\":\"read\", \"subject\":\"Sunday Afternoon\", \"body\":\"How about going to the Academy of Sciences?\", \"created_at\":\"2011-03-19T23:51:41+0000\", \"updated_at\":\"2011-03-19T23:54:30+0000\", \"from\": { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" }, \"to\": [ { \"id\":\"4d854129d0afbe013e000022\", \"first_name\":\"Wei\", \"last_name\":\"Kong\", \"created_at\":\"2011-03-19T23:50:01+0000\", \"updated_at\":\"2011-03-19T23:50:01+0000\" }, { \"id\":\"4d85415ad0afbe013e000023\", \"first_name\":\"George\", \"last_name\":\"Dy\", \"created_at\":\"2011-03-19T23:50:50+0000\", \"updated_at\":\"2011-03-19T23:50:50+0000\" } ] } ] } } ios Example iOS call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"message_id\" : @\"Message_Identifier\", }; [APSMessages show:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *messages = e.response[@\"messages\"]; NSDictionary *currentMessage = messages[0]; NSString *message = [NSString stringWithFormat:@\"id : %@\\n Subject : %@\\nBody : %@\\nUpdated At :%@\", currentMessage[@\"id\"], currentMessage[@\"subject\"], currentMessage[@\"body\"], currentMessage[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_CLOUD_KEY'); HashMap data = new HashMap(); data.put(\"message_id\", 'MESSAGE_ID'); try { APSMessages.show(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray messages = responseJSON.getJSONArray(\"messages\"); // Do stuff with messages... } catch (JSONException err) { Log.e(\"APSMessages\", \"Exception thrown: \" + err.toString()); } } else { Log.e(\"APSMessages\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSLikes\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSMessages\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.messagesShow({ message_id: savedMessageId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.messages[0]); } }); "
    },
    {
        "id": "Messages-method-show_inbox-arrowdb",
        "url": "Messages-method-show_inbox",
        "type": "arrowdb",
        "name": "Messages.show_inbox",
        "content": "Shows messages in the current user's inbox. Messages in the inbox have the status of unread, read, or replied. GET messages/show/inbox.json page Request page number, default is 1. per_page Number of results per page, default is 10. return void titanium This example requests a list of messages in the inbox and checks the response. Cloud.Messages.showInbox(function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.messages.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt https://api.cloud.appcelerator.com/v1/messages/show/inbox.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"showMessagesInbox\", \"page\":1, \"per_page\":10, \"total_pages\":1, \"total_results\":1 }, \"response\": { \"messages\": [ { \"id\":\"4d85418dd0afbe013e000025\", \"thread_id\":\"4d85418dd0afbe013e000025\", \"status\":\"read\", \"subject\":\"Sunday Afternoon\", \"body\":\"Howabout going to the Academy of Sciences?\", \"created_at\":\"2011-03-19T23:51:41+0000\", \"updated_at\":\"2011-03-19T23:54:30+0000\", \"from\": { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" }, \"to\": [ { \"id\":\"4d854129d0afbe013e000022\", \"first_name\":\"Wei\", \"last_name\":\"Kong\", \"created_at\":\"2011-03-19T23:50:01+0000\", \"updated_at\":\"2011-03-19T23:50:01+0000\" }, { \"id\":\"4d85415ad0afbe013e000023\", \"first_name\":\"George\", \"last_name\":\"Dy\", \"created_at\":\"2011-03-19T23:50:50+0000\", \"updated_at\":\"2011-03-19T23:50:50+0000\" } ] } ] } } ios Example iOS call: [APSMessages showInbox:nil withBlock:^(APSResponse *e) { if (e.success){ NSArray *messages = e.response[@\"messages\"]; for (NSDictionary *currentMessage in messages) { NSString *message = [NSString stringWithFormat:@\"id : %@\\n Subject : %@\\nBody : %@\\nUpdated At :%@\", currentMessage[@\"id\"], currentMessage[@\"subject\"], currentMessage[@\"body\"], currentMessage[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_CLOUD_KEY'); try { APSMessages.showInbox(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray messages = e.getResponse().getJSONArray(\"messages\"); if (messages.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.messagesShowInbox(function(err, result) { if (err) { console.error(err.message); } else { result.body.response.messages.forEach(function(message) { console.log(message); }); } }); "
    },
    {
        "id": "Messages-method-show_sent-arrowdb",
        "url": "Messages-method-show_sent",
        "type": "arrowdb",
        "name": "Messages.show_sent",
        "content": "Shows messages in the current user's sent messages. GET messages/show/sent.json page Request page number, default is 1. per_page Number of results per page, default is 10. return void titanium This example requests a list of messages that have been sent and checks the response. Cloud.Messages.showSent(function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.messages.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt https://api.cloud.appcelerator.com/v1/messages/show/sent.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"showMessagesSent\", \"page\":1, \"per_page\":10, \"total_pages\":1, \"total_results\":1 }, \"response\": { \"messages\": [ { \"id\":\"4d85418dd0afbe013e000027\", \"thread_id\":\"4d85418dd0afbe013e000025\", \"status\":\"sent\", \"subject\":\"Sunday Afternoon\", \"body\":\"Howabout going to the Academy of Sciences?\", \"created_at\":\"2011-03-19T23:51:41+0000\", \"updated_at\":\"2011-03-19T23:51:41+0000\", \"from\": { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" }, \"to\": [ { \"id\":\"4d854129d0afbe013e000022\", \"first_name\":\"Wei\", \"last_name\":\"Kong\", \"created_at\":\"2011-03-19T23:50:01+0000\", \"updated_at\":\"2011-03-19T23:50:01+0000\" }, { \"id\":\"4d85415ad0afbe013e000023\", \"first_name\":\"George\", \"last_name\":\"Dy\", \"created_at\":\"2011-03-19T23:50:50+0000\", \"updated_at\":\"2011-03-19T23:50:50+0000\" } ] } ] } } ios Example iOS call: [APSMessages showSent:nil withBlock:^(APSResponse *e) { if (e.success){ NSArray *messages = e.response[@\"messages\"]; for (NSDictionary *currentMessage in messages) { NSString *message = [NSString stringWithFormat:@\"id : %@\\n Subject : %@\\nBody : %@\\nUpdated At :%@\", currentMessage[@\"id\"], currentMessage[@\"subject\"], currentMessage[@\"body\"], currentMessage[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_CLOUD_KEY'); try { APSMessages.showSent(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray messages = e.getResponse().getJSONArray(\"messages\"); if (messages.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.messagesShowSent(function(err, result) { if (err) { console.error(err.message); } else { result.body.response.messages.forEach(function(message) { console.log(message); }); } }); "
    },
    {
        "id": "Messages-method-show_thread-arrowdb",
        "url": "Messages-method-show_thread",
        "type": "arrowdb",
        "name": "Messages.show_thread",
        "content": "Show messages with the given thread_id from the user's inbox. If the status of any of the returned messages is unread, it will be changed to read. GET messages/show/thread.json thread_id ID of the thread to show messages from. page Request page number, default is 1. per_page Number of results per page, default is 10. return void titanium This example requests a list of messages in a thread and checks the response. Cloud.Messages.showThread({ thread_id: savedThreadId }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.messages.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/messages/show/thread.json?key=&pretty_json=true&thread_id=4d85418dd0afbe013e000025\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"showThreadMessages\", \"page\":1, \"per_page\":10, \"total_pages\":1, \"total_results\":3 }, \"response\": { \"messages\": [ { \"id\":\"4d869af5d0afbe1074000006\", \"thread_id\":\"4d85418dd0afbe013e000025\", \"status\":\"unread\", \"subject\":\"Sunday Afternoon\", \"body\":\"That was a fun Sunday afternoon!\", \"created_at\":\"2011-03-21T00:25:25+0000\", \"updated_at\":\"2011-03-21T00:25:25+0000\", \"from\": { \"id\":\"4d854129d0afbe013e000022\", \"first_name\":\"Wei\", \"last_name\":\"Kong\", \"created_at\":\"2011-03-19T23:50:01+0000\", \"updated_at\":\"2011-03-19T23:50:01+0000\" }, \"to\": [ { \"id\":\"4d85415ad0afbe013e000023\", \"first_name\":\"George\", \"last_name\":\"Dy\", \"created_at\":\"2011-03-19T23:50:50+0000\", \"updated_at\":\"2011-03-19T23:50:50+0000\" }, { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" } ] }, { \"id\":\"4d854389d0afbe013e000028\", \"thread_id\":\"4d85418dd0afbe013e000025\", \"status\":\"unread\", \"subject\":\"Sunday Afternoon\", \"body\":\"Academy of Sciences sounds great!\", \"created_at\":\"2011-03-20T00:00:09+0000\", \"updated_at\":\"2011-03-20T00:00:09+0000\", \"from\": { \"id\":\"4d854129d0afbe013e000022\", \"first_name\":\"Wei\", \"last_name\":\"Kong\", \"created_at\":\"2011-03-19T23:50:01+0000\", \"updated_at\":\"2011-03-19T23:50:01+0000\" }, \"to\": [ { \"id\":\"4d85415ad0afbe013e000023\", \"first_name\":\"George\", \"last_name\":\"Dy\", \"created_at\":\"2011-03-19T23:50:50+0000\", \"updated_at\":\"2011-03-19T23:50:50+0000\" }, { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" } ] }, { \"id\":\"4d85418dd0afbe013e000026\", \"thread_id\":\"4d85418dd0afbe013e000025\", \"status\":\"unread\", \"subject\":\"Sunday Afternoon\", \"body\":\"Howabout going to the Academy of Sciences?\", \"created_at\":\"2011-03-19T23:51:41+0000\", \"updated_at\":\"2011-03-19T23:51:41+0000\", \"from\": { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" }, \"to\": [ { \"id\":\"4d854129d0afbe013e000022\", \"first_name\":\"Wei\", \"last_name\":\"Kong\", \"created_at\":\"2011-03-19T23:50:01+0000\", \"updated_at\":\"2011-03-19T23:50:01+0000\" }, { \"id\":\"4d85415ad0afbe013e000023\", \"first_name\":\"George\", \"last_name\":\"Dy\", \"created_at\":\"2011-03-19T23:50:50+0000\", \"updated_at\":\"2011-03-19T23:50:50+0000\" } ] } ] } } ios Example iOS call: NSDictionary data = @{@\"thread_id\":@\"savedThreadId\"}; [APSMessages showThread:data withBlock:^(APSResponse e) { if (e.success){ NSArray messages = e.response[@\"messages\"]; for (NSDictionary currentMessage in messages) { NSString *message = [NSString stringWithFormat:@\"id : %@\\n Subject : %@\\nBody : %@\\nUpdated At :%@\", currentMessage[@\"id\"], currentMessage[@\"subject\"], currentMessage[@\"body\"], currentMessage[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_CLOUD_KEY'); HashMap data = new HashMap(); data.put(\"thread_id\", \"4d85418dd0afbe013e000025\"); try { APSMessages.showThread(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray messages = e.getResponse().getJSONArray(\"messages\"); if (messages.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.messagesShowThreads({ thread_id: savedThreadId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.messages[0]); } }); "
    },
    {
        "id": "Messages-method-show_threads-arrowdb",
        "url": "Messages-method-show_threads",
        "type": "arrowdb",
        "name": "Messages.show_threads",
        "content": "Shows the first message in each of the most recent threads in the user's inbox. GET messages/show/threads.json page Request page number, default is 1. per_page Number of results per page, default is 10. return void titanium This example requests a list of message threads and checks the response. Cloud.Messages.showThreads(function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.messages.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt https://api.cloud.appcelerator.com/v1/messages/show/threads.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"showThreads\", \"page\":1, \"per_page\":10, \"total_pages\":1, \"total_results\":2 }, \"response\": { \"messages\": [ { \"id\":\"4d869af5d0afbe1074000006\", \"thread_id\":\"4d85418dd0afbe013e000025\", \"status\":\"unread\", \"subject\":\"Sunday Afternoon\", \"body\":\"That was a fun Sunday afternoon!\", \"created_at\":\"2011-03-21T00:25:25+0000\", \"updated_at\":\"2011-03-21T00:25:25+0000\", \"from\": { \"id\":\"4d854129d0afbe013e000022\", \"first_name\":\"Wei\", \"last_name\":\"Kong\", \"created_at\":\"2011-03-19T23:50:01+0000\", \"updated_at\":\"2011-03-19T23:50:01+0000\" }, \"to\": [ { \"id\":\"4d85415ad0afbe013e000023\", \"first_name\":\"George\", \"last_name\":\"Dy\", \"created_at\":\"2011-03-19T23:50:50+0000\", \"updated_at\":\"2011-03-19T23:50:50+0000\" }, { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" } ] }, { \"id\":\"4d867eb7d0afbe1074000004\", \"thread_id\":\"4d867eb7d0afbe1074000003\", \"status\":\"unread\", \"subject\":\"Appcelerator Cloud Services Relase Date\", \"body\":\"The private beta will be released on March 28\", \"created_at\":\"2011-03-20T22:24:55+0000\", \"updated_at\":\"2011-03-20T22:24:55+0000\", \"from\": { \"id\":\"4d854129d0afbe013e000022\", \"first_name\":\"Wei\", \"last_name\":\"Kong\", \"created_at\":\"2011-03-19T23:50:01+0000\", \"updated_at\":\"2011-03-19T23:50:01+0000\" }, \"to\": [ { \"id\":\"4d7e6493d0afbe01d8000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-14T18:55:15+0000\", \"updated_at\":\"2011-03-19T05:05:29+0000\" }, { \"id\":\"4d85415ad0afbe013e000023\", \"first_name\":\"George\", \"last_name\":\"Dy\", \"created_at\":\"2011-03-19T23:50:50+0000\", \"updated_at\":\"2011-03-19T23:50:50+0000\" } ] } ] } } ios Example iOS call: [APSMessages showThreads:nil withBlock:^(APSResponse *e) { if (e.success){ NSArray *messages = e.response[@\"messages\"]; for (NSDictionary *currentMessage in messages) { NSString *message = [NSString stringWithFormat:@\"id : %@\\n Subject : %@\\nBody : %@\\nUpdated At :%@\", currentMessage[@\"id\"], currentMessage[@\"subject\"], currentMessage[@\"body\"], currentMessage[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_CLOUD_KEY'); try { APSMessages.showThreads(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray messages = e.getResponse().getJSONArray(\"messages\"); if (messages.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.messagesShowThreads(function(err, result) { if (err) { console.error(err.message); } else { result.body.response.messages.forEach(function(message) { console.log(message); }); } }); "
    },
    {
        "name": "Reviewable",
        "id": "Reviewable-arrowdb",
        "url": "Reviewable",
        "type": "arrowdb",
        "content": "Reviewable A set of fields that are added to objects that can be reviewed. "
    },
    {
        "id": "Reviewable-property-ratings_average-arrowdb",
        "url": "Reviewable-property-ratings_average",
        "type": "arrowdb",
        "name": "Reviewable.ratings_average",
        "content": "Average rating for this object. Only present if the object has been reviewed. Number"
    },
    {
        "id": "Reviewable-property-ratings_count-arrowdb",
        "url": "Reviewable-property-ratings_count",
        "type": "arrowdb",
        "name": "Reviewable.ratings_count",
        "content": "Total number of reviews for this object that include a rating. Only present if the object has been reviewed. Number"
    },
    {
        "id": "Reviewable-property-ratings_summary-arrowdb",
        "url": "Reviewable-property-ratings_summary",
        "type": "arrowdb",
        "name": "Reviewable.ratings_summary",
        "content": "Breakdown of the number of reviews that specified a given rating value. For example, if your ratings range from 1-5, the ratings summary might look like this: ratings_summary: { \"1\" : 1, \"2\" : 0, \"3\" : 5, \"4\" : 50, \"5\" : 12 } Only present if the object has been reviewed. Hash"
    },
    {
        "id": "Reviewable-property-reviews-arrowdb",
        "url": "Reviewable-property-reviews",
        "type": "arrowdb",
        "name": "Reviewable.reviews",
        "content": "List of reviews for this object. Only present if the object has been reviewed. Reviews[]"
    },
    {
        "id": "Reviewable-property-reviews_count-arrowdb",
        "url": "Reviewable-property-reviews_count",
        "type": "arrowdb",
        "name": "Reviewable.reviews_count",
        "content": "Total number of reviews for this object. Only present if the object has been reviewed. Number"
    },
    {
        "name": "PhotoCollections",
        "id": "PhotoCollections-arrowdb",
        "url": "PhotoCollections",
        "type": "arrowdb",
        "content": "PhotoCollections The PhotoCollections object represents a collection of photos. Collections can be nested. "
    },
    {
        "id": "PhotoCollections-property-counts-arrowdb",
        "url": "PhotoCollections-property-counts",
        "type": "arrowdb",
        "name": "PhotoCollections.counts",
        "content": "Object with fields: photos: Number. Number of photos in this collection. total_photos: Number. Number of photos in this collection and subcollections. subcollections: Number. Number of subcollections in this collection. Hash"
    },
    {
        "id": "PhotoCollections-property-cover_photo-arrowdb",
        "url": "PhotoCollections-property-cover_photo",
        "type": "arrowdb",
        "name": "PhotoCollections.cover_photo",
        "content": "Photo to use as a cover photo for the collection. Photos"
    },
    {
        "id": "PhotoCollections-property-created_at-arrowdb",
        "url": "PhotoCollections-property-created_at",
        "type": "arrowdb",
        "name": "PhotoCollections.created_at",
        "content": "Creation date for this user object. Date"
    },
    {
        "id": "PhotoCollections-property-id-arrowdb",
        "url": "PhotoCollections-property-id",
        "type": "arrowdb",
        "name": "PhotoCollections.id",
        "content": "Generated ID for this object. String"
    },
    {
        "id": "PhotoCollections-property-name-arrowdb",
        "url": "PhotoCollections-property-name",
        "type": "arrowdb",
        "name": "PhotoCollections.name",
        "content": "Name of the collection. String"
    },
    {
        "id": "PhotoCollections-property-parent_collection-arrowdb",
        "url": "PhotoCollections-property-parent_collection",
        "type": "arrowdb",
        "name": "PhotoCollections.parent_collection",
        "content": "Collection object that contains this subcollection. PhotoCollections"
    },
    {
        "id": "PhotoCollections-property-updated_at-arrowdb",
        "url": "PhotoCollections-property-updated_at",
        "type": "arrowdb",
        "name": "PhotoCollections.updated_at",
        "content": "Last update time for this user object. Date"
    },
    {
        "id": "PhotoCollections-property-user-arrowdb",
        "url": "PhotoCollections-property-user",
        "type": "arrowdb",
        "name": "PhotoCollections.user",
        "content": "Owner of this collection. Users"
    },
    {
        "id": "PhotoCollections-method-batch_delete-arrowdb",
        "url": "PhotoCollections-method-batch_delete",
        "type": "arrowdb",
        "name": "PhotoCollections.batch_delete",
        "content": "Deletes PhotoCollections objects that match the query constraints provided in the where parameter. If no where parameter is provided, all PhotoCollections objects are deleted. Note that an HTTP 200 code (success) is returned if the call completed successfully but the query matched no objects. For performance reasons, the number of objects that can be deleted in a single batch delete operation is limited to 100,000. The matched objects are deleted asynchronously in a separate process. The cover photo associated with any of the matched objects are not not deleted. You must be an application admin to run this command. DELETE collections/batch_delete.json where Encoded JSON object that specifies constraint values for PhotoCollections objects to delete. If not specified, all PhotoCollections objects are deleted. return void titanium Example request to delete all Photo Collection objects. Cloud.sendRequest({ url : \"collections/batch_delete.json\", method : \"DELETE\" }, function(e) { if (e.success) { alert(\"All Photo Collection objects have been deleted.\"); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE -F \"where={\\\"favorite_color\\\":\\\"blue\\\"}\" https://api.cloud.appcelerator.com/v1/collections/batch_delete.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"batchDelete\" } } ios Example request to delete all Photo Collection objects. [[APSCloud sharedInstance] sendRequest:@\"collections/batch_delete.json\" method:@\"DELETE\" data:nil handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"All Photo Collection object have been deleted.\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to delete all Photo Collection objects. APSCloud.getInstance().sendRequest(\"collections/batch_delete.json\", \"DELETE\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"All Photo Collection objects have been deleted.\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photoCollectionsBatchDelete({ where: {'favorite_color': 'blue'} }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "PhotoCollections-method-count-arrowdb",
        "url": "PhotoCollections-method-count",
        "type": "arrowdb",
        "name": "PhotoCollections.count",
        "content": "Retrieves the total number of PhotoCollection objects. GET collections/count.json return void titanium Example request to retrieve the total number of PhotoCollection objects. Cloud.sendRequest({ url : \"collections/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/collections/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"collectionsCount\", \"count\": 1 } } ios Example request to retrieve the total number of Photo Collection objects. [[APSCloud sharedInstance] sendRequest:@\"collections/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of Photo Collection objects. APSCloud.getInstance().sendRequest(\"collections/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photoCollectionsCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "PhotoCollections-method-create-arrowdb",
        "url": "PhotoCollections-method-create",
        "type": "arrowdb",
        "name": "PhotoCollections.create",
        "content": "Collections contain one or more photos and/or sub-collections. These can be used as photo albums for a user. To create a subcollection, specify a parent_collection_id when creating a collection. If the collection has been created or updated with a cover_photo_id, photo details will be returned with collection information. If a cover_photo_id has not been assigned, the first photo found in the collection or its sub-collections will be returned as the cover photo. POST collections/create.json name Name of the collection. The name must be unique across other top-level collections. If this is a sub-collection, the name must be unique across other sub-collections of the same parent. parent_collection_id Parent collection ID. Specify when creating a subcollection. cover_photo_id ID of the photo to use as a cover photo. The photo does not need to be in the collection. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this collection. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this collection. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id User ID to create the collection on behalf of. The current login user must be an application admin to create a collection on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example creates a new photo collection and checks the response. Cloud.PhotoCollections.create({ name: 'Party Pictures' }, function (e) { if (e.success) { var collection = e.collections[0]; alert('Success:\\n' + 'id: ' + collection.id + '\\n' + 'name: ' + collection.name + '\\n' + 'count: ' + collection.counts.total_photos + '\\n' 'updated_at: ' + collection.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"name=Office Fun\" \"https://api.cloud.appcelerator.com/v1/collections/create.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"method_name\": \"createCollection\", \"status\": \"ok\" }, \"response\": { \"collections\": [ { \"name\": \"Office Fun\", \"created_at\": \"2011-06-08T18:32:30+0000\", \"updated_at\": \"2011-06-08T18:32:30+0000\", \"id\": \"4defc03ed0afbe0400000001\", \"user\": { \"created_at\": \"2011-05-26T20:48:07+0000\", \"updated_at\": \"2011-06-04T01:54:39+0000\", \"id\": \"4ddebc87d0afbe5a54000001\", \"last_name\": \"Goff\", \"email\": \"mike@appcelerator.com\", \"first_name\": \"Mike\" }, \"counts\": { \"photos\": 0, \"total_photos\": 0, \"sub_collections\": 0 } } ] } } ios Example iOS call: NSDictionary *data = @{ @\"name\" : @\"Party Pictures\" }; [APSPhotoCollections create:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *collections = e.response[@\"collections\"]; NSDictionary *collection = collections[0]; NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nCount: %@\\nUpdated at : %@\\n\", collection[@\"id\"], collection[@\"name\"], collection[@\"count\"], collection[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"name\", \"Office Fun\"); try { APSPhotoCollections.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Created!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSPhotoCollections\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPhotoCollections\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photoCollectionsBatchDelete({ name: 'Party Pictures' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.collections[0]); } }); "
    },
    {
        "id": "PhotoCollections-method-delete-arrowdb",
        "url": "PhotoCollections-method-delete",
        "type": "arrowdb",
        "name": "PhotoCollections.delete",
        "content": "Delete an empty collection. An error will be returned if a collection contains any photos or subcollections. An application admin can delete any photo collection. The cover_photo associated with the collection is not deleted. DELETE collections/delete.json collection_id ID of the collection to delete. su_id User ID to delete the collection on behalf of. The user must be the creator of the collection. The current login user must be an application admin to delete a collection on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example deletes a photo collection and checks the response. Cloud.PhotoCollections.remove({ collection_id: savedPhotoCollectionId }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/collections/delete.json?key=&pretty_json=true&collection_id=4e013938d0afbe3896000009\" Example JSON response: { \"meta\": { \"code\": 200, \"method_name\": \"deleteCollection\", \"status\": \"ok\" } } ios Example iOS call: NSDictionary *data = @{ @\"collection_id\" : @\"savedPhotoCollectionID\" }; [APSPhotoCollections remove:data withBlock:^(APSResponse *e) { if (e.success){ [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Photo Removed\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"collection_id\", \"4e013938d0afbe3896000009\"); try { APSPhotoCollections.remove(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Removed!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSPhotoCollections\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPhotoCollections\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photoCollectionsDelete({ collection_id: savedPhotoCollectionId }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "PhotoCollections-method-search-arrowdb",
        "url": "PhotoCollections-method-search",
        "type": "arrowdb",
        "name": "PhotoCollections.search",
        "content": "Search for top-level collections owned by the given user. Subcollections cannot be found this way. See Show Subcollections to view the subcollections of a collection. GET collections/search.json user_id ID of the user to find collections for. page Request page number, default is 1. per_page Number of results per page, default is 10. response_json_depth Nested object depth level counts in response JSON. In order to reduce server API calls from an application, the response JSON may include not just the objects that are being queried/searched, but also some important data related to the returned objects such as object's owner and referenced objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example searches for collections and checks the response. Cloud.PhotoCollections.search({ user_id: savedUserId }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.collections.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/collections/search.json?user_id=4e004e4ed0afbe2f1800003c&key=&pretty_json=true\" Example JSON response: { \"meta\": { \"total_pages\": 1, \"code\": 200, \"method_name\": \"searchCollections\", \"page\": 1, \"total_results\": 1, \"per_page\": 10, \"status\": \"ok\" }, \"response\": { \"collections\": [ { \"name\": \"Skydiving\", \"created_at\": \"2011-06-21T07:54:54+0000\", \"updated_at\": \"2011-06-21T07:54:54+0000\", \"id\": \"4e004e4ed0afbe2f1800003f\", \"user\": { \"created_at\": \"2011-06-21T07:54:54+0000\", \"updated_at\": \"2011-06-21T07:54:54+0000\", \"id\": \"4e004e4ed0afbe2f1800003c\", \"last_name\": \"Mike\", \"email\": \"mike@appcelerator.com\", \"first_name\": \"Goff\" }, \"counts\": { \"photos\": 0, \"total_photos\": 0, \"subcollections\": 0 } } ] } } ios Example iOS call: NSDictionary *data = @{ @\"user_id\" : @\"savedUserID\" }; [APSPhotoCollections search:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *collections = e.response[@\"collections\"]; for (NSDictionary *collection in collection) { NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nCount: %@\\nUpdated at : %@\\n\", collection[@\"id\"], collection[@\"name\"], collection[@\"count\"], collection[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"user_id\", \"4e004e4ed0afbe2f1800003c\"); try { APSPhotoColllections.search(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray collections = e.getResponse().getJSONArray(\"collections\"); if (collections.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photoCollectionsSearch({ user_id: savedUserId }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.collections.forEach(function(collection) { console.log(collection); }); } }); "
    },
    {
        "id": "PhotoCollections-method-show-arrowdb",
        "url": "PhotoCollections-method-show",
        "type": "arrowdb",
        "name": "PhotoCollections.show",
        "content": "Shows information about a collection including the cover photo, owner, parent collection, and counts of its contents. See Show Subcollections and Show Photos to view the contents of a collection. GET collections/show.json collection_id ID of the collection to retrieve photos from. response_json_depth Nested object depth level counts in the response JSON. In order to reduce server API calls from an application, the response JSON may include not just the objects that are being queried/searched, but also some important data related to the returned objects such as the object's owner or referenced objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example retrieves information about a photo collection and checks the response. Cloud.PhotoCollections.show({ collection_id: savedPhotoCollectionId }, function (e) { if (e.success) { var collection = e.collections[0]; alert('Success:\\n' + 'id: ' + collection.id + '\\n' + 'name: ' + collection.name + '\\n' + 'count: ' + collection.counts.total_photos + '\\n' 'updated_at: ' + collection.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/collections/show.json?key=&pretty_json=true&collection_id=4e012ce0d0afbe362a00000a\" Example JSON response: { \"meta\": { \"code\": 200, \"method_name\": \"showCollection\", \"status\": \"ok\" }, \"response\": { \"collections\": [ { \"name\": \"Subcollection 1\", \"parent_collection\": { \"name\": \"Skydiving\", \"created_at\": \"2011-06-21T23:44:32+0000\", \"updated_at\": \"2011-06-21T23:44:32+0000\", \"id\": \"4e012ce0d0afbe362a000009\", \"user\": { \"created_at\": \"2011-06-21T23:44:10+0000\", \"updated_at\": \"2011-06-21T23:44:31+0000\", \"username\": \"bob\", \"id\": \"4e012ccad0afbe362a000002\", \"last_name\": \"Dude\", \"email\": \"bob@dude.com\", \"first_name\": \"Bob\" }, \"counts\": { \"photos\": 0, \"total_photos\": 0, \"subcollections\": 1 } }, \"created_at\": \"2011-06-21T23:44:32+0000\", \"updated_at\": \"2011-06-21T23:44:32+0000\", \"id\": \"4e012ce0d0afbe362a00000a\", \"user\": { \"created_at\": \"2011-06-21T23:44:10+0000\", \"updated_at\": \"2011-06-21T23:44:31+0000\", \"username\": \"bob\", \"id\": \"4e012ccad0afbe362a000002\", \"last_name\": \"Dude\", \"email\": \"bob@dude.com\", \"first_name\": \"Bob\" }, \"counts\": { \"photos\": 0, \"total_photos\": 0, \"subcollections\": 0 } } ] } } ios Example iOS call: NSDictionary *data = @{ @\"collection_id\" : @\"savedPhotoCollectionID\" }; [APSPhotoCollections show:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *collections = e.response[@\"collections\"]; NSDictionary *collection = collections[0]; NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nCount: %@\\nUpdated at : %@\\n\", collection[@\"id\"], collection[@\"name\"], collection[@\"count\"], collection[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"collection_id\", \"4e012ce0d0afbe362a00000a\"); try { APSPhotoCollections.show(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { Toast.makeText(currentActivity, e.getResponseString(), Toast.LENGTH_SHORT); } catch (APSCloudException err) { Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + err.toString()); } } else { Log.e(\"APSPhotoCollections\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSPhotoCollections\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photoCollectionsShow({ collection_id: savedPhotoCollectionId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.collections[0]); } }); "
    },
    {
        "id": "PhotoCollections-method-show_photos-arrowdb",
        "url": "PhotoCollections-method-show_photos",
        "type": "arrowdb",
        "name": "PhotoCollections.show_photos",
        "content": "Show photos in a collection. GET collections/show/photos.json collection_id ID of the collection to retrieve photos from. page Request page number, default is 1. per_page Number of results per page, default is 10. response_json_depth Nested object depth level counts in the response JSON. In order to reduce server API calls from an application, the response JSON may include not just the objects that are being queried/searched, but also some important data related to the returned objects such as the object's owner or referenced objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests a list of photos in a photo collections and checks the response. Cloud.PhotoCollections.showPhotos({ page: 1, per_page: 20, collection_id: savedCollectionId }, function (e) { if (e.success) { if (!e.photos) { alert('Success: No photos'); } else { alert('Success:\\n' + 'Count: ' + e.photos.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/collections/show/photos.json?key=&pretty_json=true&collection_id=4e004df9d0afbe2f18000010\" Example JSON response: { \"meta\": { \"code\": 200, \"method_name\": \"showCollectionPhotos\", \"status\": \"ok\" }, \"response\": { \"photos\": [ { \"created_at\": \"2011-06-21T07:53:29+0000\", \"size\": 584344, \"urls\": { \"medium_640\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_medium_640.jpg\", \"medium_500\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_medium_500.jpg\", \"small_240\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_small_240.jpg\", \"square_75\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_square_75.jpg\", \"large_1024\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_large_1024.jpg\", \"original\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_original.jpg\", \"thumb_100\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_thumb_100.jpg\" }, \"content_type\": \"image/jpeg\", \"updated_at\": \"2011-06-21T07:53:36+0000\", \"processed\": true, \"id\": \"4e004df9d0afbe2f18000012\", \"exif\": { \"create_date\": \"2010-06-21T02:19:20+0000\" }, \"filename\": \"photo.jpg\", \"md5\": \"589b8ad43ed20bf8e622d719642bc939\" } ] } } ios Example iOS call: NSDictionary *data = @{ @\"page\" : @1, @\"per_page\" : @20, @\"collection_id\": @\"savedCollectionID\" }; [APSPhotoCollections showPhotos:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *photos = e.response[@\"photos\"]; if ([photos count] == 0) { // handle No photos [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"No Photos\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; return; } for (NSDictionary *photo in photos) { NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nUpdated at : %@\\n\", photo[@\"id\"], photo[@\"name\"], photo[@\"updated_at\"]]; NSLog(@\"%@\", message); } } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"collection_id\", \"4e013938d0afbe3896000009\"); try { APSPhotoCollections.showPhotos(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray photos = e.getResponse().getJSONArray(\"photos\"); if (photos.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photoCollectionsShowPhotos({ collection_id: savedPhotoCollectionId, limit: 10 }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.photos.forEach(function(photo) { console.log(photo.filename); }); } }); "
    },
    {
        "id": "PhotoCollections-method-show_subcollections-arrowdb",
        "url": "PhotoCollections-method-show_subcollections",
        "type": "arrowdb",
        "name": "PhotoCollections.show_subcollections",
        "content": "Show subcollections of a collection. GET collections/show/subcollections.json collection_id ID of the collection to retrieve photos from. page Request page number, default is 1. per_page Number of results per page, default is 10. response_json_depth Nested object depth level counts in the response JSON. In order to reduce server API calls from an application, the response JSON may include not just the objects that are being queried/searched, but also some important data related to the returned objects such as the object's owner or referenced objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests a list of photo subcollections and checks the response. Cloud.PhotoCollections.showSubcollections({ page: 1, per_page: 20, collection_id: savedCollectionId }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.collections.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/collections/show/subcollections.json?key=&pretty_json=true&collection_id=4e004df9d0afbe2f18000010\" Example JSON response: { \"meta\": { \"total_pages\": 1, \"code\": 200, \"method_name\": \"showCollectionSubcollections\", \"page\": 1, \"total_results\": 2, \"per_page\": 10, \"status\": \"ok\" }, \"response\": { \"collections\": [ { \"name\": \"Subcollection 1\", \"cover_photo\": { \"created_at\": \"2011-06-21T07:53:29+0000\", \"size\": 584344, \"urls\": { \"medium_640\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_medium_640.jpg\", \"medium_500\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_medium_500.jpg\", \"small_240\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_small_240.jpg\", \"square_75\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_square_75.jpg\", \"large_1024\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_large_1024.jpg\", \"original\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_original.jpg\", \"thumb_100\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_thumb_100.jpg\" }, \"content_type\": \"image/jpeg\", \"updated_at\": \"2011-06-21T07:53:36+0000\", \"processed\": true, \"id\": \"4e004df9d0afbe2f18000012\", \"exif\": { \"create_date\": \"2010-06-21T02:19:20+0000\" }, \"filename\": \"photo.jpg\", \"md5\": \"589b8ad43ed20bf8e622d719642bc939\" }, \"created_at\": \"2011-06-21T07:53:29+0000\", \"updated_at\": \"2011-06-21T07:53:29+0000\", \"id\": \"4e004df9d0afbe2f18000011\", \"user\": { \"created_at\": \"2011-06-21T07:53:15+0000\", \"updated_at\": \"2011-06-21T07:53:29+0000\", \"username\": \"bob\", \"id\": \"4e004debd0afbe2f18000009\", \"last_name\": \"Dude\", \"email\": \"bob@dude.com\", \"first_name\": \"Bob\" }, \"counts\": { \"photos\": 1, \"total_photos\": 1, \"subcollections\": 0 } }, { \"name\": \"Subcollection 2\", \"created_at\": \"2011-06-21T07:53:38+0000\", \"updated_at\": \"2011-06-21T07:53:38+0000\", \"id\": \"4e004e02d0afbe2f18000015\", \"user\": { \"created_at\": \"2011-06-21T07:53:15+0000\", \"updated_at\": \"2011-06-21T07:53:29+0000\", \"username\": \"bob\", \"id\": \"4e004debd0afbe2f18000009\", \"last_name\": \"Dude\", \"email\": \"bob@dude.com\", \"first_name\": \"Bob\" }, \"counts\": { \"photos\": 0, \"total_photos\": 0, \"subcollections\": 0 } } ] } } ios Example iOS call: NSDictionary *data = @{ @\"page\" : @1, @\"per_page\" : @20, @\"collection_id\": @\"savedCollectionID\" }; [APSPhotoCollections showSubcollections:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *collections = e.response[@\"collections\"]; for (NSDictionary *collection in collections) { NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nCount : %@\\nUpdated at : %@\\n\", collection[@\"id\"], collection[@\"name\"], collection[@\"count\"], collection[@\"updated_at\"]]; NSLog(@\"%@\", message); } } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"collection_id\", \"4e013938d0afbe3896000009\"); try { APSPhotoCollections.showSubcollections(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray collections = e.getResponse().getJSONArray(\"collections\"); if (collectionss.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photoCollectionsShowSubcollections({ collection_id: savedPhotoCollectionId, limit: 10 }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.collections.forEach(function (collection) { console.log(collection); }); } }); "
    },
    {
        "id": "PhotoCollections-method-update-arrowdb",
        "url": "PhotoCollections-method-update",
        "type": "arrowdb",
        "name": "PhotoCollections.update",
        "content": "Updates a photo collection. An existing collection's cover photo can be added or updated by specifying a new cover_photo_id. The cover photo can be removed by sending an empty string as the value for cover_photo_id. Application Admin can update any Photo Collection. PUT collections/update.json collection_id ID of the collection to update. name New name of the collection. The name must be unique across other top-level collections. If this is a sub-collection, the name must be unique across other sub-collections of the same parent. cover_photo_id ID of the photo to use as a cover photo. The photo does not need to be in the collection. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this collection. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this collection. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id User ID to update the collection on behalf of. The user must be the creator of the collection. The current login user must be an application admin to update a collection on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example updates a photo collection and checks the response. Cloud.PhotoCollections.update({ collection_id: savedPhotoCollectionId, cover_photo_id: savedPhotoId }, function (e) { if (e.success) { var collection = e.collections[0]; alert('Success:\\n' + 'id: ' + collection.id + '\\n' + 'name: ' + collection.name + '\\n' + 'count: ' + collection.counts.total_photos + '\\n' 'updated_at: ' + collection.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X PUT -F \"cover_photo_id=4deece22d0afbe3ab4000002\" -F \"collection_id=4deb4496d0afbec69e000008\" \"https://api.cloud.appcelerator.com/v1/collections/update.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"method_name\": \"updateCollection\", \"status\": \"ok\" }, \"response\": { \"collections\": [ { \"name\": \"Sky Diving\", \"cover_photo\": { \"created_at\": \"2011-06-08T01:19:30+0000\", \"size\": 6178569, \"urls\": { \"medium_640\": \"http://storage.appcelerator.com/ZnkQfIWk1yUZq3m82QE9ZXrbq5jxqLEz/photos/4deece22d0afbe3ab4000002/IMG_0078_medium_640.jpg\", \"medium_500\": \"http://storage.appcelerator.com/ZnkQfIWk1yUZq3m82QE9ZXrbq5jxqLEz/photos/4deece22d0afbe3ab4000002/IMG_0078_medium_500.jpg\", \"small_240\": \"http://storage.appcelerator.com/ZnkQfIWk1yUZq3m82QE9ZXrbq5jxqLEz/photos/4deece22d0afbe3ab4000002/IMG_0078_small_240.jpg\", \"square_75\": \"http://storage.appcelerator.com/ZnkQfIWk1yUZq3m82QE9ZXrbq5jxqLEz/photos/4deece22d0afbe3ab4000002/IMG_0078_square_75.jpg\", \"large_1024\": \"http://storage.appcelerator.com/ZnkQfIWk1yUZq3m82QE9ZXrbq5jxqLEz/photos/4deece22d0afbe3ab4000002/IMG_0078_large_1024.jpg\", \"original\": \"http://storage.appcelerator.com/ZnkQfIWk1yUZq3m82QE9ZXrbq5jxqLEz/photos/4deece22d0afbe3ab4000002/IMG_0078_original.jpg\", \"thumb_100\": \"http://storage.appcelerator.com/ZnkQfIWk1yUZq3m82QE9ZXrbq5jxqLEz/photos/4deece22d0afbe3ab4000002/IMG_0078_thumb_100.jpg\" }, \"content_type\": \"image/jpeg\", \"updated_at\": \"2011-06-08T01:20:08+0000\", \"tags\": [ \"foo\", \"bar\" ], \"processed\": true, \"id\": \"4deece22d0afbe3ab4000002\", \"exif\": { \"create_date\": \"2010-06-03T02:36:42+0000\" }, \"filename\": \"IMG_0078.jpg\", \"md5\": \"8c189ce29ecab9daf9d14fbe679c339d\" }, \"created_at\": \"2011-06-05T08:55:50+0000\", \"updated_at\": \"2011-06-08T18:10:36+0000\", \"id\": \"4deb4496d0afbec69e000008\", \"user\": { \"created_at\": \"2011-05-26T20:48:07+0000\", \"updated_at\": \"2011-06-04T01:54:39+0000\", \"id\": \"4ddebc87d0afbe5a54000001\", \"last_name\": \"Goff\", \"email\": \"mike@appcelerator.com\", \"first_name\": \"Mike\" }, \"counts\": { \"photos\": 0, \"total_photos\": 1, \"subcollections\": 2 } } ] } } ios Example iOS call: NSDictionary *data = @{ @\"collection_id\" : @\"savedPhotoCollectionID\", @\"cover_photo_id\": @\"savedPhotoID\" }; [APSPhotoCollections update:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *collections = e.response[@\"collections\"]; NSDictionary *collection = collections[0]; NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nCount : %@\\nUpdated at : %@\\n\", collection[@\"id\"], collection[@\"name\"], collection[@\"count\"], collection[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"collection_id\", \"4deb4496d0afbec69e000008\"); data.put(\"cover_photo_id\", \"4deece22d0afbe3ab4000002\"); try { APSPhotoCollections.update(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Updated!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSPhotoCollections\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPhotoCollections\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photoCollectionsUpdate({ collection_id: savedPhotoCollectionId, cover_photo_id: savedPhotoId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.collections[0]); } }); "
    },
    {
        "name": "Photos",
        "id": "Photos-arrowdb",
        "url": "Photos",
        "type": "arrowdb",
        "content": "Photos The Photos API lets you upload, resize and manage photos for your application. The current file store limit is 100MB in the ArrowDB cloud. ArrowDB applications no longer create the default photo sizes. Only the original photo size is shown. To create different photo sizes when creating or updating a photo, see Photo Uploading & Resizing guide. "
    },
    {
        "id": "Photos-property-acls-arrowdb",
        "url": "Photos-property-acls",
        "type": "arrowdb",
        "name": "Photos.acls",
        "content": "Single-element array containing the ACLs associated with this photo object, if any. String"
    },
    {
        "id": "Photos-property-collections-arrowdb",
        "url": "Photos-property-collections",
        "type": "arrowdb",
        "name": "Photos.collections",
        "content": "Single-element array containing the collection this photo is a part of, if any. PhotoCollections[]"
    },
    {
        "id": "Photos-property-content_type-arrowdb",
        "url": "Photos-property-content_type",
        "type": "arrowdb",
        "name": "Photos.content_type",
        "content": "MIME content-type for this photo. String"
    },
    {
        "id": "Photos-property-created_at-arrowdb",
        "url": "Photos-property-created_at",
        "type": "arrowdb",
        "name": "Photos.created_at",
        "content": "Creation date for this photo object. Date"
    },
    {
        "id": "Photos-property-custom_fields-arrowdb",
        "url": "Photos-property-custom_fields",
        "type": "arrowdb",
        "name": "Photos.custom_fields",
        "content": "User defined fields. See Custom Data Fields. Hash"
    },
    {
        "id": "Photos-property-filename-arrowdb",
        "url": "Photos-property-filename",
        "type": "arrowdb",
        "name": "Photos.filename",
        "content": "Filename of the original photo. String"
    },
    {
        "id": "Photos-property-id-arrowdb",
        "url": "Photos-property-id",
        "type": "arrowdb",
        "name": "Photos.id",
        "content": "Generated ID for this photo. String"
    },
    {
        "id": "Photos-property-md5-arrowdb",
        "url": "Photos-property-md5",
        "type": "arrowdb",
        "name": "Photos.md5",
        "content": "MD5 hash of the original image data. String"
    },
    {
        "id": "Photos-property-processed-arrowdb",
        "url": "Photos-property-processed",
        "type": "arrowdb",
        "name": "Photos.processed",
        "content": "True if this photo has been processed and is available for download. Boolean"
    },
    {
        "id": "Reviewable-property-ratings_average-arrowdb",
        "url": "Reviewable-property-ratings_average",
        "type": "arrowdb",
        "name": "Reviewable.ratings_average",
        "content": "Average rating for this object. Only present if the object has been reviewed. Number"
    },
    {
        "id": "Reviewable-property-ratings_count-arrowdb",
        "url": "Reviewable-property-ratings_count",
        "type": "arrowdb",
        "name": "Reviewable.ratings_count",
        "content": "Total number of reviews for this object that include a rating. Only present if the object has been reviewed. Number"
    },
    {
        "id": "Reviewable-property-ratings_summary-arrowdb",
        "url": "Reviewable-property-ratings_summary",
        "type": "arrowdb",
        "name": "Reviewable.ratings_summary",
        "content": "Breakdown of the number of reviews that specified a given rating value. For example, if your ratings range from 1-5, the ratings summary might look like this: ratings_summary: { \"1\" : 1, \"2\" : 0, \"3\" : 5, \"4\" : 50, \"5\" : 12 } Only present if the object has been reviewed. Hash"
    },
    {
        "id": "Reviewable-property-reviews-arrowdb",
        "url": "Reviewable-property-reviews",
        "type": "arrowdb",
        "name": "Reviewable.reviews",
        "content": "List of reviews for this object. Only present if the object has been reviewed. Reviews[]"
    },
    {
        "id": "Reviewable-property-reviews_count-arrowdb",
        "url": "Reviewable-property-reviews_count",
        "type": "arrowdb",
        "name": "Reviewable.reviews_count",
        "content": "Total number of reviews for this object. Only present if the object has been reviewed. Number"
    },
    {
        "id": "Photos-property-size-arrowdb",
        "url": "Photos-property-size",
        "type": "arrowdb",
        "name": "Photos.size",
        "content": "Original image size in bytes. Number"
    },
    {
        "id": "Photos-property-tags-arrowdb",
        "url": "Photos-property-tags",
        "type": "arrowdb",
        "name": "Photos.tags",
        "content": "List of tags for this photo. String[]"
    },
    {
        "id": "Photos-property-title-arrowdb",
        "url": "Photos-property-title",
        "type": "arrowdb",
        "name": "Photos.title",
        "content": "Photo title, if specified. String"
    },
    {
        "id": "Photos-property-updated_at-arrowdb",
        "url": "Photos-property-updated_at",
        "type": "arrowdb",
        "name": "Photos.updated_at",
        "content": "Last update time for this photo object. Date"
    },
    {
        "id": "Photos-property-urls-arrowdb",
        "url": "Photos-property-urls",
        "type": "arrowdb",
        "name": "Photos.urls",
        "content": "A hash containing image URLs for the photo at different sizes. The URLs are only available after the photo has been processed (processed is true). Hash"
    },
    {
        "id": "Photos-property-user-arrowdb",
        "url": "Photos-property-user",
        "type": "arrowdb",
        "name": "Photos.user",
        "content": "User object for the photo's owner. Users"
    },
    {
        "id": "Photos-method-batch_delete-arrowdb",
        "url": "Photos-method-batch_delete",
        "type": "arrowdb",
        "name": "Photos.batch_delete",
        "content": "Deletes Photos objects that match the query constraints provided in the where parameter. If no where parameter is provided, all Photos objects are deleted. Note that an HTTP 200 code (success) is returned if the call completed successfully but the query matched no objects. For performance reasons, the number of objects that can be deleted in a single batch delete operation is limited to 100,000. The matched objects are deleted asynchronously in a separate process. You must be an application admin to run this command. DELETE photos/batch_delete.json where Encoded JSON object that specifies constraint values for Photos objects to delete. If not specified, all Photos objects are deleted. return void titanium Example request to delete all Photo objects. Cloud.sendRequest({ url : \"photos/batch_delete.json\", method : \"DELETE\" }, function(e) { if (e.success) { alert(\"All Photo objects have been deleted.\"); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE -F \"where={\\\"favorite_color\\\":\\\"blue\\\"}\" https://api.cloud.appcelerator.com/v1/photos/batch_delete.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"batchDelete\" } } ios Example request to delete all Photo objects. [[APSCloud sharedInstance] sendRequest:@\"photos/batch_delete.json\" method:@\"DELETE\" data:nil handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"All Photo object have been deleted.\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to delete all Photo objects. APSCloud.getInstance().sendRequest(\"photos/batch_delete.json\", \"DELETE\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"All Photo objects have been deleted.\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photosBatchDelete({ where: {'favorite_color': 'blue'} }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Photos-method-count-arrowdb",
        "url": "Photos-method-count",
        "type": "arrowdb",
        "name": "Photos.count",
        "content": "Retrieves the total number of Photo objects. GET photos/count.json return void titanium Example request to retrieve the total number of Photo objects. Cloud.sendRequest({ url : \"photos/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/photos/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"photosCount\", \"count\": 1 } } ios Example request to retrieve the total number of Photo objects. [[APSCloud sharedInstance] sendRequest:@\"photos/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of Photo objects. APSCloud.getInstance().sendRequest(\"photos/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photosCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "Photos-method-create-arrowdb",
        "url": "Photos-method-create",
        "type": "arrowdb",
        "name": "Photos.create",
        "content": "Create a photo using the given photo binary attachment. A collection_name or collection_id is optional. The response includes a processed flag which indicates if the photo has been resized and stored reliably in the ArrowDB storage engine. This will initially be false. The md5 field gives the md5 sum of the file which can be used to verify file integrity. POST photos/create.json photo The attached binary file. title Photo title. collection_name Name of the PhotoCollections to add this photo to. collection_id ID of the PhotoCollections to add this photo to. tags Comma separated list of tags to associate with this photo. custom_fields User-defined fields to add to this photo. See Custom Data Fields. acl_name Name of an ACLs to associate with this photo object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this photo object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id User ID to create the photo on behalf of. The current login user must be an application admin to create a photo on behalf of another user. photo_sizes User-defined photo sizes. See Photo Uploading & Sizes. Sizes be specified as a JSON object, or using a separate parameter for each size. To specify a photo size called \"preview\" using JSON: photo_size : { \"preview\" : \"120x120#\" } To pass each size as a separate parameter, do not use the literal parameter name photo_sizes, but add a parameter named photo_sizes[sizeName] for each custom photo size. The previous example in this format looks like this: \"photo_size[preview]\" : \"120x120#\" photo_sync_sizes[] Synchronous photo sizes to upload. See Photo Uploading & Resizing. The literal name for this parameter is photo_sync_sizes[]. This parameter can be specified multiple times, once for each photo size that must be created before the request returns. For example: \"photo_sync_sizes[]=preview\" pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example creates a new photo and checks the response. Cloud.Photos.create({ photo: Titanium.Filesystem.getFile('photo.jpg') }, function (e) { if (e.success) { var photo = e.photos[0]; alert('Success:\\n' + 'id: ' + photo.id + '\\n' + 'filename: ' + photo.filename + '\\n' + 'size: ' + photo.size, 'updated_at: ' + photo.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"file=@photo.jpg\" https://api.cloud.appcelerator.com/v1/photos/create.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"createPhoto\" }, \"response\": { \"photos\": [ { \"id\":\"4d51d4186f70952d4c000006\", \"filename\":\"photo.jpg\", \"size\":584344, \"md5\":\"589b8ad43ed20bf8e622d719642bc939\", \"created_at\":\"2011-02-08T23:39:04+0000\", \"updated_at\":\"2011-02-08T23:39:04+0000\", \"processed\":false } ] } } ios Example iOS call: NSError* error = nil; NSData *fileData = [NSData dataWithContentsOfFile:@\"profile.png\" options:0 error: &error]; if (fileData == nil) { // handle error NSLog(@\"Failed to read file, error %@\", error); return; } // Put photo data in a dictionary: NSDictionary *data = @{ @\"photo\": fileData, @\"collection_name\": @\"profile_photos\" }; [APSPhotos create:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Uploaded!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"photo\", new File(\"/photos/profile.gif\")); try { APSPhotos.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Uploaded!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSPhotos\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPhotos\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPhotos\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''), fs = require('fs'); arrowDBApp.photosCreate({ photo: fs.createReadStream('photo.jpg') }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.photos[0]); } }); "
    },
    {
        "id": "Photos-method-delete-arrowdb",
        "url": "Photos-method-delete",
        "type": "arrowdb",
        "name": "Photos.delete",
        "content": "Deletes a photo to which you have update access. An application admin can delete any photo object. DELETE photos/delete.json photo_id ID of the photo to delete. su_id User ID to delete the Photo object on behalf of. The user must be the creator of the object. The current login user must be an application admin to delete a Photo object on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example deletes a photo and checks the response. Cloud.Photos.remove({ photo_id: savedPhotoId }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/photos/delete.json?key=&pretty_json=true&photo_id=4d8971236f7095514800000a\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"deletePhoto\" } } ios Example iOS call: NSDictionary *data = @{@\"photo_id\": @\"4d8971236f7095514800000a\"}; [APSPhotos remove:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Photo deleted!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: HashMap data = new HashMap(); data.put(\"photo_id\", \"4d8971236f7095514800000a\"); try { APSPhotos.remove(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Toast.makeText(currentActivity, \"Photo removed!\", Toast.LENGTH_SHORT).show(); } else { Log.e(\"APSPhotos\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPhotos\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPhotos\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photosDelete({ photo_id: savedPhotoId }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Photos-method-query-arrowdb",
        "url": "Photos-method-query",
        "type": "arrowdb",
        "name": "Photos.query",
        "content": "Perform custom query of photos with sorting and paginating. Currently you can not query or sort data stored inside array or hash in custom fields. In addition to custom fields, here is a list of pre-defined fields that can be queried and sorted: user_id: String. Photo owner's user ID. title: String. Photo title. tags_array: String. Photo tags. ratings_average: Number. Photo's average rating (see Reviews). ratings_count: Number. Photo's total number of ratings (see Reviews). reviews_count: Number. Photo's total number of reviews (see Reviews). created_at: Date. Timestamp when the photo was created. updated_at: Date. Timestamp when the photo was updated. In ArrowDB 1.1.5 and later, you can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. For details about using the query parameters, see the Search and Query guide. GET photos/query.json page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. where Constraint values for fields. where should be encoded JSON. If where is not specified, query returns all objects. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. show_user_like If set to true, each Photo object in the response includes \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked field is not included in the response. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests a list of photos and checks the response. Cloud.Photos.query({ page: 1, per_page: 20, where: { coordinates: { '$nearSphere': [-122.23,37.12], '$maxDistance': 0.00126 } } }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.photos.length); for (var i = 0; i rest Example cURL request -- If your app assigns a geo location to each photo, query photos with tag \"Appcelerator Cloud Services\" near latitude 37.12, longitude -122.23 within 5 miles $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode 'where={\"tags_array\":\"Appcelerator Cloud Services\",\"coordinates\":{\"$nearSphere\":[-122.23,37.12], \"$maxDistance\" : 0.00126}}' \"https://api.cloud.appcelerator.com/v1/photos/query.json?key=&pretty_json=true&count=true\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"queryPhotos\", \"count\": 100 }, \"response\": { \"photos\": [ { \"id\":\"4d51d4186f70952d4c000006\", \"filename\":\"photo.jpg\", \"title\": \"Appcelerator Cloud Services\", \"size\":584344, \"md5\":\"589b8ad43ed20bf8e622d719642bc939\", \"created_at\":\"2011-02-08T23:39:04+0000\", \"updated_at\":\"2011-02-08T23:39:08+0000\", \"processed\":true, \"content_type\":\"image/jpeg\", \"urls\": { \"square\":\"http://storage.appcelerator.com/c3e1d292cb79ba7b9783d6cd45344719/photos/4d51d4186f70952d4c000006/photo_square.jpg\", \"thumb\":\"http://storage.appcelerator.com/c3e1d292cb79ba7b9783d6cd45344719/photos/4d51d4186f70952d4c000006/photo_thumb.jpg\", \"small\":\"http://storage.appcelerator.com/c3e1d292cb79ba7b9783d6cd45344719/photos/4d51d4186f70952d4c000006/photo_small.jpg\", \"medium_500\":\"http://storage.appcelerator.com/c3e1d292cb79ba7b9783d6cd45344719/photos/4d51d4186f70952d4c000006/photo_medium_500.jpg\", \"medium_640\":\"http://storage.appcelerator.com/c3e1d292cb79ba7b9783d6cd45344719/photos/4d51d4186f70952d4c000006/photo_medium_640.jpg\", \"large\":\"http://storage.appcelerator.com/c3e1d292cb79ba7b9783d6cd45344719/photos/4d51d4186f70952d4c000006/photo_large.jpg\", \"original\":\"http://storage.appcelerator.com/c3e1d292cb79ba7b9783d6cd45344719/photos/4d51d4186f70952d4c000006/photo_original.jpg\" }, \"custom_fields\": { \"coordinates\": [-122.23, 37.12] } } } ] } } ios Example iOS APS SDK call: NSDictionary *data = @{ @\"where\": @{ @\"tags_array\":@\"Appcelerator Cloud Services\" } }; [APSPhotos query:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu photos\", (unsigned long)((NSArray *)e.response[@\"photos\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success!\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); try { HashMap data = new HashMap(); JSONObject params = new JSONObject(\"{'tags_array': 'Appcelerator Cloud Services','coordinates': {'$nearSphere': [-122.23,37.12], '$maxDistance': 0.126}}\"); data.put(\"where\", params); APSPhotos.query(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray photos = e.getResponse().getJSONArray(\"photos\"); if (photos.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photosQuery({ limit: 10, where: { coordinates: { '$nearSphere': [-122.23,37.12], '$maxDistance': 0.00126 } } }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.photos.forEach(function (photo) { console.log(photo); }); } }); "
    },
    {
        "id": "Photos-method-search-arrowdb",
        "url": "Photos-method-search",
        "type": "arrowdb",
        "name": "Photos.search",
        "content": "Searches for photos with sorting and paginating. GET photos/search.json page Request page number, default is 1. per_page Number of results per page, default is 10. response_json_depth Nested object depth level counts in response JSON. In order to reduce server API calls from an application, the response JSON may include not just the objects that are being queried/searched, but also some important data related to the returned objects such as object's owner or referenced objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example searches for photos and checks the response. Cloud.Photos.search({ user_id: savedUserId }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.photos.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/photos/search.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"searchPhotos\", \"page\": 1, \"per_page\": 10, \"total_pages\": 1, \"total_results\": 1 }, \"response\": { \"photos\": [ { \"id\": \"506f8146b8811092c3000294\", \"filename\": \"Screen Shot 2012-10-05 at 5.09.38 PM.png\", \"size\": 24915, \"md5\": \"3fd3ac2d17b39ce7bfc42a730b2b5b5c\", \"created_at\": \"2012-10-06T00:54:32+0000\", \"updated_at\": \"2012-10-06T00:54:37+0000\", \"processed\": true, \"user\": { \"id\": \"5012ffd4b881100692000947\", \"first_name\": \"a\", \"last_name\": \"aa\", \"created_at\": \"2012-07-27T20:53:42+0000\", \"updated_at\": \"2012-09-13T21:13:49+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2012-07-27T20:53:40+0000\", \"username\": \"aaa\", \"email\": \"aaa@cocoafish.com\", \"admin\": \"false\" } } ] } } ios Example iOS call: [APSPhotos search:nil withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu photos\", (unsigned long)((NSArray *)e.response[@\"photos\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success!\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"place_id\", \"4d7e62d6d0afbe04170000a4\"); try { APSPhotos.search(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray photos = e.getResponse().getJSONArray(\"photos\"); if (photos.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photosSearch({ user_id: savedUserId }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.photos.forEach(function (photo) { console.log(photo); }); } }); "
    },
    {
        "id": "Photos-method-show-arrowdb",
        "url": "Photos-method-show",
        "type": "arrowdb",
        "name": "Photos.show",
        "content": "Returns the information for the identified photo. GET photos/show.json photo_id ID of the photo to show. response_json_depth Nested object depth level counts in response JSON. In order to reduce server API calls from an application, the response JSON may include not just the objects that are being queried/searched, but also some important data related to the returned objects such as object's owner or referenced objects. Default is 1, valid range is 1 to 8. show_user_like If set to true the Photo object in the response will include \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked field is not included in the response. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example retrieves information about a photo and checks the response. Cloud.Photos.show({ photo_id: savedPhotoId }, function (e) { if (e.success) { var photo = e.photos[0]; alert('Success:\\n' + 'id: ' + photo.id + '\\n' + 'filename: ' + photo.filename + '\\n' + 'updated_at: ' + photo.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/photos/show.json?key=&pretty_json=true&photo_id=4d8971236f7095514800000a\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"showPhoto\" }, \"response\": { \"photos\": [ { \"id\":\"4d51d4186f70952d4c000006\", \"filename\":\"photo.jpg\", \"size\":584344, \"collection_name\":\"default\", \"md5\":\"589b8ad43ed20bf8e622d719642bc939\", \"created_at\":\"2011-02-08T23:39:04+0000\", \"updated_at\":\"2011-02-08T23:39:08+0000\", \"processed\":true, \"content_type\":\"image/jpeg\", \"urls\": { \"square\":\"http://storage.appcelerator.com/c3e1d292cb79ba7b9783d6cd45344719/photos/4d51d4186f70952d4c000006/photo_square.jpg\", \"thumb\":\"http://storage.appcelerator.com/c3e1d292cb79ba7b9783d6cd45344719/photos/4d51d4186f70952d4c000006/photo_thumb.jpg\", \"small\":\"http://storage.appcelerator.com/c3e1d292cb79ba7b9783d6cd45344719/photos/4d51d4186f70952d4c000006/photo_small.jpg\", \"medium_500\":\"http://storage.appcelerator.com/c3e1d292cb79ba7b9783d6cd45344719/photos/4d51d4186f70952d4c000006/photo_medium_500.jpg\", \"medium_640\":\"http://storage.appcelerator.com/c3e1d292cb79ba7b9783d6cd45344719/photos/4d51d4186f70952d4c000006/photo_medium_640.jpg\", \"large\":\"http://storage.appcelerator.com/c3e1d292cb79ba7b9783d6cd45344719/photos/4d51d4186f70952d4c000006/photo_large.jpg\", \"original\":\"http://storage.appcelerator.com/c3e1d292cb79ba7b9783d6cd45344719/photos/4d51d4186f70952d4c000006/photo_original.jpg\" } } ] } } ios Example iOS call: NSDictionary *data = @{@\"photo_id\": @\"4d8971236f7095514800000a\"}; [APSPhotos show:data withBlock:^(APSResponse *e) { if (e.success) { NSArray *photos = e.response[@\"photos\"]; NSDictionary *photo = photos[0]; NSString *message = [NSString stringWithFormat:@\"filename: %@\", photo[@\"filename\"]]; [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"place_id\", \"4d7e62d6d0afbe04170000a4\"); try { APSPhotos.show(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray photos = e.getResponse().getJSONArray(\"photos\"); if (photos.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photosShow({ photo_id: savedPhotoId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.photos[0]); } }); "
    },
    {
        "id": "Photos-method-update-arrowdb",
        "url": "Photos-method-update",
        "type": "arrowdb",
        "name": "Photos.update",
        "content": "Updates the photo attachment, the collection that the photo belongs to, or other photo properties. When replacing the existing photo attachment with a new one, processing will be set to false. However the existig URLs will remain valid until the new photo has been processed and uploaded to the Appcelerator Cloud Services storage cloud. At this time, the old URLs will be replaced with the URLs of the newly processed photo. An application admin can update any Photo object. PUT photos/update.json photo_id ID of the photo to update. photo New photo to associate with this object, attached as a binary file. title Photo title. collection_name Name of the PhotoCollections to add this photo to. Replaces the existing collection, if any. collection_id ID of the PhotoCollections to add this photo to. Replaces the existing collection, if any. tags Comma separated list of tags to associate with this photo. Overwrites any existing tags. custom_fields User-defined fields to add to this photo. See Custom Data Fields. acl_name Name of an ACLs to associate with this photo object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. To delete an ACL, set acl_name or acl_id to the empty string. acl_id ID of an ACLs to associate with this photo object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. photo_sizes User-defined photo sizes. See Photo Uploading & Resizings. Sizes be specified as a JSON object, or using a separate parameter for each size. To specify a photo size called \"preview\" using JSON: photo_size : { \"preview\" : \"120x120#\" } To pass each size as a separate parameter, do not use the literal parameter name photo_sizes, but add a parameter named photo_sizes[sizeName] for each custom photo size. The previous example in this format looks like this: \"photo_size[preview]\" : \"120x120#\" photo_sync_sizes Synchronous photo sizes to upload. See Photo Uploading & Resizings. The literal name for this parameter is photo_sync_sizes[]. This parameter can be specified multiple times, once for each photo size that must be created before the request returns. For example: \"photo_sync_sizes[]=preview\" su_id User ID to update the Photo object on behalf of. The user must be the creator of the object. The current login user must be an application admin to update a Photo object on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example updates a photo and checks the response. Cloud.Photos.update({ photo_id: savedPhotoId, photo: Titanium.Filesystem.getFile('newphoto.jpg'), tags: 'mountains' }, function (e) { if (e.success) { var photo = e.photos[0]; alert('Success:\\n' + 'id: ' + photo.id + '\\n' + 'filename: ' + photo.filename + '\\n' + 'updated_at: ' + photo.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: curl -b cookies.txt -c cookies.txt -X PUT -F \"photo=@photo.jpg\" -F \"photo_id=4d7e62d6d0afbe04170000a4\" https://api.cloud.appcelerator.com/v1/photos/update.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"updatePhoto\" }, \"response\": { \"photos\": [ { \"id\": \"4e382fbed0afbe2495000006\", \"filename\": \"photo.jpg\", \"size\": 584344, \"md5\": \"589b8ad43ed20bf8e622d719642bc939\", \"created_at\": \"2011-08-02T17:11:26+0000\", \"updated_at\": \"2011-08-02T17:11:40+0000\", \"processed\": false, \"content_type\": \"image/jpeg\", \"urls\": { \"square_75\": \"http://storage.appcelerator.com/HlSgny4cAWpKU8Mpypr3WGlE/photos/c9/39/4e382fbed0afbe2495000007/photo_square_75.jpg\", \"thumb_100\": \"http://storage.appcelerator.com/HlSgny4cAWpKU8Mpypr3WGlE/photos/c9/39/4e382fbed0afbe2495000007/photo_thumb_100.jpg\", \"small_240\": \"http://storage.appcelerator.com/HlSgny4cAWpKU8Mpypr3WGlE/photos/c9/39/4e382fbed0afbe2495000007/photo_small_240.jpg\", \"medium_500\": \"http://storage.appcelerator.com/HlSgny4cAWpKU8Mpypr3WGlE/photos/c9/39/4e382fbed0afbe2495000007/photo_medium_500.jpg\", \"medium_640\": \"http://storage.appcelerator.com/HlSgny4cAWpKU8Mpypr3WGlE/photos/c9/39/4e382fbed0afbe2495000007/photo_medium_640.jpg\", \"large_1024\": \"http://storage.appcelerator.com/HlSgny4cAWpKU8Mpypr3WGlE/photos/c9/39/4e382fbed0afbe2495000007/photo_large_1024.jpg\", \"original\": \"http://storage.appcelerator.com/HlSgny4cAWpKU8Mpypr3WGlE/photos/c9/39/4e382fbed0afbe2495000007/photo_original.jpg\" }, \"exif\": { \"create_date\": \"2010-06-21T02:19:20+0000\", \"width\": 1600, \"height\": 1067, \"shutter_speed\": \"1/60\", \"make\": \"Canon\", \"model\": \"Canon EOS 5D Mark II\" } } ] } } ios Example iOS call: NSError* error = nil; NSData *fileData = [NSData dataWithContentsOfFile:@\"profile2.png\" options:0 error:&error]; if (fileData == nil) { // handle error NSLog(@\"Failed to read file, error %@\", error); return; } NSDictionary *data = @{ @\"photo_id\": @\"4d7e62d6d0afbe04170000a4\", @\"photo\": fileData }; [APSPhotos update:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Updated!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"photo_id\", \"4d7e62d6d0afbe04170000a4\"); data.put(\"photo\", new File(\"/photos/profile.gif\")); try { APSPhotos.update(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Uploaded!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSPhotos\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPhotos\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPhotos\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.photosUpdate({ photo_id: savedPhotoId, tags: 'mountains' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.photos[0]); } }); "
    },
    {
        "name": "Places",
        "id": "Places-arrowdb",
        "url": "Places",
        "type": "arrowdb",
        "content": "Places The Places API provides methods to create and manage places. A place can be specified using a street address or geographic coordinates. "
    },
    {
        "id": "Places-property-acls-arrowdb",
        "url": "Places-property-acls",
        "type": "arrowdb",
        "name": "Places.acls",
        "content": "Single-element array containing the ACL associated with this object, if any. ACLs[]"
    },
    {
        "id": "Places-property-address-arrowdb",
        "url": "Places-property-address",
        "type": "arrowdb",
        "name": "Places.address",
        "content": "Address. String"
    },
    {
        "id": "Places-property-city-arrowdb",
        "url": "Places-property-city",
        "type": "arrowdb",
        "name": "Places.city",
        "content": "City. String"
    },
    {
        "id": "Places-property-country-arrowdb",
        "url": "Places-property-country",
        "type": "arrowdb",
        "name": "Places.country",
        "content": "Country. String"
    },
    {
        "id": "Places-property-custom_fields-arrowdb",
        "url": "Places-property-custom_fields",
        "type": "arrowdb",
        "name": "Places.custom_fields",
        "content": "User defined fields. See Custom Data Fields. String/Hash"
    },
    {
        "id": "Places-property-latitude-arrowdb",
        "url": "Places-property-latitude",
        "type": "arrowdb",
        "name": "Places.latitude",
        "content": "Latitude. Number"
    },
    {
        "id": "Places-property-longitude-arrowdb",
        "url": "Places-property-longitude",
        "type": "arrowdb",
        "name": "Places.longitude",
        "content": "Longitude. Number"
    },
    {
        "id": "Places-property-name-arrowdb",
        "url": "Places-property-name",
        "type": "arrowdb",
        "name": "Places.name",
        "content": "Place name. String"
    },
    {
        "id": "Places-property-phone_number-arrowdb",
        "url": "Places-property-phone_number",
        "type": "arrowdb",
        "name": "Places.phone_number",
        "content": "Phone number. String"
    },
    {
        "id": "Places-property-photo-arrowdb",
        "url": "Places-property-photo",
        "type": "arrowdb",
        "name": "Places.photo",
        "content": "Primary photo for this place. Photos"
    },
    {
        "id": "Places-property-postal_code-arrowdb",
        "url": "Places-property-postal_code",
        "type": "arrowdb",
        "name": "Places.postal_code",
        "content": "Postal or ZIP code. String"
    },
    {
        "id": "Reviewable-property-ratings_average-arrowdb",
        "url": "Reviewable-property-ratings_average",
        "type": "arrowdb",
        "name": "Reviewable.ratings_average",
        "content": "Average rating for this object. Only present if the object has been reviewed. Number"
    },
    {
        "id": "Reviewable-property-ratings_count-arrowdb",
        "url": "Reviewable-property-ratings_count",
        "type": "arrowdb",
        "name": "Reviewable.ratings_count",
        "content": "Total number of reviews for this object that include a rating. Only present if the object has been reviewed. Number"
    },
    {
        "id": "Reviewable-property-ratings_summary-arrowdb",
        "url": "Reviewable-property-ratings_summary",
        "type": "arrowdb",
        "name": "Reviewable.ratings_summary",
        "content": "Breakdown of the number of reviews that specified a given rating value. For example, if your ratings range from 1-5, the ratings summary might look like this: ratings_summary: { \"1\" : 1, \"2\" : 0, \"3\" : 5, \"4\" : 50, \"5\" : 12 } Only present if the object has been reviewed. Hash"
    },
    {
        "id": "Reviewable-property-reviews-arrowdb",
        "url": "Reviewable-property-reviews",
        "type": "arrowdb",
        "name": "Reviewable.reviews",
        "content": "List of reviews for this object. Only present if the object has been reviewed. Reviews[]"
    },
    {
        "id": "Reviewable-property-reviews_count-arrowdb",
        "url": "Reviewable-property-reviews_count",
        "type": "arrowdb",
        "name": "Reviewable.reviews_count",
        "content": "Total number of reviews for this object. Only present if the object has been reviewed. Number"
    },
    {
        "id": "Places-property-state-arrowdb",
        "url": "Places-property-state",
        "type": "arrowdb",
        "name": "Places.state",
        "content": "State. String"
    },
    {
        "id": "Places-property-tags-arrowdb",
        "url": "Places-property-tags",
        "type": "arrowdb",
        "name": "Places.tags",
        "content": "List of tags for this object. String[]"
    },
    {
        "id": "Places-property-twitter-arrowdb",
        "url": "Places-property-twitter",
        "type": "arrowdb",
        "name": "Places.twitter",
        "content": "Twitter ID. String"
    },
    {
        "id": "Places-property-user-arrowdb",
        "url": "Places-property-user",
        "type": "arrowdb",
        "name": "Places.user",
        "content": "Owner of this place object. Users"
    },
    {
        "id": "Places-property-website-arrowdb",
        "url": "Places-property-website",
        "type": "arrowdb",
        "name": "Places.website",
        "content": "Website. String"
    },
    {
        "id": "Places-method-batch_delete-arrowdb",
        "url": "Places-method-batch_delete",
        "type": "arrowdb",
        "name": "Places.batch_delete",
        "content": "Deletes Places objects that match the query constraints provided in the where parameter. If no where parameter is provided, all Places objects are deleted. Note that an HTTP 200 code (success) is returned if the call completed successfully but the query matched no objects. For performance reasons, the number of objects that can be deleted in a single batch delete operation is limited to 100,000. The matched objects are deleted asynchronously in a separate process. Any primary photos associated with the matched objects are not deleted. You must be an application admin to run this command. DELETE places/batch_delete.json where Encoded JSON object that specifies constraint values for Places objects to delete. If not specified, all Places objects are deleted. return void titanium titanium Example request to delete all Place objects. Cloud.sendRequest({ url : \"places/batch_delete.json\", method : \"DELETE\" }, function(e) { if (e.success) { alert(\"All Place objects have been deleted.\"); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE -F \"where={\\\"favorite_color\\\":\\\"blue\\\"}\" https://api.cloud.appcelerator.com/v1/places/batch_delete.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"batchDelete\" } } ios Example request to delete all Place objects. [[APSCloud sharedInstance] sendRequest:@\"places/batch_delete.json\" method:@\"DELETE\" data:nil handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"All Place object have been deleted.\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to delete all Place objects. APSCloud.getInstance().sendRequest(\"places/batch_delete.json\", \"DELETE\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"All Place objects have been deleted.\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.placesBatchDelete({ where: {'state': 'TX'} }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.places.forEach(function (place) { console.log(place); }); } }); "
    },
    {
        "id": "Places-method-count-arrowdb",
        "url": "Places-method-count",
        "type": "arrowdb",
        "name": "Places.count",
        "content": "Retrieves the total number of Place objects. GET places/count.json return void titanium Example request to retrieve the total number of Places objects. Cloud.sendRequest({ url : \"places/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/places/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"placesCount\", \"count\": 1 } } ios Example request to retrieve the total number of Place objects. [[APSCloud sharedInstance] sendRequest:@\"places/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of Place objects. APSCloud.getInstance().sendRequest(\"places/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.placesCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "Places-method-create-arrowdb",
        "url": "Places-method-create",
        "type": "arrowdb",
        "name": "Places.create",
        "content": "Creates a new place object. To create a place, you must specify at least one of the following: address, city, state, postal_code, country, or geographical coordinates (longitude and latitude). POST places/create.json name Place name. address Address. city City. state State. postal_code Postal or ZIP code. country Country. latitude Latitude. longitude Longitude. website Website URL. twitter Twitter ID. phone_number Phone number. photo New photo to attach as the primary photo for this place. When you use the photo parameter to attach a new photo, you can use the custom resize and sync options. photo_id ID of an existing photo to attach as the primary photo for this place. tags Comma separated list of tags for this place. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this place object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this place object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id User ID to create this place on behalf of. The current login user must be an application admin to create a place on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example creates a new place and checks the response. Cloud.Places.create({ name: 'Appcelerator HQ', state: 'California', website: 'http://www.appcelerator.com' }, function (e) { if (e.success) { var place = e.places[0]; alert('Success:\\n' + 'id: ' + place.id + '\\n' + 'name: ' + place.name + '\\n' + 'updated_at: ' + place.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"name=Appcelerator Cloud Services\" -F \"photo=@photo.jpg\" -F \"address=58 South Park Ave.\" -F \"city=San Francisco\" -F \"state=California\" -F \"postal_code=94107-1807\" -F \"country=United States\" -F \"latitude=37.782227\" -F \"longitude=-122.393159\" -F \"twitter=acs\" -F \"website=http://cocoafish.com\" https://api.cloud.appcelerator.com/v1/places/create.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"createPlace\" }, \"response\": { \"places\": [ { \"id\":\"4d8910aed0afbe0e4e000006\", \"name\":\"Appcelerator Cloud Services\", \"created_at\":\"2011-03-22T21:12:14+0000\", \"updated_at\":\"2011-03-22T21:12:14+0000\", \"address\":\"58 South Park Ave.\", \"city\":\"San Francisco\", \"state\":\"California\", \"postal_code\":\"94107-1807\", \"country\":\"United States\", \"website\":\"http://www.appcelerator.com\", \"twitter\":\"acs\", \"lat\":37.782227, \"lng\":-122.393159, \"photo\": { \"id\":\"4dcf261cd0afbe1833000002\", \"filename\":\"photo.jpg\", \"size\":584344, \"md5\":\"589b8ad43ed20bf8e622d719642bc939\", \"created_at\":\"2011-05-15T01:02:20+0000\", \"updated_at\":\"2011-05-15T01:02:20+0000\", \"processed\":false } } ] } } ios Example iOS call: NSDictionary *data = @{ @\"name\" : @\"Party Pictures\", @\"state\" : @\"California\", @\"website\": @\"http://www.appcelerator.com\" }; [APSPlaces create:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *places = e.response[@\"places\"]; NSDictionary *place = places[0]; NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nUpdated at : %@\\n\", place[@\"id\"], place[@\"name\"], place[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final static Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"name\", \"Appcelerator, Inc.\"); data.put(\"address\", \"440 N. Bernardo Avenue\"); data.put(\"city\", \"Mountain View\"); data.put(\"state\", \"California\"); data.put(\"latitude\", \"37.3890223\"); data.put(\"longitude\", \"-122.0502723\"); try { APSPlaces.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Created \") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSPlaces\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSPlaces\", e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPlaces\", e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.placesCreate({ name: 'Appcelerator HQ', address: '440 N. Bernardo Avenue', city: 'Mountain View', state: 'California', website: 'http://www.appcelerator.com' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.places[0]); } }); "
    },
    {
        "id": "Places-method-delete-arrowdb",
        "url": "Places-method-delete",
        "type": "arrowdb",
        "name": "Places.delete",
        "content": "Deletes a place. Only the user who created the place can delete it. The primary photo associated with the object is not deleted. An application admin can delete any Place object. DELETE places/delete.json place_id ID of the place to delete. su_id User ID to delete the Place object on behalf of. The user must be the creator of the object. The current login user must be an application admin to delete a Place object on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example deletes a place and checks the response. Cloud.Places.remove({ place_id: savedPlaceId }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/places/delete.json?key=&pretty_json=true&place_id=4d51d4186f70952d4c000006\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"deletePlace\" } } ios Example iOS call: NSDictionary *data = @{ @\"place_id\" : @\"savedPlaceID\" }; [APSPlaces remove:data withBlock:^(APSResponse *e) { if (e.success){ [[[UIAlertView alloc] initWithTitle:@\"Success\" message:nil delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"place_id\", \"4d8910aed0afbe0e4e000006\"); try { APSPlaces.remove(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"Removed!\"); } else { Log.e(\"APSPlaces\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSPlaces\", e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPlaces\", e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.placesDelete({ place_id: arrowDBPlaceId }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!')); } }); "
    },
    {
        "id": "Places-method-query-arrowdb",
        "url": "Places-method-query",
        "type": "arrowdb",
        "name": "Places.query",
        "content": "Performs custom query of places with sorting and paginating. Currently you can not query or sort data stored inside array or hash in custom fields. The following fields can be used for querying and sorting places: address : String. Place address. city : String. Place city. state : String. Place state. country : String. Country. user_id : String. ID of the user who created this place. google_cid : Google Customer ID (CID) associated with this place. tags_array : String. Search tags. lnglat : [longitude, latitude]. The Place's default coordinates. You can also store custom coordinates in a custom field and query for those coordinates separately (see Geographic Coordinates in Custom Fields). ratings_average: Number. Place's average rating (see Reviews). ratings_count: Number. Place's total number of ratings (see Reviews). reviews_count: Number. Place's total number of reviews (see Reviews). created_at: Date. Timestamp when the photo was created. updated_at: Date. Timestamp when the photo was updated. In ArrowDB 1.1.5 and later, you can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. For details about using the query parameters, see the Search and Query guide. GET places/query.json page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. where Constraint values for fields. where should be encoded JSON. If where is not specified, query returns all objects. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. show_user_like If set to true, each Place object in the response includes \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked field is not included in the response. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in the response JSON. In order to reduce server API calls from an application, the response JSON may include not just the objects that are being queried/searched, but also some important data related to the returned objects, such as owners and referenced objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests a list of places and checks the response. Cloud.Places.query({ page: 1, per_page: 20, where: { lnglat: { '$nearSphere': [-122.23,37.12], '$maxDistance': 0.00126 } } }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.places.length); for (var i = 0; i rest Example cURL request that queries places with name \"Appcelerator Cloud Services\" near latitude 37.12, longitude -122.23 within 5 miles $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode 'where={\"name\":\"Appcelerator Cloud Services\",\"lnglat\":{\"$nearSphere\":[-122.23,37.12], \"$maxDistance\" : 0.00126}}' \"https://api.cloud.appcelerator.com/v1/places/query.json?key=&pretty_json=true&count=true\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"queryPlaces\", \"count\": 100 }, \"response\": { \"places\": [ { \"id\":\"4d2e399b6f70951b6f000013\", \"name\":\"Maya Restaurant\", \"created_at\":\"2011-01-12T23:30:35+0000\", \"updated_at\":\"2011-01-12T23:30:35+0000\", \"address\":\"303 2nd Street\", \"city\":\"San Francisco\", \"state\":\"CA\", \"country\":\"United States\", \"phone\":\"(415) 543-2928\", \"lat\":37.12, \"lng\":-122.23 } ] } } ios Example iOS call: NSDictionary *data = @{ @\"page\" : @1, @\"per_page\" : @20, @\"where\": { @\"lnglat\": { @\"$nearSphere\": @[@-122.23, @37.12], @\"$maxDistance\": @0.00126 } } }; [APSPlaces query:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *places = e.response[@\"places\"]; for (NSDictionary * place in places) { NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nUpdated at : %@\\n\", place[@\"id\"], place[@\"name\"], place[@\"updated_at\"]]; NSLog(@\"%@\", message); } } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); JSONObject params = new JSONObject(\"{'name': 'Appcelerator, Inc.','lnglat':{'$nearSphere': [-122.23,37.12], '$maxDistance': 0.00126}}\"); data.put(\"where\", params); try { APSPlaces.query(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { places = e.getResponse().getJSONArray(\"places\"); final ArrayList objectsList = new ArrayList(); for (int i = 0; i nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.placesQuery({ limit: 10, where: { lnglat: { '$nearSphere': [-122.23,37.12], '$maxDistance': 0.00126 } } }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.places.forEach(function(place) { console.log(place); }); } }); "
    },
    {
        "id": "Places-method-search-arrowdb",
        "url": "Places-method-search",
        "type": "arrowdb",
        "name": "Places.search",
        "content": "Returns the list of places that have been added to the app, sorted by search relevancy. Optionally, latitude and longitude can be given to return the list of places starting from a particular location. To bound the results within a certain radius (in km) from the starting coordinates, add the distance parameter. q can be given to search by place name. If you have provided a starting latitude and longitude for place search, each result will return a distance to the starting point in km. GET places/search.json page Request page number, default is 1. per_page Number of results per page, default is 10. response_json_depth Nested object depth level counts in the response JSON. In order to reduce server API calls from an application, the response JSON may include not just the objects that are being queried/searched, but also some important data related to the returned objects, such as owners and referenced objects. Default is 1, valid range is 1 to 8. latitude Latitude to center search on. longitude Longitude to center search on. distance Distance in km to search from the identified center point. q Space-separated list of keywords used to perform full text search on place name and tags. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example searches for places and checks the response. Cloud.Places.search({ latitude: lat, longitude: lon }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.places.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/places/search.json?key=&latitude=37.743722&longitude=-122.393159&pretty_json=true\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"searchPlaces\", \"page\":1, \"per_page\":10, \"total_pages\":1, \"total_results\":2 }, \"response\": { \"places\": [ { \"id\":\"4d2e399b6f70951b6f000013\", \"name\":\"Maya Restaurant\", \"created_at\":\"2011-01-12T23:30:35+0000\", \"updated_at\":\"2011-01-12T23:30:35+0000\", \"address\":\"303 2nd Street\", \"city\":\"San Francisco\", \"state\":\"CA\", \"country\":\"United States\", \"phone\":\"(415) 543-2928\", \"latitude\": 37.743722, \"longitude\": -122.421978, \"distance\": 2.53 }, { \"id\":\"4d2e45ab6f70951b6f00003d\", \"name\":\"Farolito Taqueria\", \"created_at\":\"2011-01-13T00:22:03+0000\", \"updated_at\":\"2011-01-13T00:22:03+0000\", \"address\":\"2779 Mission Street\", \"city\":\"San Francisco\", \"state\":\"CA\", \"country\":\"United States\", \"phone\":\"(415) 824-7877\", \"latitude\": 37.782227, \"longitude\": -122.393159, \"distance\": 4.28 } ] } } ios Example iOS call: NSDictionary *data = @{ @\"latitude\" : latitude, @\"longitude\" : longitude }; [APSPlaces search:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *places = e.response[@\"places\"]; for (NSDictionary * place in places) { NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nUpdated at : %@\\n\", place[@\"id\"], place[@\"name\"], place[@\"updated_at\"]]; NSLog(@\"%@\", message); } } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); // Create dictionary of parameters to be passed with the request HashMap data = new HashMap(); data.put(\"latitude\", \"37.3890223\"); data.put(\"longitude\", \"-122.0502723\"); try { APSPlaces.search(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray places = e.getResponse().getJSONArray(\"places\"); for (int i = 0; i nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.placesSearch({ latitude: lat, longitude: lon }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.places.forEach(function(place) { console.log(place); }); } }); "
    },
    {
        "id": "Places-method-show-arrowdb",
        "url": "Places-method-show",
        "type": "arrowdb",
        "name": "Places.show",
        "content": "Returns information for the identified place. GET places/show.json place_id ID of the place to show. response_json_depth Nested object depth level counts in the response JSON. In order to reduce server API calls from an application, the response JSON may include not just the identified object, but also some important data related to the returned objects, such as owners and referenced objects. Default is 1, valid range is 1 to 8. show_user_like If set to true the Place object in the response will include \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked field is not included in the response. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example retrieves information about a place and checks the response. Cloud.Places.show({ place_id: savedPlaceId }, function (e) { if (e.success) { var place = e.places[0]; alert('Success:\\n' + 'id: ' + place.id + '\\n' + 'name: ' + place.name + '\\n' + 'updated_at: ' + place.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/places/show.json?key=&pretty_json=true&place_id=4d6f13e96f70953608000012\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"showPlace\" }, \"response\": { \"places\": [ { \"id\":\"4d6f13e96f70953608000012\", \"name\":\"Maya Restaurant\", \"created_at\":\"2011-03-03T04:07:05+0000\", \"updated_at\":\"2011-03-03T04:07:05+0000\", \"address\":\"303 2nd Street\", \"city\":\"San Francisco\", \"state\":\"CA\", \"country\":\"United States\", \"phone\":\"(415) 543-2928\", \"lat\":37.784732, \"lng\":-122.395441 } ] } } ios Example iOS call: NSDictionary *data = @{ @\"place_id\" : @\"savedPlaceID\" }; [APSPlaces show:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *places = e.response[@\"places\"]; NSDictionary *place = places[0]; NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nUpdated at : %@\\n\", place[@\"id\"], place[@\"name\"], place[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); // Create dictionary of parameters to be passed with the request HashMap data = new HashMap(); data.put(\"place_id\", 4d6f13e96f70953608000012); try { APSPlaces.show(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { Log.i(\"APSPlaces\", e.getResponseString()); } catch (APSCloudException e1) { Log.e(\"APSPlaces\", e.toString()); } } else { Log.e(\"APSPlaces\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSPlaces\", e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPlaces\", e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.placesShow({ place_id: savedPlaceId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.places[0]); } }); "
    },
    {
        "id": "Places-method-update-arrowdb",
        "url": "Places-method-update",
        "type": "arrowdb",
        "name": "Places.update",
        "content": "Any of the parameters used to Create a Place can be used to update it as well. Only the user that created the place can update it. An application admin can update any place object. PUT places/update.json place_id ID of the place to delete. name Place name. address Address. city City. state State. postal_code Postal or ZIP code. country Country. latitude Latitude. longitude Longitude. website Website URL. twitter Twitter ID. phone_number Phone number. photo New photo to attach as the primary photo for this place. When you use the photo parameter to attach a new photo, you can use the custom resize and sync options. photo_id ID of an existing photo to attach as the primary photo for this place. tags Comma separated list of tags for this place. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this place object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this place object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. user_id User ID to assign as the owner of the place object. The current user must have write access to the object in order to update the owner. su_id User ID to update the Place object on behalf of. The user must be the creator of the object. The current login user must be an application admin to update a Place object on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example updates a place and checks the response. Cloud.Places.update({ place_id: savedPlaceId, city: 'Mountain View' }, function (e) { if (e.success) { var place = e.places[0]; alert('Success:\\n' + 'id: ' + place.id + '\\n' + 'name: ' + place.name + '\\n' + 'updated_at: ' + place.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X PUT -F \"address=210 Market Street\" -F \"place_id=4d8910aed0afbe0e4e000006\" https://api.cloud.appcelerator.com/v1/places/update.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"updatePlace\" }, \"response\": { \"places\": [ { \"id\":\"4d8910aed0afbe0e4e000006\", \"name\":\"Appcelerator Cloud Services\", \"created_at\":\"2011-03-22T21:12:14+0000\", \"updated_at\":\"2011-03-24T18:12:01+0000\", \"address\":\"201 Market St.\", \"city\":\"San Francisco\", \"state\":\"California\", \"country\":\"United States\", \"website\":\"appcelerator.com\", \"twitter\":\"acs\", \"latitude\":37.782227, \"longitude\":-122.393159 } ] } } ios Example iOS call: NSDictionary *data = @{ @\"place_id\" : @\"savedPlaceID\", @\"city\" : @\"Mountain View\" }; [APSPlaces update:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *places = e.response[@\"places\"]; NSDictionary *place = places[0]; NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nUpdated at : %@\\n\", place[@\"id\"], place[@\"name\"], place[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; // Create dictionary of parameters to be passed with the request HashMap data = new HashMap(); data.put(\"place_id\", \"4d8910aed0afbe0e4e000006\"); data.put(\"name\", \"Cocoafish, Inc.\"); data.put(\"city\", \"Beijing\"); try { APSPlaces.update(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Updated!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSPlaces\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSPlaces\", e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPlaces\", e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.placesUpdate({ place_id: savedPlaceId, country: 'United States of America' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.places[0]); } }); "
    },
    {
        "name": "Posts",
        "id": "Posts-arrowdb",
        "url": "Posts",
        "type": "arrowdb",
        "content": "Posts A Post represents a wall post or similar social media content. "
    },
    {
        "id": "Posts-property-acls-arrowdb",
        "url": "Posts-property-acls",
        "type": "arrowdb",
        "name": "Posts.acls",
        "content": "Single-element array containing the object's ACL, if any. ACLs[]"
    },
    {
        "id": "Posts-property-content-arrowdb",
        "url": "Posts-property-content",
        "type": "arrowdb",
        "name": "Posts.content",
        "content": "Text content of the post. String"
    },
    {
        "id": "Posts-property-created_at-arrowdb",
        "url": "Posts-property-created_at",
        "type": "arrowdb",
        "name": "Posts.created_at",
        "content": "Creation date for this object. Date"
    },
    {
        "id": "Posts-property-custom_fields-arrowdb",
        "url": "Posts-property-custom_fields",
        "type": "arrowdb",
        "name": "Posts.custom_fields",
        "content": "User defined fields. See Custom Data Fields. String/Hash"
    },
    {
        "id": "Posts-property-event-arrowdb",
        "url": "Posts-property-event",
        "type": "arrowdb",
        "name": "Posts.event",
        "content": "Event this post belongs to. String"
    },
    {
        "id": "Posts-property-id-arrowdb",
        "url": "Posts-property-id",
        "type": "arrowdb",
        "name": "Posts.id",
        "content": "Generated ID for this object. String"
    },
    {
        "id": "Posts-property-photo-arrowdb",
        "url": "Posts-property-photo",
        "type": "arrowdb",
        "name": "Posts.photo",
        "content": "Primary photo for this post. Photos"
    },
    {
        "id": "Reviewable-property-ratings_average-arrowdb",
        "url": "Reviewable-property-ratings_average",
        "type": "arrowdb",
        "name": "Reviewable.ratings_average",
        "content": "Average rating for this object. Only present if the object has been reviewed. Number"
    },
    {
        "id": "Reviewable-property-ratings_count-arrowdb",
        "url": "Reviewable-property-ratings_count",
        "type": "arrowdb",
        "name": "Reviewable.ratings_count",
        "content": "Total number of reviews for this object that include a rating. Only present if the object has been reviewed. Number"
    },
    {
        "id": "Reviewable-property-ratings_summary-arrowdb",
        "url": "Reviewable-property-ratings_summary",
        "type": "arrowdb",
        "name": "Reviewable.ratings_summary",
        "content": "Breakdown of the number of reviews that specified a given rating value. For example, if your ratings range from 1-5, the ratings summary might look like this: ratings_summary: { \"1\" : 1, \"2\" : 0, \"3\" : 5, \"4\" : 50, \"5\" : 12 } Only present if the object has been reviewed. Hash"
    },
    {
        "id": "Reviewable-property-reviews-arrowdb",
        "url": "Reviewable-property-reviews",
        "type": "arrowdb",
        "name": "Reviewable.reviews",
        "content": "List of reviews for this object. Only present if the object has been reviewed. Reviews[]"
    },
    {
        "id": "Reviewable-property-reviews_count-arrowdb",
        "url": "Reviewable-property-reviews_count",
        "type": "arrowdb",
        "name": "Reviewable.reviews_count",
        "content": "Total number of reviews for this object. Only present if the object has been reviewed. Number"
    },
    {
        "id": "Posts-property-tags-arrowdb",
        "url": "Posts-property-tags",
        "type": "arrowdb",
        "name": "Posts.tags",
        "content": "List of tags for this object. String[]"
    },
    {
        "id": "Posts-property-title-arrowdb",
        "url": "Posts-property-title",
        "type": "arrowdb",
        "name": "Posts.title",
        "content": "Title of the post. String"
    },
    {
        "id": "Posts-property-updated_at-arrowdb",
        "url": "Posts-property-updated_at",
        "type": "arrowdb",
        "name": "Posts.updated_at",
        "content": "Last update time for this object. Date"
    },
    {
        "id": "Posts-property-user-arrowdb",
        "url": "Posts-property-user",
        "type": "arrowdb",
        "name": "Posts.user",
        "content": "User who created this post. String"
    },
    {
        "id": "Posts-method-batch_delete-arrowdb",
        "url": "Posts-method-batch_delete",
        "type": "arrowdb",
        "name": "Posts.batch_delete",
        "content": "Deletes Posts objects that match the query constraints provided in the where parameter. If no where parameter is provided, all Posts objects are deleted. Note that an HTTP 200 code (success) is returned if the call completed successfully but the query matched no objects. For performance reasons, the number of objects that can be deleted in a single batch delete operation is limited to 100,000. The matched objects are deleted asynchronously in a separate process. Any primary photos associated with the matched objects are not deleted. You must be an application admin to run this command. DELETE posts/batch_delete.json where Encoded JSON object that specifies constraint values for Posts objects to delete. If not specified, all Posts objects are deleted. return void titanium Example request to delete all Post objects. Cloud.sendRequest({ url : \"posts/batch_delete.json\", method : \"DELETE\" }, function(e) { if (e.success) { alert(\"All Post objects have been deleted.\"); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE -F \"where={\\\"favorite_color\\\":\\\"blue\\\"}\" https://api.cloud.appcelerator.com/v1/posts/batch_delete.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"batchDelete\" } } ios Example request to delete all Post objects. [[APSCloud sharedInstance] sendRequest:@\"posts/batch_delete.json\" method:@\"DELETE\" data:nil handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"All Post object have been deleted.\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to delete all Post objects. APSCloud.getInstance().sendRequest(\"posts/batch_delete.json\", \"DELETE\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"All Post objects have been deleted.\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.postsBatchDelete({ where: { 'ratings_count': {'$lt': 10} } }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Posts-method-count-arrowdb",
        "url": "Posts-method-count",
        "type": "arrowdb",
        "name": "Posts.count",
        "content": "Retrieves the total number of Post objects. GET posts/count.json return void titanium Example request to retrieve the total number of Post objects. Cloud.sendRequest({ url : \"posts/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/posts/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"postsCount\", \"count\": 1 } } ios Example request to retrieve the total number of Post objects. [[APSCloud sharedInstance] sendRequest:@\"posts/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of Post objects. APSCloud.getInstance().sendRequest(\"posts/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.postsCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "Posts-method-create-arrowdb",
        "url": "Posts-method-create",
        "type": "arrowdb",
        "name": "Posts.create",
        "content": "Create a post, which can be a Facebook-style wall post or Digg-style submission with content. POST posts/create.json content Text content of the post. title Title of the post. event_id ID of the Events this post belongs to. photo New photo to attach as the primary photo for this object. When you use the photo parameter to attach a new photo, you can use the custom resize and sync options. photo_id ID of an existing photo to attach as the primary photo for this object. tags Comma separated list of tags for this object. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id User ID to create the object on behalf of. The current login user must be an application admin to create an object on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example creates a new post and checks the response. Cloud.Posts.create({ content: 'Man Walks On Moon', title: 'News of the day', photo: Titanium.Filesystem.getFile('photo.jpg') }, function (e) { if (e.success) { var post = e.posts[0]; alert('Success:\\n' + 'id: ' + post.id + '\\n' + 'title: ' + post.title + '\\n' + 'content: ' + post.content + '\\n' + 'updated_at: ' + post.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"photo=@photo.jpg\" -F \"content=Buzz at Appcelerator Cloud Services\" -F \"title=Today's News\" https://api.cloud.appcelerator.com/v1/posts/create.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"createPost\" }, \"response\": { \"posts\": [ { \"id\": \"4e33a252d9ca724676000003\", \"title\": \"Today's News\", \"created_at\": \"2011-07-30T06:18:58+0000\", \"updated_at\": \"2011-07-30T06:18:58+0000\", \"content\": \"Post Body\", \"reviews_count\": 0, \"ratings_average\": 0.0, \"ratings_summary\": { }, \"user\": { \"id\": \"4e33a251d9ca724676000002\", \"first_name\": \"Bob\", \"last_name\": \"Dude\", \"created_at\": \"2011-07-30T06:18:57+0000\", \"updated_at\": \"2011-07-30T06:18:58+0000\", \"username\": \"bob\", \"email\": \"bob@dude.com\" }, \"photo\": { \"id\": \"4e33a252d9ca724676000004\", \"filename\": \"photo.jpg\", \"size\": 584344, \"md5\": \"589b8ad43ed20bf8e622d719642bc939\", \"created_at\": \"2011-07-30T06:18:58+0000\", \"updated_at\": \"2011-07-30T06:18:58+0000\", \"processed\": false } } ] } } ios Example iOS call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"title\": @\"Appcelerator Cloud Services buzz\", @\"content\": @\"More users joined Appcelerator Cloud Services\" }; [APSPosts create:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Created post!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"title\", \"Today's News\"); data.put(\"content\", \"Buzz at Appcelerator Cloud Services\"); try { APSPosts.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Created!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSPosts\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPosts\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPosts\", \"ERROR: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''), fs = require('fs'); arrowDBApp.postsCreate({ content: 'Man Walks On Moon', title: 'News of the day', photo: fs.createReadStream('photo.jpg') }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.posts[0]); } }); "
    },
    {
        "id": "Posts-method-delete-arrowdb",
        "url": "Posts-method-delete",
        "type": "arrowdb",
        "name": "Posts.delete",
        "content": "Deletes the post with the given id. The original submitter can always delete a post. The primary photo associated with the object is not deleted. An application admin can delete any Post object. DELETE posts/delete.json post_id ID of the post to delete. su_id User ID to delete the Post object on behalf of. The user must be the creator of the object. The current login user must be an application admin to delete a Post object on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example deletes a post and checks the response. Cloud.Posts.remove({ post_id: savedPostId }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/posts/delete.json?key=&pretty_json=true&post_id=4d86d26ed0afbe107400000f\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"deletePost\" } } ios Example iOS call: NSDictionary *data = @{ @\"post_id\":@\"4d86d26ed0afbe107400000f\" }; [APSPosts remove:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Removed!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"post_id\", \"4d86d26ed0afbe107400000f\"); try { APSPosts.remove(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Removed!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSPosts\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPosts\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPosts\", \"ERROR: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.postsDelete({ post_id: savedPostId }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Posts-method-query-arrowdb",
        "url": "Posts-method-query",
        "type": "arrowdb",
        "name": "Posts.query",
        "content": "Performs custom query of posts with sorting and pagination. Currently you can not query or sort data stored inside array or hash in custom fields. In addition to custom fields, the following pre-defined fields in posts that can be queried and sorted: user_id : String. Post owner's user ID. title : String. Post title. event_id : String. ID of the event posts belong to. tags_array : String. Post tags. ratings_average : Number. Post's average rating. See {@Reviews}. ratings_count : Number. Post's total number of ratings. See {@Reviews}. reviews_count : Number. Post's total number of reviews. See {@Reviews}. created_at : Date. Timestamp when the post was created. updated_at : Date. Timestamp when the post was last updated. In ArrowDB 1.1.5 and later, you can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. For details about using the query parameters, see the Search and Query guide. GET posts/query.json page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. where Constraint values for fields. where should be encoded JSON. If where is not specified, query returns all objects. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. show_user_like If set to true, each Post object in the response includes \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked field is not included in the response. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in the response JSON. In order to reduce server API calls from an application, the response JSON may include not just the objects that are being queried/searched, but also some important data related to the returned objects, such as owners and referenced objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests a list of posts and checks the response. Cloud.Posts.query({ page: 1, per_page: 20, where: { reviews_count: { '$gt': 1.0 } } }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.posts.length); for (var i = 0; i rest Example cURL request: If your app assigns a geo location to each post, query posts with average rating greater than 7 near latitude 37.12, longitude -122.23 within 5 miles $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode 'where={\"ratings_average\":{\"$gt\":7.0},\"coordinates\":{\"$nearSphere\":[-122.23,37.12], \"$maxDistance\" : 0.00126}}' \"https://api.cloud.appcelerator.com/v1/posts/query.json?key=&pretty_json=true&count=true\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"queryPosts\", \"count\": 100 }, \"response\": { \"posts\": [ { \"id\": \"4e33a252d9ca724676000003\", \"title\": \"Post title\", \"created_at\": \"2011-07-30T06:18:58+0000\", \"updated_at\": \"2011-07-30T06:18:58+0000\", \"content\": \"Post Body\", \"reviews_count\": 10, \"ratings_average\": 7.5, \"ratings_count\" : 10, \"ratings_summary\": { \"10\": 5, \"5\" : 5 }, \"user\": { \"id\": \"4e33a251d9ca724676000002\", \"first_name\": \"Bob\", \"last_name\": \"Dude\", \"created_at\": \"2011-07-30T06:18:57+0000\", \"updated_at\": \"2011-07-30T06:18:58+0000\", \"username\": \"bob\", \"email\": \"bob@dude.com\" }, \"photo\": { \"id\": \"4e33a252d9ca724676000004\", \"filename\": \"photo.jpg\", \"size\": 584344, \"md5\": \"589b8ad43ed20bf8e622d719642bc939\", \"created_at\": \"2011-07-30T06:18:58+0000\", \"updated_at\": \"2011-07-30T06:18:58+0000\", \"processed\": true }, \"custom_fields\": { \"coordinates\": [-122.23, 37.12] } } } ] } } ios Example iOS APS SDK call: NSDictionary *data = @{ @\"where\": @{ @\"ratings_average\":@{ @\"$gt\":@7.0 } } }; [APSPosts query:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu posts\", (unsigned long)((NSArray *)e.response[@\"posts\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success!\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); try { HashMap data = new HashMap(); JSONObject params = new JSONObject(\"{'ratings_average': {'$gt': 7.0}}\"); data.put(\"where\", params); APSPosts.query(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray posts = e.getResponse().getJSONArray(\"posts\"); if (posts.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.postsQuery({ limit: 10, where: { reviews_count: { '$gt': 1.0 } } }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.posts.forEach(function(post) { console.log(post); }); } }); "
    },
    {
        "id": "Posts-method-show-arrowdb",
        "url": "Posts-method-show",
        "type": "arrowdb",
        "name": "Posts.show",
        "content": "Returns the post with the given id. GET posts/show.json post_id Post ID to show. Either post_id or post_ids must be specified. post_ids Comma-separated list of post IDs. Either post_id or post_ids must be specified. response_json_depth Nested object depth level counts in response JSON. In order to reduce server API calls from an application, the response JSON may include not just the identified objects, but also some important data related to the returned objects such as object's owner or referenced objects. Default is 1, valid range is 1 to 8. show_user_like If set to true the Post object in the response will include \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked field is not included in the response. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example retrieves information about a post and checks the response. Cloud.Posts.show({ post_id: savedPostId }, function (e) { if (e.success) { var post = e.posts[0]; alert('Success:\\n' + 'id: ' + post.id + '\\n' + 'title: ' + post.title + '\\n' + 'content: ' + post.content + '\\n' + 'updated_at: ' + post.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/posts/show.json?key=&pretty_json=true&post_id=4e33a5b7d9ca7246ba000003&show_user_like=true\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"showPosts\" }, \"response\": { \"posts\": [ { \"id\": \"4e33a5b7d9ca7246ba000003\", \"title\": \"Post title\", \"created_at\": \"2011-07-30T06:33:27+0000\", \"current_user_liked\": true, \"updated_at\": \"2011-07-30T06:33:27+0000\", \"content\": \"Post Body\", \"reviews_count\": 10, \"ratings_average\": 7.5, \"ratings_summary\": { \"10\": 5, \"5\" : 5 }, \"user\": { \"id\": \"4e33a5b6d9ca7246ba000002\", \"first_name\": \"Bob\", \"last_name\": \"Dude\", \"created_at\": \"2011-07-30T06:33:26+0000\", \"updated_at\": \"2011-07-30T06:33:27+0000\", \"username\": \"bob\", \"email\": \"bob@dude.com\" }, \"photo\": { \"id\": \"4e33a5b7d9ca7246ba000004\", \"filename\": \"photo.jpg\", \"size\": 584344, \"md5\": \"589b8ad43ed20bf8e622d719642bc939\", \"created_at\": \"2011-07-30T06:33:27+0000\", \"updated_at\": \"2011-07-30T06:33:27+0000\", \"processed\": false } } ] } } ios Example iOS call: NSDictionary *data = @{@\"status_id\": @\"4e33a5b7d9ca7246ba000003\"}; [APSPosts show:data withBlock:^(APSResponse *e) { if (e.success) { NSArray *posts = e.response[@\"posts\"]; NSDictionary *post = posts[0]; NSString *message = [NSString stringWithFormat:@\"message: %@\", post[@\"content\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"post_id\", \"4e33a5b7d9ca7246ba000003\"); try { APSPosts.show(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { Log.i(\"APSPosts\", e.getResponseString()); } catch (APSCloudException err) { Log.e(\"APSPosts\", \"ERROR: \" + err.toString()); } } else { Log.e(\"APSPosts\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPosts\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPosts\", \"ERROR: \" + err.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.postsShow({ post_id: savedPostId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.posts[0]); } }); "
    },
    {
        "id": "Posts-method-update-arrowdb",
        "url": "Posts-method-update",
        "type": "arrowdb",
        "name": "Posts.update",
        "content": "Updates the identified post. The original submitter can always update a post. An application admin can update any Post object. PUT posts/update.json post_id ID of the post to update. content Text content of the post. title Title of the post. event_id ID of the Events this post belongs to. photo New photo to attach as the primary photo for this object. When you use the photo parameter to attach a new photo, you can use the custom resize and sync options. photo_id ID of an existing photo to attach as the primary photo for this object. tags Comma separated list of tags for this object. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. To remove an ACL, set acl_name or acl_id to an empty string. acl_id ID of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. To remove an ACL, set acl_name or acl_id to an empty string. su_id User ID to update the Post object on behalf of. The user must be the creator of the object. The current login user must be an application admin to update a Post object on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example updates a post and checks the response. Cloud.Posts.update({ post_id: savedPostId, title: 'Lunar Eclipse' }, function (e) { if (e.success) { var post = e.posts[0]; alert('Success:\\n' + 'id: ' + post.id + '\\n' + 'title: ' + post.title + '\\n' + 'content: ' + post.content + '\\n' + 'updated_at: ' + post.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X PUT -F \"post_id=4e33a5b7d9ca7246ba000003\" -F \"title=Updated Post Title\" https://api.cloud.appcelerator.com/v1/posts/update.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"updatePost\" }, \"response\": { \"posts\": [ { \"id\": \"4e33a5b7d9ca7246ba000003\", \"title\": \"Updated Post Title\", \"created_at\": \"2011-07-30T06:33:27+0000\", \"updated_at\": \"2011-07-30T06:33:27+0000\", \"content\": \"Updated Post Body\", \"reviews_count\": 10, \"ratings_average\": 7.5, \"ratings_summary\": { \"10\": 5, \"5\" : 5 }, \"user\": { \"id\": \"4e33a5b6d9ca7246ba000002\", \"first_name\": \"Bob\", \"last_name\": \"Dude\", \"created_at\": \"2011-07-30T06:33:26+0000\", \"updated_at\": \"2011-07-30T06:33:27+0000\", \"username\": \"bob\", \"email\": \"bob@dude.com\" }, \"photo\": { \"id\": \"4e33a5b7d9ca7246ba000004\", \"filename\": \"photo.jpg\", \"size\": 584344, \"md5\": \"589b8ad43ed20bf8e622d719642bc939\", \"created_at\": \"2011-07-30T06:33:27+0000\", \"updated_at\": \"2011-07-30T06:33:27+0000\", \"processed\": false } } ] } } ios Example iOS APS SDK call: NSDictionary *data = @{ @\"post_id\": @\"4e33a5b7d9ca7246ba000003\", @\"title\":@\"Updated Post Title\" }; [APSPosts update:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Updated!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"post_id\", \"4e33a5b7d9ca7246ba000003\"); data.put(\"title\", \"Updated Post Title\"); try { APSPosts.update(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONObject post = e.getResponse().getJSONArray(\"posts\").getJSONObject(0); Log.i(\"APSPosts\", posts.getString(\"title\") + \" \" + posts.getString(\"content\")); } catch (JSONException err) { Log.e(\"APSPosts\", \"Exception thrown: \" + err.toString()); } } else { Log.e(\"APSPosts\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPosts\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPosts\", \"ERROR: \" + err.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.postsUpdate({ post_id: savedPostId, title: 'Lunar Eclipse' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.posts[0]); } }); "
    },
    {
        "name": "PushLogDetails",
        "id": "PushLogDetails-arrowdb",
        "url": "PushLogDetails",
        "type": "arrowdb",
        "content": "PushLogDetails The data type for objects returned in the response to a Logs.querypushlogdetails request. Any error logged for a specific push notification is contained in the PushLogDetails object's error_message field. The error_message field is only present if an error was logged for that item. "
    },
    {
        "id": "PushLogDetails-property-android_types-arrowdb",
        "url": "PushLogDetails-property-android_types",
        "type": "arrowdb",
        "name": "PushLogDetails.android_types",
        "content": "List of Android push notification object types, and the number of notifications delivered using each type. Possible key names are the following: GCM: Google Cloud Messaging service for Android Hash[]"
    },
    {
        "id": "PushLogDetails-property-app_id-arrowdb",
        "url": "PushLogDetails-property-app_id",
        "type": "arrowdb",
        "name": "PushLogDetails.app_id",
        "content": "Application ID. String"
    },
    {
        "id": "PushLogDetails-property-channel-arrowdb",
        "url": "PushLogDetails-property-channel",
        "type": "arrowdb",
        "name": "PushLogDetails.channel",
        "content": "Name of the channel to which the notification was delivered. String"
    },
    {
        "id": "PushLogDetails-property-created_at-arrowdb",
        "url": "PushLogDetails-property-created_at",
        "type": "arrowdb",
        "name": "PushLogDetails.created_at",
        "content": "Timestamp when the log item was created. Date"
    },
    {
        "id": "PushLogDetails-property-device_count-arrowdb",
        "url": "PushLogDetails-property-device_count",
        "type": "arrowdb",
        "name": "PushLogDetails.device_count",
        "content": "The total number of devices to which the notification was delivered. Number"
    },
    {
        "id": "PushLogDetails-property-error_message-arrowdb",
        "url": "PushLogDetails-property-error_message",
        "type": "arrowdb",
        "name": "PushLogDetails.error_message",
        "content": "The error, if any, associated with the push notification. For a list of possible errors, see Push Notification Error Message. String"
    },
    {
        "id": "PushLogDetails-property-id-arrowdb",
        "url": "PushLogDetails-property-id",
        "type": "arrowdb",
        "name": "PushLogDetails.id",
        "content": "Identifes the push notification log item. String"
    },
    {
        "id": "PushLogDetails-property-locked_at-arrowdb",
        "url": "PushLogDetails-property-locked_at",
        "type": "arrowdb",
        "name": "PushLogDetails.locked_at",
        "content": "Timestamp when the log item was locked. Date"
    },
    {
        "id": "PushLogDetails-property-pem_sent_at-arrowdb",
        "url": "PushLogDetails-property-pem_sent_at",
        "type": "arrowdb",
        "name": "PushLogDetails.pem_sent_at",
        "content": "Timestamp when log item was inserted by Platform event system. Date"
    },
    {
        "id": "PushLogDetails-property-push_id-arrowdb",
        "url": "PushLogDetails-property-push_id",
        "type": "arrowdb",
        "name": "PushLogDetails.push_id",
        "content": "ID of push notification log item that was queried. String"
    },
    {
        "id": "PushLogDetails-property-send_status-arrowdb",
        "url": "PushLogDetails-property-send_status",
        "type": "arrowdb",
        "name": "PushLogDetails.send_status",
        "content": "A number that indicates the notification's status, and can be one of the following values: 0 - Sending 1 - Success 2 - Fail 3 - Over Due Number"
    },
    {
        "id": "PushLogDetails-property-types-arrowdb",
        "url": "PushLogDetails-property-types",
        "type": "arrowdb",
        "name": "PushLogDetails.types",
        "content": "A single-element Array containing an object with possible field names \"android\" and \"ios\". The value of each field indicates the number of Android and iOS devices, respectively, to which the push notification was delivered. Hash[]"
    },
    {
        "id": "PushLogDetails-property-updated_at-arrowdb",
        "url": "PushLogDetails-property-updated_at",
        "type": "arrowdb",
        "name": "PushLogDetails.updated_at",
        "content": "Timestamp when log item was updated. Date"
    },
    {
        "name": "PushLogs",
        "id": "PushLogs-arrowdb",
        "url": "PushLogs",
        "type": "arrowdb",
        "content": "PushLogs The data type for objects returned by Logs.querypushlogs. To get details about a specific notifiction log item, call Logs.querypushlogdetails passing it the value of PushLogs._id. "
    },
    {
        "id": "PushLogs-property-_id-arrowdb",
        "url": "PushLogs-property-_id",
        "type": "arrowdb",
        "name": "PushLogs._id",
        "content": "Log item ID. String"
    },
    {
        "id": "PushLogs-property-app_id-arrowdb",
        "url": "PushLogs-property-app_id",
        "type": "arrowdb",
        "name": "PushLogs.app_id",
        "content": "Application ID. String"
    },
    {
        "id": "PushLogs-property-channel-arrowdb",
        "url": "PushLogs-property-channel",
        "type": "arrowdb",
        "name": "PushLogs.channel",
        "content": "Name of the channel to which the push notification was delivered. String"
    },
    {
        "id": "PushLogs-property-created_at-arrowdb",
        "url": "PushLogs-property-created_at",
        "type": "arrowdb",
        "name": "PushLogs.created_at",
        "content": "Date that push notification was created. Date"
    },
    {
        "id": "PushLogs-property-payload-arrowdb",
        "url": "PushLogs-property-payload",
        "type": "arrowdb",
        "name": "PushLogs.payload",
        "content": "Notification payload. String"
    },
    {
        "id": "PushLogs-property-push_schedule_id-arrowdb",
        "url": "PushLogs-property-push_schedule_id",
        "type": "arrowdb",
        "name": "PushLogs.push_schedule_id",
        "content": "ID of the PushSchedules used to create the push notification (only present if the push notification was created by a PushSchedule). String"
    },
    {
        "id": "PushLogs-property-scheduled_at-arrowdb",
        "url": "PushLogs-property-scheduled_at",
        "type": "arrowdb",
        "name": "PushLogs.scheduled_at",
        "content": "Date that push notification was scheduled (only present if the push notification was created by a schedule.) Date"
    },
    {
        "id": "PushLogs-property-to_ids-arrowdb",
        "url": "PushLogs-property-to_ids",
        "type": "arrowdb",
        "name": "PushLogs.to_ids",
        "content": "Array of User IDs that push notification was delivered to. Array"
    },
    {
        "id": "PushLogs-property-updated_at-arrowdb",
        "url": "PushLogs-property-updated_at",
        "type": "arrowdb",
        "name": "PushLogs.updated_at",
        "content": "Date that push notification was updated. Date"
    },
    {
        "name": "PushNotifications",
        "id": "PushNotifications-arrowdb",
        "url": "PushNotifications",
        "type": "arrowdb",
        "content": "PushNotifications The Push Notifications API lets you send push notifications to your users who are on iOS and Android Devices. You can also send a system push notification to all users from the Admin Console. Please refer to the Push Notifications sections of the Android SDK guide or the iOS SDK guide to set up your app for push notifications to Android or iOS. To setup Titanium applications, refer to the Push Notification guide. The Push Notifications API provides two mechanisms to register and send push notifications. One relies on the user session, which requires the user to be logged in to receive push notifications. The other method uses devices tokens, which does not require the user to be logged in to receive notifications. If you are using the Titanium API, push notifications with device tokens require Titanium SDK 3.1.2 and later. Android Notes Device Support GCM supports devices that run Android 2.2 and later, and requires that the Google Play Store application be installed. For pre-4.0 devices, the user is required to set up their Google account. Optional Payload Fields On Android, you can specify the following optional fields in the payload parameter of the notify_tokens or notify method: icon (String): Filename minus the extension of the icon to display in the notification center. Place the file in /res/drawable for Android applications or /Resources for Titanium applications. Uses the app's icon by default. title (String): Title of the notification. vibrate (Boolean): If true, the device vibrates for one second. Badges When sending a push notification, you can specify a badge value, which is usually used to indicate the number of unread messages or other content waiting to be addressed by the user in your application. On Android, the badge number is displayed in the notification center, while on iOS, the badge number is displayed with the application icon. When setting the value of the badge, you can either directly set the badge number, or increment and decrement the current value of the badge. Set the badge field in the payload parameter of the notify_tokens or notify method to specify a value for the badge. Prefix the number with either the + or - symbol to increment or decrement the current value, respectively. Omit the prefix to directly set the value. For example, the value +2 increments the current badge value by two, the value -1, decrements the badge value by one, and the value 12 sets the badge value to twelve. Use the following methods to set the internally stored value of the badge and not update the displayed value in the application: set_badge: set, increment or decrement the value of the badge reset_badge: set the value of the badge to zero To update the displayed value in the application, you need to send a push notification with the badge field defined. Push Notifications with Device Tokens The methods with the _token suffix rely on the device's token to subscribe, receive, send or unsubscribe from push notifications: subscribe_token notify_tokens unsubscribe_token To retrieve your device token using the Android or iOS SDK API, refer to the Push Notifications sections of the Android SDK guide or the iOS SDK guide. To retrieve your device token using the Titanium SDK API: For Android, use the Modules.CloudPush module. For iOS, use the Titanium.Network.registerForPushNotifications method. Push Notifications with User Sessions The following methods require the user to be logged in to subscribe, receive or unsubscribe from push notifications: subscribe notify unsubscribe To send push notifications, the notify.json method uses the user's ID. You can also use the Users.logout method to unsubscribe from all push notifications by specifying the device_id parameter. Scheduling Push Notifications You can send push notifications to users at specific times, over a span of time; or at daily, weekly, or monthly intervals. For more information, refer to the PushSchedules API. Location-Based Push Notifications You can send push notifications to users based on their location. To use location-based push notifications, the ArrowDB server needs to know the location of the device. To update the device's location, you need to periodically call the subscription_update method and specify the loc parameter to update the device's location. To send a location-based push notification, use either the notify or notify_tokens method and specify a location query with the where parameter. For example, the following cURL command, sends a push notification to any device within 10 miles of Mountain View, CA, USA: $ curl -b cookies.txt -c cookies.txt -X POST --data-urlencode 'payload=Come visit our brand new Mountain View location!' \"https://api.cloud.appcelerator.com/v1/push_notification/notify.json?key=\" --data-urlencode 'where={\"loc\":{\"$geoWithin\":{\"$centerSphere\":[[-122.0507049560547,37.38685989379883] , 0.00252589 ]}}}' You can use the GeoFences API to have the device periodically check the ArrowDB server for data based on location instead of having the server push it to the device. Querying Push Notification Subscriptions Regular (non-admin) application users can use the query method to query their own push notification subscriptions. For application admins, the same method queries all subscriptions for all users, by default. An app admin can also query an arbitrary user's subscriptions by specifying the user's ID as the value of the query method's su_id parameter. "
    },
    {
        "id": "PushNotifications-method-channels_query-arrowdb",
        "url": "PushNotifications-method-channels_query",
        "type": "arrowdb",
        "name": "PushNotifications.channels_query",
        "content": "Returns a list of push notification channels the user is subscribed to. For application admins, if the user_id parameter is not specified, returns all channels with subscribed users. GET push_notification/channels/query.json user_id User to retrieve subscribed channels for. Only application admins can query subscribed channels of a user. page Request page number, default is 1. per_page Number of results per page, default is 10. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. count Set to true to return the total number of push channels in the count field of the meta header. Default is false. Only valid for applications created with ArrowDB 1.1.8 or greater. return void titanium Requires Release 3.2.0. Cloud.PushNotifications.queryChannels({ user_id: savedUserId }, function (e) { if (e.success) { Ti.API.info(\"channel: \" + e.push_channels.join()); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/push_notification/channels/query.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"queryPushChannels\" }, \"response\": { \"push_channels\": [ \"friend_request\", \"chat\" ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"user_id\": savedUserId }; [APSPushNotifications queryChannels:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu push_channels\", (unsigned long)((NSArray *) e.response[@\"push_channels\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); try { APSPushNotifications.queryChannels(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray push_channels = e.getResponse().getJSONArray(\"push_channels\"); if (push_channels.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushNotificationsQueryChannels({ user_id: savedUserId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.push_channels); } }); "
    },
    {
        "id": "PushNotifications-method-channels_show-arrowdb",
        "url": "PushNotifications-method-channels_show",
        "type": "arrowdb",
        "name": "PushNotifications.channels_show",
        "content": "Returns the number of devices subscribed to the specified channel. GET push_notification/channels/show.json name Name of the push channel. The name of the push channel cannot start with a hash symbol ('#') or contain a comma (','). pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Requires Release 3.2.0. Cloud.PushNotifications.showChannels({ name: 'test' }, function (e) { if (e.success) { Ti.API.info(\"Android:\" + e.devices.android_counts); Ti.API.info(\"iOS:\" + e.devices.ios_counts); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X GET --data-urlencode \"name=chat\" \"https://api.cloud.appcelerator.com/v1/push_notification/channels/show.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"showPushChannels\", }, \"response\": { \"devices\": { \"ios_counts\": 12, \"android_counts\": 18 } } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"name\": @\"test\" }; [APSPushNotifications showChannels:data withBlock:^(APSResponse *e) { if (e.success) { NSDictionary *devices = e.response[@\"devices\"]; NSString *message = [NSString stringWithFormat:@\"iOS: %@ Android: %@\", devices[@\"ios_counts\"], devices[@\"android_counts\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); data.put(\"name\", \"chat\"); try { APSPushNotifications.showChannels(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray devices = e.getResponse().getJSONArray(\"devices\"); if (devices.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushNotificationsShowChannels({ name: 'test' }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Android: ' + result.body.response.device.android_counts); console.log('iOS: ' + result.body.response.device.ios_counts); } }); "
    },
    {
        "id": "PushNotifications-method-count-arrowdb",
        "url": "PushNotifications-method-count",
        "type": "arrowdb",
        "name": "PushNotifications.count",
        "content": "Retrieves the total number of devices subscribed to push notifications. GET push_notification/count.json return void titanium Example request to retrieve the number of devices subscribed to push notifications. Cloud.sendRequest({ url : \"push_notification/count.json\", method : \"GET\" }, function(e) {// The callback called when the request completes Ti.API.info(JSON.stringify(e)); if (e.success) { alert(\"Subscribed iOS Devices: \" + e.ios + \"\\nSubscribed Android Devices: \" + e.android); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/push_notification/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"push_notificationCount\" \"count\": 10, }, \"response\": { \"push_notification_subscriptions\": { \"android\": 4, \"ios\": 6 } } } ios Example request to retrieve the number of devices subscribed to push notifications. [[APSCloud sharedInstance] sendRequest:@\"push_notification/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the number of devices subscribed to push notifications. APSCloud.getInstance().sendRequest(\"push_notification/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushNotificationsCount(function(err, result) { if (err) { console.error(err.message); } else { console.log('Android: ' + result.body.response.push_notification_subscriptions.android); console.log('iOS: ' + result.body.response.push_notification_subscriptions.ios); } }); "
    },
    {
        "id": "PushNotifications-method-notify-arrowdb",
        "url": "PushNotifications-method-notify",
        "type": "arrowdb",
        "name": "PushNotifications.notify",
        "content": "Sends push notifications to one or more users who are subscribed to a channel. Specify either friends, to_ids or where. One of these parameters must be used. These parameters cannot be used simultaneously. Application admins can set the to_ids parameter to everyone to send to all devices subscribed to the identified channel. The REST version of notify includes the push notification ID in its response. See the REST example below. POST push_notification/notify.json channel Name of the channel. For multiple channels, either comma-separate the list of channels or use an array of strings. The name of the push channel cannot start with a hash symbol ('#') or contain a comma (','). friends If this parameter is specified (regardless of the parameter's value), push notifications are sent to any of the user's Friends who are subscribed to the identified channel. to_ids Comma-separated list of user IDs to send the notification to users who are subscribed to the specified channel. Up to 1000 users can be specified. You cannot use this parameter when using a location query with the where parameter. Application admins can set this parameter to everyone to send to all devices subscribed to the channel. If you are using the web interface, you do not need to specify this parameter. payload Payload to send with the push notification. For a string, it will be sent as an alert (notification message). options Additional push options. expire_after_seconds (Number): Expiration time in seconds of when to stop sending the push notification. For example, if the push notification expiration time is for a day and the user's device is off for over a day, the user does not receive the push notification since it has expired. For example, to specify a one day expiration period, use options={'expire_after_seconds':86400}. where A JSON-encoded object that defines either the user or location query used to select the device that will receive the notification. Up to 1000 users can be returned by the query. If you are using a location query, you cannot use the to_ids parameter. To specify a user query, set the user field to a custom query, for example, the following query searches for all users with the first name of Joe: where={\"user\": {\"first_name\":\"Joe\"}} To specify a location query, set the loc field to a MongoDB Geospatial Query. The following query searches for all users within 2 km of Oakland, CA, USA: where={\"loc\": { \"$nearSphere\" : { \"$geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [-122.2708,37.8044] } , \"$maxDistance\" : 2000 }}} For details about using the where parameter, see the Search and Query guide. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example sends a push notification to a channel and checks the response. Cloud.PushNotifications.notify({ channel: 'friend_request', to_ids: '5354525d5714f565d3001c1e', payload: 'Welcome to push notifications' }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request. The JSON response object includes the ID of the push notification. $ curl -b cookies.txt -c cookies.txt -F \"channel=friend_request\" -F \"to_ids=5354525d5714f565d3001c1e\" -F \"payload=test\" https://api.cloud.appcelerator.com/v1/push_notification/notify.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"Notify\" }, \"response\": { \"push_notification\": { \"id\": \"53690d3fe10fa4582a00e887\", \"payload\": \"test\", \"channel\": \"friend_request\" } } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"channel\": @\"friend_request\", @\"to_id\": @\"5354525d5714f565d3001c1e\", @\"payload\": @\"Welcome to push notifications\" }; [APSPushNotifications notify:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); data.put(\"channel\", \"friend_request\"); data.put(\"to_ids\", \"123456,34567\"); data.put(\"payload\", \"Push Notification Test\"); try { APSPushNotifications.notify(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSPushNotifications\", \"Notified!\"); } else { Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushNotificationsNotify({ channel: 'friend_request', to_ids: IDS_LIST, payload: 'Welcome to push notifications' }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Notification sent!'); } }); "
    },
    {
        "id": "PushNotifications-method-notify_tokens-arrowdb",
        "url": "PushNotifications-method-notify_tokens",
        "type": "arrowdb",
        "name": "PushNotifications.notify_tokens",
        "content": "Sends push notifications to one or more users who are subscribed to a channel. Application admins can set the to_tokens parameter to everyone to send to all devices subscribed to the identified channel. If you use the to_tokens parameter, you cannot specify a location query using the where parameter in the same API call. POST push_notification/notify_tokens.json channel Name of the channel. For multiple channels, either comma-separate the list of channels or use an array of strings. The name of the push channel cannot start with a hash symbol ('#') or contain a comma (','). to_tokens Comma-separated list of device tokens. Sends push notification to the specified tokens who are subscribed to the specified channel. You cannot use this parameter with a location query using the where parameter. Application admins can set this parameter to everyone to send to all devices subscribed to the channel. If you are using the web interface, you do not need to specify this parameter. payload Payload to send with the push notification. For a string, it will be sent as an alert (message notification). options Additional push options. expire_after_seconds (Number): Expiration time in seconds of when to stop sending the push notification. For example, if the push notification expiration time is for a day and the user's device is off for over a day, the user does not receive the push notification since it has expired. For example, to specify a one day expiration period, use options={'expire_after_seconds':86400}. where A JSON-encoded object that defines either the user or location query used to select the device that will receive the notification. Up to 1000 users can be returned by the query. If you are using the to_tokens parameter, you cannot specify a location query. To specify a user query, set the user field to a custom query, for example, the following query searches for all users with the first name of Joe: where={\"user\": {\"first_name\":\"Joe\"}} To specify a location query, set the loc field to a MongoDB Geospatial Query. The following query searches for all users within 2 km of Oakland, CA, USA: where={\"loc\": { \"$nearSphere\" : { \"$geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [-122.2708,37.8044] } , \"$maxDistance\" : 2000 }}} For details about using the where parameter, see the Search and Query guide. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example sends a push notification to a channel and checks the response. Requires Titanium SDK 3.1.2 and later. Cloud.PushNotifications.notifyTokens({ channel: 'friend_request', to_tokens: TOKEN_LIST, payload: 'Welcome to push notifications' }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: curl -X POST -F \"channel=\" -F \"to_tokens=\" -F \"payload=\" \"https://api.cloud.appcelerator.com/v1/push_notification/notify_tokens.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"NotifyTokens\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"channel\": @\"friend_request\", @\"to_tokens\": TOKEN_LIST, @\"payload\": @\"Welcome to push notifications\" }; [APSPushNotifications notifyTokens:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); data.put(\"channel\", \"friend_request\"); data.put(\"to_tokens\", TOKEN_LIST); data.put(\"payload\", \"Push Notification Test\"); try { APSPushNotifications.notifyTokens(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSPushNotifications\", \"Notified!\"); } else { Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushNotificationsNotifyTokens({ channel: 'friend_request', to_tokens: TOKEN_LIST, payload: 'Welcome to push notifications' }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Notification sent!'); } }); "
    },
    {
        "id": "PushNotifications-method-query-arrowdb",
        "url": "PushNotifications-method-query",
        "type": "arrowdb",
        "name": "PushNotifications.query",
        "content": "Note: this API is only available for applications created with ArrowDB 1.1.7 or greater. Custom query of push notification subscriptions with pagination. For regular (non-admin) application users, this method returns the currently logged-in user's list of push notification subscriptions. For app admins, the method returns a list of subscriptions for all users, or just those for the user specified by as the method's su_id parameter. You can paginate query results using skip and limit parameters, or page and per_page, but not both in the same query. GET push_notification/query.json su_id User ID of the user who has subscribed devices for push notification. You must be an application admin to query another user's subscriptions. If this parameter is not included, a list of subscriptions for all users is returned. channel Name of the push notification channel. The name of the push channel cannot start with a hash symbol ('#') or contain a comma (','). device_token Apple or Android Device Token. type Selects the push type. Set to android for Android devices usingGoogle Cloud Messaging or ios for iOS devices using Apple Push Notification Service. page Request page number, default is 1. per_page Number of results per page, default is 10. limit Instead of using page and per_page for pagination, you can use limit and skip to do your own pagination. limit is the maximum number of records to skip. The specified value must be greater than 0 and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. skip Number of records to skip. Must be used together with limit. The specified value must not be less than 0 or an HTTP 400 error will be returned. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Requires Release 3.2.0. Cloud.PushNotifications.query({ user_id: userId }, function (e) { if (e.success) { e.subscriptions.forEach(function(subscription){ Ti.API.info(subscription.channel.join()); }); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/push_notification/query.json?key=&pretty_json=true&user_id=4f5905b5d2951316a9000020\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"querySubscriptions\", \"page\": 1, \"per_page\": 10, \"total_pages\": 1, \"total_results\": 2 }, \"response\": { \"subscriptions\": [ { \"id\": \"4f6171dcd29513027200000c\", \"channel\": [\"friend_request\", \"alert\"], \"device_token\": \"f7702d77b34ed94869f664e7a297ccc173bec93a2b815css6asd28461a0358dd\", \"type\": \"ios\" }, { \"id\": \"4f6171e7d29513027200000e\", \"channel\": [\"friend_request\", \"vip\"], \"device_token\": \"f7702d77b34ed94869k66oe\", \"type\": \"android\" } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"user_id\": userId }; [APSPushNotifications query:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu subscriptions\", (unsigned long)((NSArray *) e.response[@\"subscriptions\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); data.put(\"user_id\", \"4f5905b5d2951316a9000020\"); try { APSPushNotifications.query(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray subscriptions = e.getResponse().getJSONArray(\"subscriptions\"); if (subscriptions.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushNotificationsQuery({ user_id: userId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.subscriptions[0].channel); } }); "
    },
    {
        "id": "PushNotifications-method-reset_badge-arrowdb",
        "url": "PushNotifications-method-reset_badge",
        "type": "arrowdb",
        "name": "PushNotifications.reset_badge",
        "content": "Sets the internally stored value of the badge to zero of a specific device. This method only updates the internally stored value of the badge. To update the badge value on the iOS icon or Android notification center, send a push notification with the badge field defined. If you are an application admin, you may omit the device token. PUT push_notification/reset_badge.json device_token Device token. If you are an application admin, you may omit the device token. return void titanium Requires Titanium SDK 3.2.1 and later. Cloud.PushNotifications.resetBadge({ device_token: device_token.value }, function (e) { if (e.success) { Ti.API.info('Badge Reset!'); } else { Ti.API.error(e); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X PUT -F \"device_token=\" \"https://api.cloud.appcelerator.com/v1/push_notification/reset_badge.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"resetBadge\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"device_token\": deviceToken }; [APSPushNotifications resetBadge:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); data.put(\"device_token\", \"\"); try { APSPushNotifications.resetBadge(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSPushNotifications\", \"Badge Reset!\"); } else { Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushNotificationsResetBadge({ device_token: device_token.value }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Badge reset!'); } }); "
    },
    {
        "id": "PushNotifications-method-set_badge-arrowdb",
        "url": "PushNotifications-method-set_badge",
        "type": "arrowdb",
        "name": "PushNotifications.set_badge",
        "content": "Sets the value of the internally stored value of the badge. This method only updates the internally stored value of the badge. To update the badge value on the iOS icon or Android notification center, send a push notification with the badge field defined. PUT push_notification/set_badge.json device_token Device token. Required if you are not an application admin. badge_number Number to set as the badge on the application's icon. Specify postive and negative values with the + and - symbols to increment or decrement the current badge number, respectively. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Requires Titanium SDK 3.2.1 and later. Cloud.PushNotifications.setBadge({ device_token: device_token.value, badge_number: badge_number.value }, function (e) { if (e.success) { Ti.API.info('Badge Set!'); } else { Ti.API.error(e); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X PUT -F \"badge_number=12\" \"https://api.cloud.appcelerator.com/v1/push_notification/set_badge.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"setBadge\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"device_token\": deviceToken, @\"badge_number\": @5 }; [APSPushNotifications setBadge:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); data.put(\"badge_number\", 12); try { APSPushNotifications.setBadge(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSPushNotifications\", \"Badge Set!\"); } else { Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushNotificationsSetBadge({ device_token: device_token, badge_number: badge_number }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Badge set!'); } }); "
    },
    {
        "id": "PushNotifications-method-subscribe-arrowdb",
        "url": "PushNotifications-method-subscribe",
        "type": "arrowdb",
        "name": "PushNotifications.subscribe",
        "content": "Subscribes a mobile device to a push notifications channel. Developers can create different channels for different types of push notifications. For instance, a channel for friend request, a channel for chat, etc. Push notifications currently only work on iOS and Andriod. POST push_notification/subscribe.json channel Push notification channel to subscribe to. For multiple channels, comma separate the list of channel names. The name of the push channel cannot start with a hash symbol ('#') or contain a comma (','). device_token Apple or Android Device Token. type Selects the push type. Set to android for Android devices using Google Cloud Messaging or ios for iOS devices using Apple Push Notification Service. su_id User ID to subscribe on behalf of. Only application admins can subscribe to push notifications on behalf of other users. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example subscribes to a push notification channel and checks the response. Cloud.PushNotifications.subscribe({ channel: 'friend_request', device_token: myPushDeviceToken, type: 'android' }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"type=ios\" -F \"channel=friend_request\" -F \"device_token=f7702d77b34ed94869f664e7a297ccc173bec93a2b815css6asd28461a0358db\" https://api.cloud.appcelerator.com/v1/push_notification/subscribe.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"SubscribeNotification\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"channel\": @\"friend_request\", @\"device_token\": deviceToken, @\"type\": @\"ios\", }; [APSPushNotifications subscribe:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); data.put(\"type\", \"android\"); data.put(\"channel\", \"friend_request\"); data.put(\"device_token:\", \"4e7a297ccc173bec93a2b81\"); try { APSPushNotifications.subscribe(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSPushNotifications\", \"Subscribed!\"); } else { Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushNotificationsSubscribe({ channel: 'friend_request', device_token: myPushDeviceToken, type: 'android' }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Subscribed to friend_request channel!'); } }); "
    },
    {
        "id": "PushNotifications-method-subscribe_token-arrowdb",
        "url": "PushNotifications-method-subscribe_token",
        "type": "arrowdb",
        "name": "PushNotifications.subscribe_token",
        "content": "Subscribes a mobile device to a push notifications channel. Developers can create different channels for different types of push notifications, such as a friend request, chat, etc. POST push_notification/subscribe_token.json device_token Android or iOS device token. For Android, the length is dynamic and is less than 4096 characters. For iOS, the length is 64 characters. channel Name of the channel. For multiple channels, comma separate the list of channel names. The name of the push channel cannot start with a hash symbol ('#') or contain a comma (','). type Selects the push type. Set to android for Android devices using Google Cloud Messaging or ios for iOS devices using Apple Push Notification Service. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example subscribes to a push notification channel and checks the response. Requires Titanium SDK 3.1.2 and later. Cloud.PushNotifications.subscribeToken({ device_token: DEVICE_TOKEN, channel: 'friend_request', type: 'ios' }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: curl -i -X POST -F \"type=ios\" -F \"device_token=\" -F \"channel=friend_request\" \"http://api.cloud.appcelerator.com/v1/push_notification/subscribe_token.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"SubscribeNotificationByToken\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"device_token\": deviceToken, @\"channel\": @\"friend_request\", @\"type\": @\"ios\" }; [APSPushNotifications subscribeToken:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); data.put(\"type\", \"android\"); data.put(\"channel\", \"friend_request\"); data.put(\"device_token\", \"4e7a297ccc173bec93a2b81\"); try { APSPushNotifications.subscribeToken(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSPushNotifications\", \"Subscribed!\"); } else { Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushNotificationsSubscribeToken({ device_token: DEVICE_TOKEN, channel: 'friend_request', type: 'ios' }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Subscribed to friend_request channel!'); } }); "
    },
    {
        "id": "PushNotifications-method-subscription_update-arrowdb",
        "url": "PushNotifications-method-subscription_update",
        "type": "arrowdb",
        "name": "PushNotifications.subscription_update",
        "content": "Updates the device's push channel subscription. PUT push_notification/subscription/update.json device_token Apple or Android Device Token. su_id User ID to update the subscription on behalf of. You must be logged in as an application administrator to update another user's notification subscription. loc The device's current location specified as an array with longitude as the first element, and latitude as the second element ([longitude,latitude]). pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium The following example gets the device's current geographic location and updates the user's subscription with the coordinates. Titanium.Geolocation.getCurrentPosition(function(e) { if (e.error) { Ti.API.error('Error: ' + e.error); } else { var latitude = e.coords.latitude; var longitude = e.coords.longitude; Cloud.PushNotifications.updateSubscription({ device_token : pushDeviceToken, loc : [longitude, latitude] }, function(e) { if (e.success) { alert('Subscription Updated.'); } else { alert(e); } }); } }); rest The following example updates the device's location to Mountain View, CA, USA: $ curl -b cookies.txt -c cookies.txt -X PUT -F \"device_token=\" -F \"loc=[-122.0507049560547,37.38685989379883]\" \"http://api.cloud.appcelerator.com/v1/push_notification/subscription/update.json?key=&pretty_json=true\" Example cURL response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"UpdateSubscription\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"device_token\": deviceToken, @\"loc\": @[longitude, latitude] }; [APSPushNotifications updateSubscription:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); data.put(\"loc\", [-122.23,37.12]); data.put(\"device_token\", \"\"); try { APSPushNotifications.updateSubscription(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSPushNotifications\", \"Subscription Updated!\"); } else { Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushNotificationsUpdateSubscription({ device_token : pushDeviceToken, loc : [longitude, latitude] }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Location updated!'); } }); "
    },
    {
        "id": "PushNotifications-method-unsubscribe-arrowdb",
        "url": "PushNotifications-method-unsubscribe",
        "type": "arrowdb",
        "name": "PushNotifications.unsubscribe",
        "content": "Unsubscribes one of the current user's devices from a push notification channel. If channel name is not provided, unsubscribe the device from all channels. When a user logs out from a device, you can cancel all subscriptions for the device by passing the device's token to the Users.logout method. DELETE push_notification/unsubscribe.json channel Name of the push notification channel. For multiple channels, comma separate the list of channel names. The name of the push channel cannot start with a hash symbol ('#') or contains a comma (','). device_token Apple or Android Device Token. user_id User ID to unsubscribe from push notifications. Only application admins can unsubscribe another user from push notifications. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example unsubscribes from a push notification channel and checks the response. Cloud.PushNotifications.unsubscribe({ channel: 'friend_request', device_token: myPushDeviceToken }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/push_notification/unsubscribe.json?key=&channel=friend_request&device_token=f7702d77b34ed94869f664e7a297ccc173bec93a2b815css6asd28461a0358db&pretty_json=true\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"UnsubscribeNotification\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"channel\": @\"friend_request\", @\"device_token\": deviceToken }; [APSPushNotifications unsubscribe:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); data.put(\"channel\", \"friend_request\"); data.put(\"device_token\", \"4e7a297ccc173bec93a2b81\"); try { APSPushNotifications.unsubscribe(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSPushNotifications\", \"Unsubscribed!\"); } else { Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushNotificationsUnsubscribe({ channel: 'friend_request', device_token: myPushDeviceToken }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Unsubscribed from friend_request channel!'); } }); "
    },
    {
        "id": "PushNotifications-method-unsubscribe_token-arrowdb",
        "url": "PushNotifications-method-unsubscribe_token",
        "type": "arrowdb",
        "name": "PushNotifications.unsubscribe_token",
        "content": "Unsubscribes the specified device from a push notification channel. If channel is not defined, unsubscribes the device from all channels. DELETE push_notification/unsubscribe_token.json channel Name of the push notification channel. For multiple channels, comma separate the list of channel names. The name of the push channel cannot start with a hash symbol ('#') or contain a comma (','). device_token Android or iOS device token. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example unsubscribes from a push notification channel and checks the response. Requires Titanium SDK 3.1.2 and later. Cloud.PushNotifications.unsubscribeToken({ channel: 'friend_request', device_token: myPushDeviceToken }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: curl -X DELETE -F \"channel=\" -F \"device_token=\" \"https://api.cloud.appcelerator.com/v1/push_notification/unsubscribe_token.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"UnsubscribeNotificationByToken\" } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"channel\": @\"friend_request\", @\"device_token\": deviceToken }; [APSPushNotifications unsubscribeToken:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); data.put(\"channel\", \"friend_request\"); data.put(\"device_token\", \"4e7a297ccc173bec93a2b81\"); try { APSPushNotifications.unsubscribeToken(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSPushNotifications\", \"Unsubscribed!\"); } else { Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushNotificationsUnsubscribeToken({ channel: 'friend_request', device_token: myPushDeviceToken }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Unsubscribed from friend_request channel!'); } }); "
    },
    {
        "name": "PushPayload",
        "id": "PushPayload-arrowdb",
        "url": "PushPayload",
        "type": "arrowdb",
        "content": "PushPayload JSON payload to pass to either the PushNotifications.notify or PushNotifications.notify_tokens method. In addition to the fields below, you can also add custom fields to pass on to the client application. Note that all field names defined below are reserved keywords and should not be used as custom field names. For Android, Google Cloud Messaging (GCM) limits the payload size to 4 KB. GCM will refuse any payload that exceeds the size limit. For iOS, Apple Push Notificaion Services (APNS) limits the payload size to 2 KB. APNS will refuse any payload that exceeds the size limit. For example, if you send the following payload: { \"alert\": \"Sample alert\", \"badge\": \"+2\", \"category\": \"sampleCategory\", \"icon\": \"little_star\", \"sound\": \"door_bell\", \"title\": \"Example\", \"vibrate\": true, \"custom_field_1\": \"Appcelerator Cloud Services Rocks!\", \"custom_field_2\": \"Hi Push\" } Then, the client application will: Display the Sample alert message. Increment the current badge value by two. Play the door_bell sound. If the device is Android, the notification title will be Example, the device will vibrate and the little_star icon will be displayed in the notification. If the device is running iOS 8 or later, it will display the user notification actions associated with the sampleCategory user notification category. Additionally, the client application will be passed the custom_field_1 and custom_field_2 keys, which are custom fields that the client application can parse in the delivered JSON object. The notification payload delivered to the client application is modified and is a bit different between Android and iOS. For Android, all Android-valid fields are contained in an android dictionary, while all other iOS-only and custom fields are top-level keys of the payload. For example, the original payload in the example will be delivered to an Android application as: { \"android\": { \"title\": \"Example\", \"alert\": \"Sample alert\", \"icon\": \"little_star\", \"badge\": \"+2\", \"sound\": \"door_bell\", \"vibrate\": true, }, \"category\": \"sampleCategory\", \"custom_field_1\": \"Appcelerator Cloud Services Rocks!\", \"custom_field_2\": \"Hi Push\" } For iOS, all iOS-valid fields are contained in an aps dictionary, while all other Android-only and custom fields are top-level keys of the payload. For example, the original payload in the example will be delivered to an iOS application as: { \"aps\": { \"alert\": \"Sample alert\", \"badge\": \"+2\", \"category\": \"sampleCategory\", \"sound\": \"door_bell\", }, \"title\": \"Example\", \"icon\": \"little_star\", \"vibrate\": true, \"custom_field_1\": \"Appcelerator Cloud Services Rocks!\", \"custom_field_2\": \"Hi Push\" } "
    },
    {
        "id": "PushPayload-property-alert-arrowdb",
        "url": "PushPayload-property-alert",
        "type": "arrowdb",
        "name": "PushPayload.alert",
        "content": "Notification message to be displayed. String"
    },
    {
        "id": "PushPayload-property-badge-arrowdb",
        "url": "PushPayload-property-badge",
        "type": "arrowdb",
        "name": "PushPayload.badge",
        "content": "Number to set as the badge on the application's icon. Specify positive and negative numbers with the + and - symbols to increment or decrement the current badge number, respectively. String"
    },
    {
        "id": "PushPayload-property-category-arrowdb",
        "url": "PushPayload-property-category",
        "type": "arrowdb",
        "name": "PushPayload.category",
        "content": "String identifier of the user notification category to associate with the notification. iOS only. For Titanium applications, this is the same value as the identifer property of the UserNotificationCategory object. String"
    },
    {
        "id": "PushPayload-property-content-available-arrowdb",
        "url": "PushPayload-property-content-available",
        "type": "arrowdb",
        "name": "PushPayload.content-available",
        "content": "Set to 1 to indicate that there is new content to download for Newsstand apps and background download content. iOS only. Used to trigger the silentpush event in Titanium applications. Set the alert field to an empty string to make the notification silent. Number"
    },
    {
        "id": "PushPayload-property-icon-arrowdb",
        "url": "PushPayload-property-icon",
        "type": "arrowdb",
        "name": "PushPayload.icon",
        "content": "Filename minus the extension of the icon to display in the notification center. Android only. Place the file in /res/drawable for native Android applications or /Resources for Titanium applications. Uses the app's icon by default. For image requirements, see the Icons and Splash Screen guide. String"
    },
    {
        "id": "PushPayload-property-sound-arrowdb",
        "url": "PushPayload-property-sound",
        "type": "arrowdb",
        "name": "PushPayload.sound",
        "content": "Filename minus the extension of the sound to play. For native Android applications, place the file in the /assets/sound directory. For native iOS applications, place the file in the main bundle. For Android applications built with Titanium, place the file in the /Resources/sound directory. For iOS applications built with Titanium, place the file in the /Resources directory. String"
    },
    {
        "id": "PushPayload-property-title-arrowdb",
        "url": "PushPayload-property-title",
        "type": "arrowdb",
        "name": "PushPayload.title",
        "content": "Title of the notification. Android only. String"
    },
    {
        "id": "PushPayload-property-vibrate-arrowdb",
        "url": "PushPayload-property-vibrate",
        "type": "arrowdb",
        "name": "PushPayload.vibrate",
        "content": "If true, the device vibrates for one second. Android only. String"
    },
    {
        "name": "PushSchedules",
        "id": "PushSchedules-arrowdb",
        "url": "PushSchedules",
        "type": "arrowdb",
        "content": "PushSchedules The current user must be an application admin to use the API. The PushSchedules API lets you schedule push notifications to be delivered to your application users on a recurring or one-time basis. You may create up to 100 scheduled push notifications for your application. Datetime fields use the ISO 8601 format, for example, YYYY-MM-DDTHH:mm:ss+ZZZZ. For information on setting up push notifications, see PushNotifications. "
    },
    {
        "id": "PushSchedules-property-id-arrowdb",
        "url": "PushSchedules-property-id",
        "type": "arrowdb",
        "name": "PushSchedules.id",
        "content": "Generated unique ID for this scheduled push. String"
    },
    {
        "id": "PushSchedules-property-name-arrowdb",
        "url": "PushSchedules-property-name",
        "type": "arrowdb",
        "name": "PushSchedules.name",
        "content": "Arbitrary name for the scheduled push notification. String"
    },
    {
        "id": "PushSchedules-property-push_notification-arrowdb",
        "url": "PushSchedules-property-push_notification",
        "type": "arrowdb",
        "name": "PushSchedules.push_notification",
        "content": "Push notification to send for scheduled pushes. channel (String): Name of the channel to send the push notification to. The name of the push channel cannot start with a hash symbol ('#') or contain a comma (','). payload (Hash): Payload to send to the device. Same format as PushNotifications.notify. to_ids (Array/String): Array or comma-separated list of IDs to send push notifications to. options (Hash): Dictionary of additional options expire_after_seconds (Number): Expiration time in seconds of when to stop sending the push notification based on the start date. For example, if the push notification is scheduled to be sent in a week and the expiration time is for a day. The push expires in eight days and will not be sent if the user's device has been off before the send day and after the end of the expiration period. Hash"
    },
    {
        "id": "PushSchedules-property-recurrence-arrowdb",
        "url": "PushSchedules-property-recurrence",
        "type": "arrowdb",
        "name": "PushSchedules.recurrence",
        "content": "Schedules the recurrence of the push notification. interval (String): Either daily, weekly or monthly. end_time (Date): Datetime to end the push notifications in ISO 8601 format. Must occur after start_time. Hash"
    },
    {
        "id": "PushSchedules-property-start_time-arrowdb",
        "url": "PushSchedules-property-start_time",
        "type": "arrowdb",
        "name": "PushSchedules.start_time",
        "content": "Datetime to start the scheduled push notification in ISO 8601 format. Date"
    },
    {
        "id": "PushSchedules-method-create-arrowdb",
        "url": "PushSchedules-method-create",
        "type": "arrowdb",
        "name": "PushSchedules.create",
        "content": "Creates a scheduled push notification. At minimum, you must specify the start_time, and payload parameters. A push schedule can optionally define a location query so that only devices in the specified geographic region will receive the push notification. The current user must be an application admin to use this API. POST push_schedule/create.json schedule Push notification to schedule. where A JSON-encoded object that defines a location query used to select the devices that will receive the scheduled notification. Up to 1000 users can be returned by the query. To specify a location query, set the loc field to a MongoDB Geospatial Query. The following query searches for all users within 2 km of Oakland, CA, USA: where={ \"loc\": { \"$nearSphere\" : { \"$geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [-122.2708,37.8044] } , \"$maxDistance\" : 2000 } } } For details about using the where parameter, see the Search and Query guide. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Available for Release 3.2.0 and later. Cloud.PushSchedules.create({ schedule: { name: 'push schedule', start_time: '2015-09-05T10:11', recurrence: { interval: 'weekly', end_time: '2015-09-10T10:11' }, push_notification: { payload: 'hello world', channel: 'channelOne' } } }, function(e) { if (e.success) { Ti.API.info('Success! \\n id: ' + e.push_schedules[0].id); } else { Ti.API.error('Error: ' + ((e.error && e.message) || JSON.stringify(e))); } }); rest The following example schedules a weekly push notification to be sent to devices that are located within 10 miles of Appcelerator corporate headquarters: curl -b cookies.txt -c cookies.txt -F 'schedule={\"start_time\":\"2016-01-01T00:00\", \"name\":\"test\", \"push_notification\":{\"channel\":\"test\",\"payload\":\"test schedule\"}, \"recurrence\":{\"interval\":\"weekly\", \"end_time\":\"2016-01-08T00:00\"}}' -F 'where={\"loc\":{\"$geoWithin\":{\"$centerSphere\":[[-122.0507049560547,37.38685989379883] , 0.00252589 ]}}}' \"https://api.cloud.appcelerator.com/v1/push_schedules/create.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"createPushSchedule\" }, \"response\": { \"push_schedules\": [ { \"id\": \"535ac45b5714f50a99002e1e\", \"name\": \"test\", \"start_time\": \"2016-01-01T00:00:00+0000\", \"push_notification\": { \"channel\": \"test\", \"payload\": \"test schedule\", \"geo_condition\": \"{\\\"$geoWithin\\\":{\\\"$centerSphere\\\":[[-122.0507049560547,37.38685989379883],0.00252589]}}\" }, \"recurrence\": { \"interval\": \"weekly\", \"end_time\": \"2016-01-08T00:00:00+0000\" } } ] } } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"schedule\": @{ @\"start_time\": @\"2015-09-10T10:11\", @\"recurrence\": @{ @\"interval\": @\"weekly\", @\"end_time\": @\"2015-09-10T10:11\" }, @\"push_notification\": @{ @\"payload\": @\"hello world\", @\"channel\": @\"channelOne\" } } }; [APSPushSchedules create:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); JSONObject schedule = new JSONObject(); schedule.put(\"name\", \"push schedule\"); schedule.put(\"start_time\", \"2015-09-05T10:11\"); JSONObject recurrence = new JSONObject(); recurrence.put(\"interval\", \"weekly\"); recurrence.put(\"end_time\", \"2015-09-10T10:11\"); JSONObject push_notification = new JSONObject(); push_notification.put(\"payload\", \"hello world\"); push_notification.put(\"channel\",\"channelOne\") schedule.put(\"recurrence\", recurrence); schedule.put(\"push_notification\", push_notification); data.put(\"schedule\", schedule); try { APSPushSchedules.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSPushSchedules\", \"Success!\"); } else { Log.e(\"APSPushSchedules\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPushSchedules\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPushSchedules\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushSchedulesCreate({ schedule: { name: 'push schedule', start_time: '2015-09-05T10:11', recurrence: { interval: 'weekly', end_time: '2015-09-10T10:11' }, push_notification: { payload: 'hello world', channel: 'channelOne' } } }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.push_schedules[0]); } }); "
    },
    {
        "id": "PushSchedules-method-delete-arrowdb",
        "url": "PushSchedules-method-delete",
        "type": "arrowdb",
        "name": "PushSchedules.delete",
        "content": "Deletes a scheduled push notification. The current user must be an application admin to use this API. DELETE push_schedule/delete.json ids Array of push schedule IDs to delete. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Available on Release 3.2.0 and later. Cloud.PushSchedules.remove({ ids: savedPushId }, function(e){ if (e.success) { Ti.API.info(\"Success!\"); } else { Ti.API.error('Error: ' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: curl -b cookies.txt -c cookies.txt -X DELETE -F \"ids=\" \"https://api.cloud.appcelerator.com/v1/push_schedules/delete.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"deletePushSchedules\" } ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"ids\": savedPushId }; [APSPushSchedules remove:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); data.put(\"ids\", 1); try { APSPushSchedules.remove(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSPushSchedules\", \"Removed!\"); } else { Log.e(\"APSPushSchedules\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSPushSchedules\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSPushSchedules\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushSchedulesDelete({ ids: savedPushId }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "PushSchedules-method-query-arrowdb",
        "url": "PushSchedules-method-query",
        "type": "arrowdb",
        "name": "PushSchedules.query",
        "content": "Queries the list of scheduled push notifications. The current logged-in user must be an application admin to use this API. In ArrowDB 1.1.5 and later, you can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. GET push_schedule/query.json name Name given to the scheduled push notification. page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Available on Release 3.2.0 and later. Cloud.PushSchedules.query({}, function(e) { if (e.success) { Ti.API.info(\"List of scheduled push notifications:\"); e.push_schedules.forEach(function(push){ Ti.API.info(\"\\t\" + push.name); } } else { Ti.API.error('Error: ' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/push_schedules/query.json?key=&pretty_json=true&count=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"queryPushSchedules\", \"count\": 100 }, \"response\": { \"push_schedules\": [ { \"id\": \"526ae82db93e7206700001e1\", \"name\": \"test\", \"start_time\": \"2013-10-24T00:00:00+0000\", \"push_notification\": { \"channel\": \"test\", \"payload\": \"test schedule\" }, \"recurrence\": { \"interval\": \"daily\", \"end_time\": \"2013-10-31T00:00:00+0000\" } } ] } } ios Example iOS APS SDK call: [APSPushSchedules query:nil withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu push_schedules\", (unsigned long)((NSArray *) e.response[@\"push_schedules\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); try { APSPushSchedules.query(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray schedules = e.getResponse().getJSONArray(\"push_schedules\"); if (schedules.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushSchedulesQuery(function(err, result) { if (err) { console.error(err.message); } else { result.body.response.push_schedules.forEach(function(push) { console.log(push.name) }); } }); "
    },
    {
        "id": "PushSchedules-method-update-arrowdb",
        "url": "PushSchedules-method-update",
        "type": "arrowdb",
        "name": "PushSchedules.update",
        "content": "Updates a scheduled push notification. All parameters specified in the PushSchedules create method can be updated, with the following exceptions: The schedule's start time cannot be updated, and the start_time parameter is ignored, if provided. When specifying a new end_time parameter, the new date and time must be greater than the current time, and the previously specified end_time value must not have expired. The current user must be an application administrator to invoke the command. POST push_schedule/update.json schedule Push notification to schedule. id ID of the PushSchedule object returned by create. where A JSON-encoded object that defines a location query used to select the devices that will receive the scheduled notification. Up to 1000 users can be returned by the query. To specify a location query, set the loc field to a MongoDB Geospatial Query. The following query searches for all users within 2 km of Oakland, CA, USA: where={ \"loc\": { \"$nearSphere\" : { \"$geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [-122.2708,37.8044] } , \"$maxDistance\" : 2000 } } } For an example of using this parameter, see the REST examples in the PushSchedules create method. For details about using the where parameter, see the Search and Query guide. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This method is not supported by Titanium. rest The following cURL command updates just the payload of the scheduled push notification. curl -X PUT -b cookies.txt -c cookies.txt -F \"id=\" -F 'schedule={\"start_time\":\"2016-12-25T00:00\", \"name\":\"test\", \"push_notification\":{\"channel\":\"test\",\"payload\":\"test schedule\"}, \"recurrence\":{\"interval\":\"daily\", \"end_time\":\"2017-03-25T00:00\"}}' \"https://api.cloud.appcelerator.com/v1/push_schedules/update.json?key=g5d7G8agFnzjOJ5kV2qjhIaKp9Hi4EXW&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"updatePushSchedule\" }, \"response\": { \"push_schedules\": [ { \"id\": \"5357f7055714f51855013525\", \"name\": \"test\", \"start_time\": \"2016-12-25T00:00:00+0000\", \"push_notification\": { \"channel\": \"test\", \"payload\": \"test schedule\" }, \"recurrence\": { \"interval\": \"daily\", \"end_time\": \"2017-03-25T00:00:00+0000\" } } ] } } ios Use the [APSCloud sendRequest] method to invoke this REST API directly. android Use the APSCloud.sendRequest() method to invoke this REST API directly. nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.pushSchedulesUpdate({ id: pushScheduleId, schedule: { 'start_time':'2016-12-25T00:00', 'name':'test', 'push_notification': {'channel':'test','payload':'test schedule'}, 'recurrence': {'interval':'daily', 'end_time':'2017-03-25T00:00'} } }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.push_schedules[0]); } }); "
    },
    {
        "name": "PushSchedulePayload",
        "id": "PushSchedulePayload-arrowdb",
        "url": "PushSchedulePayload",
        "type": "arrowdb",
        "content": "PushSchedulePayload The data type to pass to either the PushSchedules.create or PushSchedules.update method. "
    },
    {
        "id": "PushSchedulePayload-property-name-arrowdb",
        "url": "PushSchedulePayload-property-name",
        "type": "arrowdb",
        "name": "PushSchedulePayload.name",
        "content": "Arbitray name to give to the scheduled push notification. String"
    },
    {
        "id": "PushSchedulePayload-property-push_notification-arrowdb",
        "url": "PushSchedulePayload-property-push_notification",
        "type": "arrowdb",
        "name": "PushSchedulePayload.push_notification",
        "content": "Push notification to send. channel (String): Name of the channel to send the push notification to. The name of the push channel cannot start with a hash symbol ('#') or contain a comma (','). payload (PushPayload): Payload to send to the device. (required). to_ids (Array/String): Array or comma-separated list of IDs to send push notifications to. options (Hash): Dictionary to specify additional options: expire_after_seconds (Number): Expiration time in seconds of when to stop sending the push notification based on the start date. For example, if the push notification is scheduled to be sent in a week and the expiration time is for a day. The push expires in eight days and will not be sent if the user's device has been off before the send day and after the end of the expiration period. Hash"
    },
    {
        "id": "PushSchedulePayload-property-recurrence-arrowdb",
        "url": "PushSchedulePayload-property-recurrence",
        "type": "arrowdb",
        "name": "PushSchedulePayload.recurrence",
        "content": "Schedules the recurrence of the push notification. interval (String): Set to either daily, weekly or monthly. end_time (Date): Datetime to end the push notifications in ISO 8601 format. Must occur after start_time. Hash"
    },
    {
        "id": "PushSchedulePayload-property-start_time-arrowdb",
        "url": "PushSchedulePayload-property-start_time",
        "type": "arrowdb",
        "name": "PushSchedulePayload.start_time",
        "content": "Datetime to start the push notifications in ISO 8601 format Date"
    },
    {
        "name": "Reviews",
        "id": "Reviews-arrowdb",
        "url": "Reviews",
        "type": "arrowdb",
        "content": "Reviews The Reviews API lets you associate user reviews and ratings with an ArrowDB object. Currently, reviews can be added to the following ArrowDB object types: Posts Photos Users Events Checkins Places CustomObjects Statuses Reviews If an ArrowDB object has one or more reviews associated with it, it returns the total number of reviews, number of ratings, average rating value, and a summary of ratings when the object is queried or updated: \"reviews_count\": 2, \"ratings_count\": 2, \"ratings_average\": 150.0, \"ratings_summary\": { \"100\": 1, \"200\": 1 } "
    },
    {
        "id": "Reviews-property-checkin-arrowdb",
        "url": "Reviews-property-checkin",
        "type": "arrowdb",
        "name": "Reviews.checkin",
        "content": "Checkin object associated with this review. Checkins"
    },
    {
        "id": "Reviews-property-content-arrowdb",
        "url": "Reviews-property-content",
        "type": "arrowdb",
        "name": "Reviews.content",
        "content": "Review or comment text. String"
    },
    {
        "id": "Reviews-property-created_at-arrowdb",
        "url": "Reviews-property-created_at",
        "type": "arrowdb",
        "name": "Reviews.created_at",
        "content": "Creation date for this review object. Date"
    },
    {
        "id": "Reviews-property-custom_fields-arrowdb",
        "url": "Reviews-property-custom_fields",
        "type": "arrowdb",
        "name": "Reviews.custom_fields",
        "content": "User defined fields. See Custom Data Fields. String/Hash"
    },
    {
        "id": "Reviews-property-custom_object-arrowdb",
        "url": "Reviews-property-custom_object",
        "type": "arrowdb",
        "name": "Reviews.custom_object",
        "content": "Custom object associated with this review. CustomObjects"
    },
    {
        "id": "Reviews-property-event-arrowdb",
        "url": "Reviews-property-event",
        "type": "arrowdb",
        "name": "Reviews.event",
        "content": "Event object associated with this review. Events"
    },
    {
        "id": "Reviews-property-photo-arrowdb",
        "url": "Reviews-property-photo",
        "type": "arrowdb",
        "name": "Reviews.photo",
        "content": "Photo object associated with this review. Photos"
    },
    {
        "id": "Reviews-property-place-arrowdb",
        "url": "Reviews-property-place",
        "type": "arrowdb",
        "name": "Reviews.place",
        "content": "Place object associated with this review. Places"
    },
    {
        "id": "Reviews-property-post-arrowdb",
        "url": "Reviews-property-post",
        "type": "arrowdb",
        "name": "Reviews.post",
        "content": "Post object associated with this review. Posts"
    },
    {
        "id": "Reviews-property-rating-arrowdb",
        "url": "Reviews-property-rating",
        "type": "arrowdb",
        "name": "Reviews.rating",
        "content": "Rating associated with review. String"
    },
    {
        "id": "Reviewable-property-ratings_average-arrowdb",
        "url": "Reviewable-property-ratings_average",
        "type": "arrowdb",
        "name": "Reviewable.ratings_average",
        "content": "Average rating for this object. Only present if the object has been reviewed. Number"
    },
    {
        "id": "Reviewable-property-ratings_count-arrowdb",
        "url": "Reviewable-property-ratings_count",
        "type": "arrowdb",
        "name": "Reviewable.ratings_count",
        "content": "Total number of reviews for this object that include a rating. Only present if the object has been reviewed. Number"
    },
    {
        "id": "Reviewable-property-ratings_summary-arrowdb",
        "url": "Reviewable-property-ratings_summary",
        "type": "arrowdb",
        "name": "Reviewable.ratings_summary",
        "content": "Breakdown of the number of reviews that specified a given rating value. For example, if your ratings range from 1-5, the ratings summary might look like this: ratings_summary: { \"1\" : 1, \"2\" : 0, \"3\" : 5, \"4\" : 50, \"5\" : 12 } Only present if the object has been reviewed. Hash"
    },
    {
        "id": "Reviews-property-review-arrowdb",
        "url": "Reviews-property-review",
        "type": "arrowdb",
        "name": "Reviews.review",
        "content": "Review object associated with this review. Reviews"
    },
    {
        "id": "Reviews-property-reviewed_object-arrowdb",
        "url": "Reviews-property-reviewed_object",
        "type": "arrowdb",
        "name": "Reviews.reviewed_object",
        "content": "Object whose type and id fields identify, respectively, the type (Status or Photo, for example) and the ID of the reviewed object. Hash"
    },
    {
        "id": "Reviewable-property-reviews-arrowdb",
        "url": "Reviewable-property-reviews",
        "type": "arrowdb",
        "name": "Reviewable.reviews",
        "content": "List of reviews for this object. Only present if the object has been reviewed. Reviews[]"
    },
    {
        "id": "Reviewable-property-reviews_count-arrowdb",
        "url": "Reviewable-property-reviews_count",
        "type": "arrowdb",
        "name": "Reviewable.reviews_count",
        "content": "Total number of reviews for this object. Only present if the object has been reviewed. Number"
    },
    {
        "id": "Reviews-property-status-arrowdb",
        "url": "Reviews-property-status",
        "type": "arrowdb",
        "name": "Reviews.status",
        "content": "Status object associated with this review. Statuses"
    },
    {
        "id": "Reviews-property-tags-arrowdb",
        "url": "Reviews-property-tags",
        "type": "arrowdb",
        "name": "Reviews.tags",
        "content": "List of tags for this review. String[]"
    },
    {
        "id": "Reviews-property-updated_at-arrowdb",
        "url": "Reviews-property-updated_at",
        "type": "arrowdb",
        "name": "Reviews.updated_at",
        "content": "Last update time for this review object. Date"
    },
    {
        "id": "Reviews-property-user-arrowdb",
        "url": "Reviews-property-user",
        "type": "arrowdb",
        "name": "Reviews.user",
        "content": "User who created the review. Users"
    },
    {
        "id": "Reviews-method-batch_delete-arrowdb",
        "url": "Reviews-method-batch_delete",
        "type": "arrowdb",
        "name": "Reviews.batch_delete",
        "content": "Deletes Reviews objects that match the query constraints provided in the where parameter. If no where parameter is provided, all Reviews objects are deleted. Note that an HTTP 200 code (success) is returned if the call completed successfully but the query matched no objects. For performance reasons, the number of objects that can be deleted in a single batch delete operation is limited to 100,000. The matched objects are deleted asynchronously in a separate process. The reviewed object (Post, Photo, User, Event, Checkin, Place, CustomObject, Status, or Review) of each matched object is not deleted. You must be an application admin to run this command. DELETE reviews/batch_delete.json where Encoded JSON object that specifies constraint values for Reviews objects to delete. If not specified, all Reviews objects are deleted. return void titanium Example request to delete all Review objects. Cloud.sendRequest({ url : \"reviews/batch_delete.json\", method : \"DELETE\" }, function(e) { if (e.success) { alert(\"All Review objects have been deleted.\"); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE -F \"where={\\\"favorite_color\\\":\\\"blue\\\"}\" https://api.cloud.appcelerator.com/v1/reviews/batch_delete.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"batchDelete\" } } ios Example request to delete all Review objects. [[APSCloud sharedInstance] sendRequest:@\"reviews/batch_delete.json\" method:@\"DELETE\" data:nil handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"All Review object have been deleted.\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to delete all Review objects. APSCloud.getInstance().sendRequest(\"reviews/batch_delete.json\", \"DELETE\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"All Review objects have been deleted.\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.reviewsBatchDelete({ where: { 'reviews_count': 1 } }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Reviews-method-count-arrowdb",
        "url": "Reviews-method-count",
        "type": "arrowdb",
        "name": "Reviews.count",
        "content": "Retrieves the total number of Review objects. GET reviews/count.json return void titanium Example request to retrieve the total number of Review objects. Cloud.sendRequest({ url : \"reviews/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/reviews/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"reviewsCount\", \"count\": 1 } } ios Example request to retrieve the total number of Review objects. [[APSCloud sharedInstance] sendRequest:@\"reviews/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of Review objects. APSCloud.getInstance().sendRequest(\"reviews/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.reviewsCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "Reviews-method-create-arrowdb",
        "url": "Reviews-method-create",
        "type": "arrowdb",
        "name": "Reviews.create",
        "content": "Adds a review with an optional integer rating. You can also use this API to add comments or likes. Once an object has one or more reviews (comments) attached to it, it will return a total review count, rating_count, average rating and a breakdown of each rating value: \"reviews_count\": 2, \"ratings_count\": 2, \"ratings_average\": 150.0, \"ratings_summary\": { \"100\": 1, \"200\": 1 }, To create a review, you must specify a target object using one of the _id parameters, such as photo_id or post_id. Only one _id parameter may be specified in a request. To specify a User to review, use the the user_object_id parameter. An application admin can create a review on behalf of another user by specifying that user's ID in the user_id method parameter. A review must include either content or rating. It can also include both. POST reviews/create.json post_id ID of the Posts object to review. photo_id ID of the Photos object to review. user_object_id ID of the Users object to review. event_id ID of the Events object to review. place_id ID of the Places object to review. checkin_id ID of the Checkins object to review. review_id ID of the Reviews object to review. custom_object_id ID of the CustomObjects object to review. status_id ID of the Statuses object to review. content Review or comment text. rating Rating to be associated with review. You can use \"1\" to represent one Like. allow_duplicate By default, the same user can only submit one review/comment per object. Set this flag to true to allow the user to add multiple reviews or comments to the same object. tags Comma separated list of tags for this review. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id ID of the Users object to create the review on behalf of. The currently logged-in user must be an application admin to create a review on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example creates a new review and checks the response. Cloud.Reviews.create({ post_id: savedPostId, rating: 1, content: 'Good' }, function (e) { if (e.success) { var review = e.reviews[0]; alert('Success:\\n' + 'id: ' + review.id + '\\n' + 'rating: ' + review.rating + '\\n' + 'content: ' + review.content + '\\n' + 'updated_at: ' + review.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Creates a new Review for the specified Photos object. curl -F \"pretty_json=true\" -F \"photo_id=5493ad44dda09576ff000004\" -F \"content=nice hair\" -F \"rating=1\" \"http:///v1/reviews/create.json?key=&_session_id= ios Example iOS call: NSDictionary *data = @{ @\"post_id\" : savedPostId, @\"rating\" : @1, @\"content\" : @\"Good\" }; [APSReviews create:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *reviews = e.response[@\"reviews\"]; NSDictionary *review = reviews[0]; NSString *message =[NSString stringWithFormat:@\"id : %@\\n rating : %@\\n content : %@\\nUpdated at : %@\\n\", review[@\"id\"], review[@\"rating\"], review[@\"content\"], review[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"post_id\", \"4e33a817d9ca724745000003\"); data.put(\"rating\", \"1\"); data.put(\"content\", \"Good\"); try { APSReviews.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Created!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSReviews\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSReviews\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSReviews\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.reviewsCreate({ post_id: savedPostId, rating: 1, content: 'Good' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.reviews[0]); } }); "
    },
    {
        "id": "Reviews-method-delete-arrowdb",
        "url": "Reviews-method-delete",
        "type": "arrowdb",
        "name": "Reviews.delete",
        "content": "Delete the review (comment) with the given id. Only the original submitter can delete the review. If the review has a rating attached to it, deleting the review will update the average rating and rating summary. To delete a review, you must specify both the ID of the review and the ID of the reviewed object (Post, Photo, User, Event, Checkin, Place, CustomObject, Status, or Review. The reviewed object is not deleted, however. An application admin can delete any Review object. DELETE reviews/delete.json review_id Review object to delete. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example deletes a review and checks the response. Cloud.Reviews.remove({ post_id: savedPostId, review_id: savedReviewId }, function (e) { if (e.success) { alert('Success'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/reviews/delete.json?key=&pretty_json=true&post_id=4e33a817d9ca724745000003&review_id=4e33a817d9ca724745000006\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200 } } ios Example iOS call: NSDictionary *data = @{ @\"post_id\" : savedPostId, @\"review_id\" : savedReviewId }; [APSReviews remove:data withBlock:^(APSResponse *e) { if (e.success){ [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: HashMap data = new HashMap(); data.put(\"post_id\", \"4e33a817d9ca724745000003\"); data.put(\"review_id\", \"4e33a817d9ca724745000006\"); try { APSReviews.remove(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Removed!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSReviews\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSReviews\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSReviews\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.reviewsDelete({ post_id: savedPostId, review_id: savedReviewId }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Reviews-method-query-arrowdb",
        "url": "Reviews-method-query",
        "type": "arrowdb",
        "name": "Reviews.query",
        "content": "Perform custom query of reviews with sorting and paginating. Currently you can not query or sort data stored inside array or hash in custom fields. The query must be limited to reviews of a given object (by specifying one of post_id, photo_id, etc.) or limited to reviews generated by a given user (by specifying owner_id. In addition to custom fields, the following pre-defined fields can be used to query and sort reviews: user_id : String. Review owner's user ID. rating : Integer. Rating assigned to this review. tags_array : String. Tags associated with the review. created_at : Date. Timestamp when the review was created. updated_at : Date. Timestamp when the review was last updated. In ArrowDB 1.1.5 and later, you can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. For details about using the query parameters, see the Search and Query guide. GET reviews/query.json post_id Limit query to reviews on the identified Post object. photo_id Limit query to reviews on the identified Photo object. user_id Limit query to reviews on the identified User object. event_id Limit query to reviews on the identified Event object. place_id Limit query to reviews on the identified Place object. checkin_id Limit query to reviews on the identified Checkin object. review_id Limit query to reviews on the identified Review object. custom_object_id Limit query to reviews on the identified Custom object. status_id Limit query to reviews on the identified Status object. owner_id Limit query results to reviews submitted by the identified user. page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. where Constraint values for fields. where should be encoded JSON. If where is not specified, query returns all objects. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. show_user_like If set to true, each Review object in the response includes \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked field is not included in the response. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in the response JSON. In order to reduce server API calls from an application, the response JSON may include not just the objects that are being queried/searched, but also some important data related to the returned objects, such as owners and referenced objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests a list of reviews and checks the response. Cloud.Reviews.query({ page: 1, per_page: 20, where: { rating: { '$gt': 5.0 } } }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.reviews.length); for (var i = 0; i rest Queries for reviews with a rating of \"5\" that were created by the user specified by the owner_id parameter. $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode 'where={\"rating\":5.0}}' \"https:///v1/reviews/query.json?owner_id=54bd6e5e8a1b3c092949f265&key=&host=api.cloud.appcelerator.com&pretty_json=true\" { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"queryReviews\" }, \"response\": { \"reviews\": [ { \"id\": \"54bd6f08351b7909384bc1c1\", \"rating\": 5, \"created_at\": \"2015-01-19T20:54:32+0000\", \"updated_at\": \"2015-01-19T20:54:32+0000\", \"user_id\": \"54bd6e5e8a1b3c092949f265\", \"reviewed_object\": { \"type\": \"Photo\", \"id\": \"54bd6f012eb3b409394c3a6d\" }, \"custom_fields\": { } }, { \"id\": \"54bd6ea32eb3b409434d86d5\", \"rating\": 5, \"created_at\": \"2015-01-19T20:52:51+0000\", \"updated_at\": \"2015-01-19T20:52:51+0000\", \"user_id\": \"54bd6e5e8a1b3c092949f265\", \"reviewed_object\": { \"type\": \"Status\", \"id\": \"54bd68a2351b7909404f245d\" }, \"custom_fields\": { } }, { \"id\": \"54bd68d42eb3b409434d5547\", \"rating\": 5, \"created_at\": \"2015-01-19T20:28:04+0000\", \"updated_at\": \"2015-01-19T20:31:17+0000\", \"user_id\": \"54ab2a07d3a37bd24a053578\", \"reviewed_object\": { \"type\": \"Status\", \"id\": \"a23468a2351b7909404f245d\" }, \"custom_fields\": { } } ] } } ios Example iOS call: NSDictionary *data = @{ @\"page\" : @1, @\"per_page\" : @20, @\"where\" : @{ @\"$gt\" : @5.0 } }; [APSReviews query:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *reviews = e.response[@\"reviews\"]; for (NSDictionary *review in reviews) { NSString *message =[NSString stringWithFormat:@\"id : %@\\n rating : %@\\n content : %@\\nUpdated at : %@\\n\", review[@\"id\"], review[@\"rating\"], review[@\"content\"], review[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); try { HashMap data = new HashMap(); JSONObject params = new JSONObject(\"{'rating': {'$gt': 7.0}}\"); data.put(\"where\", params); APSReviews.query(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray reviews = e.getResponse().getJSONArray(\"reviews\"); if (reviews.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.reviewsQuery({ limit: 10, where: { rating: {'$gt': 5.0} } }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.reviews.forEach(function(review) { console.log(review); }); } }); "
    },
    {
        "id": "Reviews-method-show-arrowdb",
        "url": "Reviews-method-show",
        "type": "arrowdb",
        "name": "Reviews.show",
        "content": "Shows the review with the given id. GET reviews/show.json review_id Review object to show. show_user_like If set to true the Review object in the response will include \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked field is not included in the response. response_json_depth Nested object depth level counts in response JSON. In order to reduce server API calls from an application, the response JSON may include not just the objects that are being queried/searched, but also some important data related to the returned objects such as object's owner or referenced objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example retrieves information about a review and checks the response. Cloud.Reviews.show({ post_id: savedPostId, review_id: savedReviewId }, function (e) { if (e.success) { var review = e.reviews[0]; alert('Success:\\n' + 'id: ' + review.id + '\\n' + 'rating: ' + review.rating + '\\n' + 'content: ' + review.content + '\\n' + 'updated_at: ' + review.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Shows the specified review. $ curl -b cookies.txt -c cookies.txt \"https:///v1/reviews/show.json?key=&pretty_json=true&review_id=54bd68d42eb3b409434d5547 Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"showReview\" }, \"response\": { \"reviews\": [ { \"id\": \"54bd68d42eb3b409434d5547\", \"rating\": 3, \"created_at\": \"2015-01-19T20:28:04+0000\", \"updated_at\": \"2015-01-19T20:31:17+0000\", \"reviewed_object\": { \"type\": \"Status\", \"id\": \"54bd68a2351b7909404f245d\" }, \"custom_fields\": { }, \"user\": { \"id\": \"54ab2a07d3a37bd24a053578\", \"created_at\": \"2015-01-06T00:19:19+0000\", \"updated_at\": \"2015-01-19T20:21:14+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2015-01-06T00:19:19+0000\", \"username\": \"tim\", \"admin\": \"false\", \"stats\": { \"photos\": { \"total_count\": 0 }, \"storage\": { \"used\": 0 } }, \"friend_counts\": { \"requests\": 0, \"friends\": 0 } } } ] } } ios Example iOS call: NSDictionary *data = @{ @\"post_id\" : savedPostId, @\"review_id\" : savedReviewId }; [APSReviews show:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *reviews = e.response[@\"reviews\"]; NSDictionary *review = reviews[0]; NSString *message =[NSString stringWithFormat:@\"id : %@\\n rating : %@\\n content : %@\\nUpdated at : %@\\n\", review[@\"id\"], review[@\"rating\"], review[@\"content\"], review[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"post_id\", \"4e33a817d9ca724745000003\"); data.put(\"review_id\", \"4e33a9f5d9ca724769000006\"); try { APSReviews.show(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSReviews\", e.getResponseString()); } else { Log.e(\"APSReviews\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSReviews\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSReviews\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.reviewsShow({ post_id: savedPostId, review_id: savedReviewId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.reviews[0]); } }); "
    },
    {
        "id": "Reviews-method-update-arrowdb",
        "url": "Reviews-method-update",
        "type": "arrowdb",
        "name": "Reviews.update",
        "content": "Updates the review with the given id. Ordinary users can update reviews they own or have update access to. An application admin can update a Review on behalf of another user by specifying that user's ID in the user_id method parameter. PUT reviews/update.json post_id ID of the Posts object to review. photo_id ID of the Photos object to review. user_object_id ID of the Users object to review. event_id ID of the Events object to review. place_id ID of the Places object to review. checkin_id ID of the Checkins object to review. review_object_id ID of the Reviews object to review. custom_object_id ID of the CustomObjects object to review. status_id ID of the Statuses object to review. review_id ID of the Review object to update. content Review or comment text. rating Rating to be associated with review. You can use \"1\" to represent one Like. su_id ID of the Users object to update the review on behalf of. The currently logged-in user must be an application admin to create a review on behalf of another user. allow_duplicate By default, the same user can only submit one review/comment per object. Set this flag to true to allow the user to add multiple reviews or comments to the same object. tags Comma separated list of tags for this review. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example updates a review and checks the response. Cloud.Reviews.update({ post_id: savedPostId, review_id: savedReviewId, rating: 100, content: 'Very good!' }, function (e) { if (e.success) { var review = e.reviews[0]; alert('Success:\\n' + 'id: ' + review.id + '\\n' + 'rating: ' + review.rating + '\\n' + 'content: ' + review.content + '\\n' + 'updated_at: ' + review.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X PUT -F \"status_id=54bd7a9b8a1b3c09334fae75\" -F \"review_id=4e33a9f5d9ca724769000006\" -F \"rating=9\" -F \"content=cool hair\" https://api.cloud.appcelerator.com/v1/reviews/update.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"updateReview\" }, \"response\": { \"reviews\": [ { \"id\": \"54bd7aa58a1b3c09294a5cd6\", \"rating\": 9, \"content\": \"cool hair\", \"created_at\": \"2015-01-19T21:44:05+0000\", \"updated_at\": \"2015-01-19T21:49:12+0000\", \"reviewed_object\": { \"type\": \"Status\", \"id\": \"54bd7a9b8a1b3c09334fae75\" }, \"custom_fields\": { }, \"user\": { \"id\": \"54bd6e5e8a1b3c092949f265\", \"created_at\": \"2015-01-19T20:51:42+0000\", \"updated_at\": \"2015-01-19T20:51:42+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2015-01-19T20:51:42+0000\", \"username\": \"abc\", \"admin\": \"false\", \"stats\": { \"photos\": { \"total_count\": 0 }, \"storage\": { \"used\": 0 } }, \"friend_counts\": { \"requests\": 0, \"friends\": 0 } } } ] } } ios Example iOS call: NSDictionary *data = @{ @\"post_id\" : savedPostId, @\"review_id\" : savedReviewId, @\"rating\" : @100, @\"content\" : @\"Very good!\" }; [APSReviews update:data withBlock:^(APSResponse *e) { if (e.success){ NSArray *reviews = e.response[@\"reviews\"]; NSDictionary *review = reviews[0]; NSString *message =[NSString stringWithFormat:@\"id : %@\\n rating : %@\\n content : %@\\nUpdated at : %@\\n\", review[@\"id\"], review[@\"rating\"], review[@\"content\"], review[@\"updated_at\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"post_id\", \"4e33a817d9ca724745000003\"); data.put(\"review_id\", \"4e33a9f5d9ca724769000006\"); data.put(\"rating\", \"1\"); data.put(\"content\", \"Good\"); try { APSReviews.update(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Updated!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSReviews\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSReviews\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSReviews\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.reviewsUpdate({ post_id: savedPostId, review_id: savedReviewId, rating: 100, content: 'Very good!' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.reviews[0]); } }); "
    },
    {
        "name": "SocialIntegrations",
        "id": "SocialIntegrations-arrowdb",
        "url": "SocialIntegrations",
        "type": "arrowdb",
        "content": "SocialIntegrations The SocialIntegrations object lets users link their existing ArrowDB accounts to their social network accounts (Facebook or Twitter, for example) and login to ArrowDB using their social network account credentials. You can also search for a user's Facebook friends who have installed the same application and linked their Facebook account to ArrowDB. "
    },
    {
        "id": "SocialIntegrations-method-external_account_link-arrowdb",
        "url": "SocialIntegrations-method-external_account_link",
        "type": "arrowdb",
        "name": "SocialIntegrations.external_account_link",
        "content": "Associates an external account with an existing Appcelerator Cloud Services user account. Registered and logged in Appcelerator Cloud Services users can link one or more external accounts to their existing account. Once linked, the user can login using either Appcelerator Cloud Services account or any of the linked external accounts. POST users/external_account_link.json id External account's user ID. Optional for Facebook; if ID is missing and type is facebook, Appcelerator Cloud Services uses the Facebook token to obtain the user ID. type Type of the external account, for example, \"facebook\", \"linkedin\", or \"twitter\". token Token provided by the external account. Currently only Facebook tokens are validated by the Appcelerator Cloud Services server. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example links an external account and checks the response. Cloud.SocialIntegrations.externalAccountLink({ type: 'facebook', token: Ti.Facebook.accessToken }, function (e) { if (e.success) { var user = e.users[0]; alert('Success:\\n' + 'id: ' + user.id + '\\n' + 'first name: ' + user.first_name + '\\n' + 'last name: ' + user.last_name); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"id=12345678\" -F \"type=facebook\" -F \"token=lqcs6jedOtdrYfu3CaIVR0GWlCnV1l3JbY1i-gFxNNc.eyJpdiI6Ims2STNfRmMxbXFJamoxWFlUWjFrTkEifQ.RW77c5r7ggvTobyL0INb6qscnpoyrrFrrJ6K_IldoJBxcxLkwus8SsLFAJmwy05nLa71zBEqdkm2wJMIn31iUW2mxd37eQX9JRNrtSWcgRpuRDuzjhB7f0u3J4WJYASRnJkq-8l0hr9jiLIDajkJRg\" https://api.cloud.appcelerator.com/v1/users/external_account_link.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"linkExternalAccount\" }, \"response\": { \"users\": [ { \"id\": \"4e9afa18356f4e647900002e\", \"first_name\": \"John\", \"last_name\": \"Smith\", \"created_at\": \"2011-10-16T15:36:56+0000\", \"updated_at\": \"2011-10-16T15:54:57+0000\", \"external_accounts\": [ { \"external_id\": \"641643673\", \"external_type\": \"facebook\", \"token\": \"lqcs6jedOtdrYfu3CaIVR0GWlCnV1l3JbY1i\" } ] } ] } } Appcelerator Cloud Services ios SDK comes with Facebook SDK and provides an easy way to do facebook link. Follow the facebook-ios- sdk sample app instructions to edit your app-info.plist to add a URL type for your Facebook app id. Then add the following method to your AppDelegate.m: // pre 4.2 - (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url { return [[[ACSClient defaultACSClient] getFacebook] handleOpenURL:url]; } // 4.2+ - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation { return [[[ACSClient defaultACSClient] getFacebook] handleOpenURL:url]; } Modify the Appcelerator Cloud Services initialization call in your app delegate to pass in the Facebook app id: [ACSClient initializeWithOauthConsumerKey:oauthConsumerKey consumerSecret:oauthConsumerSecret customAppIds:[NSDictionary dictionaryWithObject:facebookAppId forKey:@\"Facebook\"]]; or: [ACSClient initializeWithAppKey:ACS_APP_KEY customAppIds: [NSDictionary dictionaryWithObject:facebookAppId forKey:@\"Facebook\"]]; To launch the Faceook Connect dialog to link with an existing user account, make sure user is logged in, then call the following: [[ACSClient defaultACSClient] facebookAuth:[NSArray arrayWithObjects:@\"publish_stream\", @\"email\", @\"offline_access\", nil] delegate:self]; If a user is already logged in to your app, it will link the user account with the Facebook account that was just authorized. If no user is logged in to your app, it will perform a login to Appcelerator Cloud Services using the facebook account information. Optionaly, if you would like to receive callbacks when Facebook link or login actions are taken, add to you controller's delegate list. Then implement the following methods: -(void)fbDidLogin; -(void)fbDidNotLogin:(BOOL)cancelled error:(NSError *)error; For other types of external accounts, you will have to use their SDKs to get the uid and token first, then make the link call with the Appcelerator Cloud Services. ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"type\": @\"facebook\", @\"token\": accessToken }; [APSSocialIntegrations externalAccountLink:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Linked %lu users\", (unsigned long)((NSArray *) e.response[@\"users\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); data.put(\"id\", \"109216395704353\"); data.put(\"type\", \"facebook\"); data.put(\"token\", \"lqcs6jedOtdrYfu3CaIVR0GWlCnV1l3JbY1i-gFxNNc.eyJpdiI6Ims2STNfRmMxbXFJamoxWFlUWjFrTkEifQ.RW77c5r7ggvTobyL0INb6qscnpoyrrFrrJ6K_IldoJBxcxLkwus8SsLFAJmwy05nLa71zBEqdkm2wJMIn31iUW2mxd37eQX9JRNrtSWcgRpuRDuzjhB7f0u3J4WJYASRnJkq-8l0hr9jiLIDajkJRg\"); try { APSSocialIntegrations.externalAccountLink(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSSocialIntegrations\", \"Success!\"); } else { Log.e(\"APSSocialIntegrations\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSSocialIntegrations\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSSocialIntegrations\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.socialIntegrationsExternalAccountLink({ type: 'facebook', token: facebookAccessToken }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.users[0]); } }); "
    },
    {
        "id": "SocialIntegrations-method-external_account_login-arrowdb",
        "url": "SocialIntegrations-method-external_account_login",
        "type": "arrowdb",
        "name": "SocialIntegrations.external_account_login",
        "content": "Users can login using an external account such as Facebook, Twitter, Linkedin, etc without creating an account with Appcelerator Cloud Services ahead of time. The external account login creates a Appcelerator Cloud Services account if it hasn't been created, otherwise, it will login using the user who has the matching external account info. POST users/external_account_login.json id External account's user ID. Optional for Facebook; if ID is missing and type is facebook, Appcelerator Cloud Services uses the Facebook token to obtain the user ID. type Type of the external account, for example, \"facebook\", \"linkedin\", or \"twitter\". token Token provided by the external account. Currently only Facebook tokens are validated by the Appcelerator Cloud Services server. acl_name Name of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example logs a user in using an external account and checks the response. Cloud.SocialIntegrations.externalAccountLogin({ type: 'facebook', token: Ti.Facebook.accessToken }, function (e) { if (e.success) { var user = e.users[0]; alert('Success:\\n' + 'id: ' + user.id + '\\n' + 'first name: ' + user.first_name + '\\n' + 'last name: ' + user.last_name); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"id=109216395704353\" -F type=\"facebook\" -F \"token=lqcs6jedOtdrYfu3CaIVR0GWlCnV1l3JbY1i-gFxNNc.eyJpdiI6Ims2STNfRmMxbXFJamoxWFlUWjFrTkEifQ.RW77c5r7ggvTobyL0INb6qscnpoyrrFrrJ6K_IldoJBxcxLkwus8SsLFAJmwy05nLa71zBEqdkm2wJMIn31iUW2mxd37eQX9JRNrtSWcgRpuRDuzjhB7f0u3J4WJYASRnJkq-8l0hr9jiLIDajkJRg\" https://api.cloud.appcelerator.com/v1/users/external_account_login.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"externalAccountLogin\" }, \"response\": { \"users\": [ { \"id\": \"4e9afa18356f4e647900002e\", \"first_name\": \"John\", \"last_name\": \"Smith\", \"created_at\": \"2011-10-16T15:36:56+0000\", \"updated_at\": \"2011-10-16T15:54:57+0000\", \"external_accounts\": [ { \"external_id\": \"641643673\", \"external_type\": \"facebook\", \"token\": \"lqcs6jedOtdrYfu3CaIVR0GWlCnV1l3JbY1i\" } ] } ] } } Appcelerator Cloud Services ios SDK comes with Facebook SDK and provides an easy way to do facebook login. Follow the facebook-ios- sdk sample app instructions to edit your app-info.plist to add a URL type for your Facebook app id. Then add the following method to your AppDelegate.m: // pre 4.2 - (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url { return [[[ACSClient defaultACSClient] getFacebook] handleOpenURL:url]; } // 4.2+ - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation { return [[[ACSClient defaultACSClient] getFacebook] handleOpenURL:url]; } Modify the Appcelerator Cloud Services initialization call in your app delegate to pass in the Facebook app id: [ACSClient initializeWithOauthConsumerKey:oauthConsumerKey consumerSecret:oauthConsumerSecret customAppIds:[NSDictionary dictionaryWithObject:facebookAppId forKey:@\"Facebook\"]]; or: [ACSClient initializeWithAppKey:ACS_APP_KEY customAppIds: [NSDictionary dictionaryWithObject:facebookAppId forKey:@\"Facebook\"]]; To perform a login using facebook connect, make sure user is not logged in to Appcelerator Cloud Services, then call the following: [[ACSClient defaultACSClient] facebookAuth:[NSArray arrayWithObjects:@\"publish_stream\", @\"email\", @\"offline_access\", nil] delegate:self]; If a user is already logged in to your app, it will link the user account with the Facebook account that was just authorized. If no user is logged in to your app, it will perform a login to Appcelerator Cloud Services using the facebook account information. Optionaly, if you would like to receive callbacks when Facebook link or login actions are taken, add to you controller's delegate list. Then implement the following methods: -(void)fbDidLogin; -(void)fbDidNotLogin:(BOOL)cancelled error:(NSError *)error; For other types of external accounts, you will have to use their SDKs to get the uid and token first, then make the link call with the Appcelerator Cloud Services. ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"type\": @\"facebook\", @\"token\": accessToken }; [APSSocialIntegrations externalAccountLogin:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Loggedin %lu users\", (unsigned long)((NSArray *) e.response[@\"users\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; Map data = new HashMap(); data.put(\"id\", \"109216395704353\"); data.put(\"type\", \"facebook\"); data.put(\"token\", \"lqcs6jedOtdrYfu3CaIVR0GWlCnV1l3JbY1i-gFxNNc.eyJpdiI6Ims2STNfRmMxbXFJamoxWFlUWjFrTkEifQ.RW77c5r7ggvTobyL0INb6qscnpoyrrFrrJ6K_IldoJBxcxLkwus8SsLFAJmwy05nLa71zBEqdkm2wJMIn31iUW2mxd37eQX9JRNrtSWcgRpuRDuzjhB7f0u3J4WJYASRnJkq-8l0hr9jiLIDajkJRg\"); try { APSSocialIntegrations.externalAccountLogin(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { String userId = e.getResponse().getJSONArray(\"users\").getJSONObject(0).getString(\"id\"); new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Logged in! You are now logged in as \" + userId) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (JSONException err) { Log.e(\"APSSocialIntegrations\", \"Exception thrown: \" + err.toString()); } } else { Log.e(\"APSSocialIntegrations\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSSocialIntegrations\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSSocialIntegrations\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.socialIntegrationsExternalAccountLogin({ type: 'facebook', token: facebookAccessToken }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.users[0]); } }); "
    },
    {
        "id": "SocialIntegrations-method-external_account_unlink-arrowdb",
        "url": "SocialIntegrations-method-external_account_unlink",
        "type": "arrowdb",
        "name": "SocialIntegrations.external_account_unlink",
        "content": "Disassociate an external account from a Appcelerator Cloud Services user account. DELETE users/external_account_unlink.json id External account's user ID. type Type of the external account, for example, \"facebook\", \"linkedin\", or \"twitter\". pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example unlinks an external Facebook account. Cloud.SocialIntegrations.externalAccountUnlink({ type: 'facebook', id: facebookUserId }, function (e) { if (e.success) { var user = e.users[0]; alert('Success:\\n' + 'id: ' + user.id + '\\n' + 'first name: ' + user.first_name + '\\n' + 'last name: ' + user.last_name); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/users/external_account_unlink.json?key=&pretty_json=true&id=1234567&type=facebook\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"unlinkExternalAccount\" }, \"response\": { \"users\": [ { \"id\": \"4e9afa18356f4e647900002e\", \"first_name\": \"John\", \"last_name\": \"Smith\", \"created_at\": \"2011-10-16T15:36:56+0000\", \"updated_at\": \"2011-10-16T15:54:57+0000\", \"external_accounts\": [ ] } ] } } For Facebook: NSError *error; [[ACSClient defaultACSClient] unlinkFromFacebook:&error;]; This is a synchronous call and doesn't have a callback method. For other types of external account, you need to perform the external_account_unlink call. ios Example iOS APS SDK call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"type\": @\"facebook\", @\"id\": facebookUserId }; [APSSocialIntegrations externalAccountUnlink:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Unlinked %lu users\", (unsigned long)((NSArray *) e.response[@\"users\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); Map data = new HashMap(); data.put(\"id\", \"109216395704353\"); data.put(\"type\", \"facebook\"); try { APSSocialIntegrations.externalAccountUnlink(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Log.i(\"APSSocialIntegrations\", \"Success!\"); } else { Log.e(\"APSSocialIntegrations\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSSocialIntegrations\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSSocialIntegrations\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.socialIntegrationsExternalAccountUnlink({ type: 'facebook', id: facebookUserId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.users[0]); } }); "
    },
    {
        "id": "SocialIntegrations-method-facebook_search_friends-arrowdb",
        "url": "SocialIntegrations-method-facebook_search_friends",
        "type": "arrowdb",
        "name": "SocialIntegrations.facebook_search_friends",
        "content": "Find the current user's Facebook Friends who also registered in the same App. GET social/facebook/search_friends.json pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example retrieves a list of Facebook friends and checks the response. Cloud.SocialIntegrations.searchFacebookFriends(function (e){ if (e.success) { alert('Success:\\n' + 'Count: ' + e.users.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt https://api.cloud.appcelerator.com/v1/social/facebook/search_friends.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"searchFacebookFriends\" }, \"response\": { \"users\": [ { \"id\": \"4e9afa18356f4e647900002e\", \"first_name\": \"John\", \"last_name\": \"Smith\", \"created_at\": \"2011-10-16T15:36:56+0000\", \"updated_at\": \"2011-10-16T15:54:57+0000\", \"external_accounts\": [ { \"external_id\": \"641643673\", \"external_type\": \"facebook\", } ] } ] } } ios Example iOS APS SDK call: [APSSocialIntegrations searchFacebookFriends:nil withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu users\", (unsigned long)((NSArray *) e.response[@\"users\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); try { APSSocialIntegrations.searchFacebookFriends(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray users = e.getResponse().getJSONArray(\"users\"); if (users.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.socialIntegrationsSearchFacebookFriends(function(err, result) { if (err) { console.error(err.message); } else { result.body.response.users.forEach(function(user) { console.log(user.first_name + ' ' + user.last_name); }); } }); "
    },
    {
        "name": "Statuses",
        "id": "Statuses-arrowdb",
        "url": "Statuses",
        "type": "arrowdb",
        "content": "Statuses The Statuses object lets your application create and manage Twitter-like status messages. If you are an application admin, you can create or update a status on behalf of another user by including the su_id field in the request. A status can optionally be associated with either a Places object or an Events objects, but not both. "
    },
    {
        "id": "Statuses-property-acls-arrowdb",
        "url": "Statuses-property-acls",
        "type": "arrowdb",
        "name": "Statuses.acls",
        "content": "Single-element array containing the ACLs associated with this status object, if any. ACLs[]"
    },
    {
        "id": "Statuses-property-created_at-arrowdb",
        "url": "Statuses-property-created_at",
        "type": "arrowdb",
        "name": "Statuses.created_at",
        "content": "Message creation date. Date"
    },
    {
        "id": "Statuses-property-event-arrowdb",
        "url": "Statuses-property-event",
        "type": "arrowdb",
        "name": "Statuses.event",
        "content": "The Events object associated with this status. Events"
    },
    {
        "id": "Statuses-property-id-arrowdb",
        "url": "Statuses-property-id",
        "type": "arrowdb",
        "name": "Statuses.id",
        "content": "Generated unique ID for this status. String"
    },
    {
        "id": "Statuses-property-message-arrowdb",
        "url": "Statuses-property-message",
        "type": "arrowdb",
        "name": "Statuses.message",
        "content": "Status message. String"
    },
    {
        "id": "Statuses-property-photo-arrowdb",
        "url": "Statuses-property-photo",
        "type": "arrowdb",
        "name": "Statuses.photo",
        "content": "The primary photo for this status. Photos"
    },
    {
        "id": "Statuses-property-place-arrowdb",
        "url": "Statuses-property-place",
        "type": "arrowdb",
        "name": "Statuses.place",
        "content": "The Places object associated with this status. Places"
    },
    {
        "id": "Statuses-property-tags-arrowdb",
        "url": "Statuses-property-tags",
        "type": "arrowdb",
        "name": "Statuses.tags",
        "content": "Comma-separated list of tags associated with this status. String"
    },
    {
        "id": "Statuses-property-updated_at-arrowdb",
        "url": "Statuses-property-updated_at",
        "type": "arrowdb",
        "name": "Statuses.updated_at",
        "content": "Message update date. Date"
    },
    {
        "id": "Statuses-property-user-arrowdb",
        "url": "Statuses-property-user",
        "type": "arrowdb",
        "name": "Statuses.user",
        "content": "Status owner. Users"
    },
    {
        "id": "Statuses-method-batch_delete-arrowdb",
        "url": "Statuses-method-batch_delete",
        "type": "arrowdb",
        "name": "Statuses.batch_delete",
        "content": "Deletes Statuses objects that match the query constraints provided in the where parameter. If no where parameter is provided, all Statuses objects are deleted. Note that an HTTP 200 code (success) is returned if the call completed successfully but the query matched no objects. For performance reasons, the number of objects that can be deleted in a single batch delete operation is limited to 100,000. The matched objects are deleted asynchronously in a separate process. The associated Event, Photo, or Place of each matched object is not deleted. You must be an application admin to run this command. DELETE statuses/batch_delete.json where Encoded JSON object that specifies constraint values for Statuses objects to delete. If not specified, all Statuses objects are deleted. return void titanium Example request to delete all Status objects. Cloud.sendRequest({ url : \"statuses/batch_delete.json\", method : \"DELETE\" }, function(e) { if (e.success) { alert(\"All Status objects have been deleted.\"); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE -F \"where={\\\"favorite_color\\\":\\\"blue\\\"}\" https://api.cloud.appcelerator.com/v1/statuses/batch_delete.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"batchDelete\" } } ios Example request to delete all Status objects. [[APSCloud sharedInstance] sendRequest:@\"statuses/batch_delete.json\" method:@\"DELETE\" data:nil handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"All Status object have been deleted.\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to delete all Status objects. APSCloud.getInstance().sendRequest(\"statuses/batch_delete.json\", \"DELETE\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"All Status objects have been deleted.\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.statusesBatchDelete({ where: { 'updated_at': {'$lt': '2014-01-01T00:00:00+0000'} } }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Statuses-method-count-arrowdb",
        "url": "Statuses-method-count",
        "type": "arrowdb",
        "name": "Statuses.count",
        "content": "Retrieves the total number of Status objects. GET statuses/count.json return void titanium Example request to retrieve the total number of Status objects. Cloud.sendRequest({ url : \"statuses/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/statuses/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"statusesCount\", \"count\": 1 } } ios Example request to retrieve the total number of Status objects. [[APSCloud sharedInstance] sendRequest:@\"statuses/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of Status objects. APSCloud.getInstance().sendRequest(\"statuses/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.statusesCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "Statuses-method-create-arrowdb",
        "url": "Statuses-method-create",
        "type": "arrowdb",
        "name": "Statuses.create",
        "content": "Creates a status for the currenty logged in user. You can optionally associate a new status with either an existing Places object or an Events object, but not both. Application admins can create a status on behalf of another user by including the su_id field in the request. POST statuses/create.json message Status message. place_id ID of the Places object this status is associated with. You can associate the status either with a Places object or an Events object, but not both. event_id ID of the Events object this status is associated with. You can associate the status either with an Events object or a Places object, but not both. photo New photo to attach as the primary photo for this status. When you use the photo parameter to attach a new photo, you can use the custom resize and sync options. photo_id ID of an existing photo to attach as the primary photo for this status. tags Comma separated list of tags for this status. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this status. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this status. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id User ID to create the status on behalf of. You must be logged in as an application admin to create a status on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example creates a status and checks the response. Cloud.Statuses.create({ place_id: myPlaceId, message: 'What a great view!', photo: Titanium.Filesystem.getFile('photo.jpg') }, function (e) { if (e.success) { var status = e.statuses[0]; alert('Success:\\n' + 'id: ' + status.id + '\\n' + 'place: ' + status.place.name); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"message=Having fun at the beach\" -F \"photo=@photo.jpg\" https://api.cloud.appcelerator.com/v1/statuses/create.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"createStatus\" }, \"response\": { \"statuses\": [ { \"id\":\"4d6e86ed6f70950c89000004\", \"message\":\"Having fun at the beach\", \"created_at\":\"2011-03-02T18:05:33+0000\", \"updated_at\":\"2011-03-02T18:05:33+0000\", \"photo\": { \"id\":\"4dcf261cd0afbe1833000002\", \"filename\":\"photo.jpg\", \"size\":584344, \"md5\":\"589b8ad43ed20bf8e622d719642bc939\", \"created_at\":\"2011-05-15T01:02:20+0000\", \"updated_at\":\"2011-05-15T01:02:20+0000\", \"processed\":false } } ] } } ios Example iOS call: NSDictionary *data = @{ @\"message\": @\"Working hard at Appcelerator Cloud Services Office\" }; [APSStatuses create:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Status posted!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"message\", \"new status!\"); try { APSStatuses.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Created!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSStatuses\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSStatuses\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSStatuses\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''), fs = require('fs'); arrowDBApp.statusesCreate({ place_id: myPlaceId, message: 'What a great view!', photo: fs.createFileStream('photo.jpg') }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.statuses[0]); } }); "
    },
    {
        "id": "Statuses-method-delete-arrowdb",
        "url": "Statuses-method-delete",
        "type": "arrowdb",
        "name": "Statuses.delete",
        "content": "Deletes a status for the currenty logged in user. The associated Event, Photo, or Place is not deleted. DELETE statuses/delete.json status_id ID of the status to delete. su_id User ID to destroy the status on behalf of. The current login user must be an application admin to destroy a status on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Requires Release 3.2.0. This example deletes a status and checks the response. Cloud.Statuses.delete({ status_id: statusID }, function (e) { if (e.success) { alert('Success!'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/places/delete.json?key=&pretty_json=true&status_id=4d51d4186f70952d4c000006\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"deleteStatus\" }, } ios Example iOS call: NSDictionary *data = @{ @\"status_id\":@\"3453452345deadbeef345\" }; [APSStatuses remove:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Removed!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"status_id\", \"3453452345deadbeef345\"); try { APSStatuses.remove(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Toast.makeText(currentActivity, \"Removed!\", Toast.LENGTH_SHORT); } else { Log.e(\"APSStatuses\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSStatuses\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSStatuses\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.statusesDelete({ place_id: myPlaceId }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Statuses-method-query-arrowdb",
        "url": "Statuses-method-query",
        "type": "arrowdb",
        "name": "Statuses.query",
        "content": "Performs a custom query of statuses with sorting and pagination. Currently you can not query or sort data stored inside array or hash in custom fields. In addition to custom fields, the following pre-defined fields can be used to query and sort statuses: user_id : String. Status owner's user ID. event_id : String. ID for the Events associated with this status. place_id : String. ID for the Place associated with this status. created_at : Date. Timestamp when the status was created. updated_at : Date. Timestamp when the status was last updated. In ArrowDB 1.1.5 and later, you can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. For details about using the query parameters, see the Search and Query guide. GET statuses/query.json page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. where Constraint values for fields. where should be encoded JSON. If where is not specified, query returns all objects. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. show_user_like If set to true, each Status object in the response includes \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked field is not included in the response. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in the response JSON. In order to reduce server API calls from an application, the response JSON may include not just the objects that are being queried/searched, but also some important data related to the returned objects, such as owners and referenced objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests information about statuses and checks the response. Cloud.Statuses.query({ page: 1, per_page: 20, order: '-updated_at' }, function (e) { if (e.success) { for (var i = 0; i rest Example cURL request that queries statuses created earlier than \"2011-03-02T19:05:33+0000\": $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode 'where={\"rating\":{\"$gt\":7.0},\"created_at\":{\"$lt\":\"2011-03-02T19:05:33+0000\"}}' \"https://api.cloud.appcelerator.com/v1/statuses/query.json?key=&pretty_json=true&count=true\" Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"queryStatuses\", \"count\": 100 }, \"response\": { \"statuses\": [ { \"id\":\"4d6e86ed6f70950c89000004\", \"message\":\"Having fun at the beach\", \"created_at\":\"2011-03-02T18:05:33+0000\", \"updated_at\":\"2011-03-02T18:05:33+0000\", \"photo\": { \"id\":\"4dcf261cd0afbe1833000002\", \"filename\":\"photo.jpg\", \"size\":584344, \"md5\":\"589b8ad43ed20bf8e622d719642bc939\", \"created_at\":\"2011-05-15T01:02:20+0000\", \"updated_at\":\"2011-05-15T01:02:20+0000\", \"processed\":false } } ] } } ios Example iOS APS SDK call: NSDictionary *data = @{ @\"where\": @{ @\"create_at\":@{ @\"$lt\":@\"2011-03-02T19:05:33+0000\" } } }; [APSStatuses query:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu statuses\", (unsigned long)((NSArray *)e.response[@\"statuses\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success!\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); try { HashMap data = new HashMap(); JSONObject params = new JSONObject(\"{created_at': {'$lt': '2011-03-02T19:05:33+0000'}}\"); data.put(\"where\", params); APSStatuses.query(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray statuses = e.getResponse().getJSONArray(\"statuses\"); if (statuses.length(); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.statusesQuery({ order: '-updated_at', limit: 20 }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.statuses.forEach(function(status) { console.log(status.message); }); } }); "
    },
    {
        "id": "Statuses-method-show-arrowdb",
        "url": "Statuses-method-show",
        "type": "arrowdb",
        "name": "Statuses.show",
        "content": "Returns the identified status message. GET statuses/show.json status_id ID of the status to show. response_json_depth Nested object depth level counts in response JSON. In order to reduce server API calls from an application, the response JSON may include not just the objects that are being queried/searched, but also some important data related to the returned objects such as object's owner or referenced objects. Default is 1, valid range is 1 to 8. show_user_like If set to true the Status object in the response will include \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked field is not included in the response. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Requires Release 3.2.0. This example retrieves information about a status and checks the response. Cloud.Statuses.show({ place_id: savedStatusId }, function (e) { if (e.success) { var status = e.statuses[0]; alert('Success:\\n' + 'id: ' + status.id + '\\n' + 'updated_at: ' + status.updated_at); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/statuses/show.json?key=&pretty_json=true&status_id=4d6e88886f70950c89000005\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"showStatus\" }, \"response\": { \"statuses\": [ { \"id\":\"4d6e88886f70950c89000005\", \"message\":\"At the beach!\", \"created_at\":\"2011-03-02T18:12:24+0000\", \"updated_at\":\"2011-03-02T18:12:24+0000\" } ] } } ios Example iOS call: NSDictionary *data = @{@\"status_id\": @\"4d6e88886f70950c89000005\"}; [APSUsers show:data withBlock:^(APSResponse *e) { if (e.success) { NSArray *statuses = e.response[@\"statuses\"]; NSDictionary *status = statuses[0]; NSString *message = [NSString stringWithFormat:@\"message: %@\", user[@\"message\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"status_id\", \"4d6e88886f70950c89000005\"); try { APSStatuses.show(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray status = e.getResponse().getJSONArray(\"statuses\").getJSONObject(0); Log.i(\"APSStatuses\", status.getString(\"message\")); } catch (JSONException err) { Log.e(\"APSStatuses\", \"Exception thrown: \" + e.toString()); } } else { Log.e(\"APSStatuses\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSStatuses\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSStatuses\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.statusesShow({ place_id: savedStatusId }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.statuses[0]); } }); "
    },
    {
        "id": "Statuses-method-update-arrowdb",
        "url": "Statuses-method-update",
        "type": "arrowdb",
        "name": "Statuses.update",
        "content": "Updates a status for the currenty logged in user. You can optionally associate the updated status with either an existing Places object or an Events object, but not both. Application admins can update another user's status on their behalf by including the su_id field in the request. PUT statuses/update.json status_id ID of the status to update. message Status message. place_id ID of the Places object this status is associated with. You can associate the status either with a Places object or an Events object, but not both. event_id ID of the Events object this status is associated with. You can associate the status either with an Events object or a Places object, but not both. photo New photo to attach as the primary photo for this status. When you use the photo parameter to attach a new photo, you can use the custom resize and sync options. photo_id ID of an existing photo to attach as the primary photo for this status. tags Comma separated list of tags for this status. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this status. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this status. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id User ID to update the status on behalf of. The current login user must be an application admin to update a status on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium Requires Release 3.2.0. This example updates a status and checks the response. Cloud.Statuses.update({ status_id: statusId, message: 'What a lovely view!' }, function (e) { if (e.success) { var status = e.statuses[0]; alert('Success:\\n' + 'id: ' + status.id + '\\n' + 'message: ' + status.message); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X PUT -F \"message=Having a blast at the beach\" -F \"status_id=4d6e86ed6f70950c89000004\" https://api.cloud.appcelerator.com/v1/statuses/update.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"updateStatus\" }, \"response\": { \"statuses\": [ { \"id\":\"4d6e86ed6f70950c89000004\", \"message\":\"Having a blast at the beach\", \"created_at\":\"2011-03-02T18:05:33+0000\", \"updated_at\":\"2012-04-01T15:01:30+0000\", \"photo\": { \"id\":\"4dcf261cd0afbe1833000002\", \"filename\":\"photo.jpg\", \"size\":584344, \"md5\":\"589b8ad43ed20bf8e622d719642bc939\", \"created_at\":\"2011-05-15T01:02:20+0000\", \"updated_at\":\"2011-05-15T01:02:20+0000\", \"processed\":false } } ] } } ios Example iOS APS SDK call: NSDictionary *data = @{ @\"status_id\": @\"4d6e86ed6f70950c89000004\", @\"message\":@\"Hardly working at Appcelerator Cloud Services Office\" }; [APSStatuses update:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Updated!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"message\", \"updated status!\"); data.put(\"status_id\", \"4d6e86ed6f70950c89000004\"); try { APSStatuses.update(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Updated!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSStatuses\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSStatuses\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSStatuses\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.statusesUpdate({ status_id: statusId, message: 'What a lovely view!', }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.statuses[0]); } }); "
    },
    {
        "name": "Users",
        "id": "Users-arrowdb",
        "url": "Users",
        "type": "arrowdb",
        "content": "Users Represents a user account. By default, new user accounts are activated as soon as they are created. You can enable new user account email verification in the Cloud > Settings & Configuration > Settings tab in Appcelerator Dashboard or the Settings tab in My Apps. Once enabled, new users will receive an email with instructions to activate their account. This setting doesn't apply when a new user is created by logging in with an external account (see SocialIntegrations). A new user must specify at least one of the following when creating an account: username email address, first_name and last_name. Note: both the username and email fields are stored as lowercase strings. "
    },
    {
        "id": "Users-property-admin-arrowdb",
        "url": "Users-property-admin",
        "type": "arrowdb",
        "name": "Users.admin",
        "content": "Set to true if the user is an application admin. Boolean"
    },
    {
        "id": "Users-property-created_at-arrowdb",
        "url": "Users-property-created_at",
        "type": "arrowdb",
        "name": "Users.created_at",
        "content": "Creation date for this user object. Date"
    },
    {
        "id": "Users-property-custom_fields-arrowdb",
        "url": "Users-property-custom_fields",
        "type": "arrowdb",
        "name": "Users.custom_fields",
        "content": "User defined fields. See Custom Data Fields. String/Hash"
    },
    {
        "id": "Users-property-email-arrowdb",
        "url": "Users-property-email",
        "type": "arrowdb",
        "name": "Users.email",
        "content": "User's email address. Stored as a lowercase string. For security, this field is not shown unless you have admin access. String"
    },
    {
        "id": "Users-property-external_accounts-arrowdb",
        "url": "Users-property-external_accounts",
        "type": "arrowdb",
        "name": "Users.external_accounts",
        "content": "List of external accounts associated with this user. Each account is represented by a Hash with the following properties: external_id: String. External account ID. external_type: String. Account type, for example, \"facebook\". token: String. External account login token. Hash[]"
    },
    {
        "id": "Users-property-first_name-arrowdb",
        "url": "Users-property-first_name",
        "type": "arrowdb",
        "name": "Users.first_name",
        "content": "User's first name. String"
    },
    {
        "id": "Users-property-friend_counts-arrowdb",
        "url": "Users-property-friend_counts",
        "type": "arrowdb",
        "name": "Users.friend_counts",
        "content": "Dictionary describing the number of friends the user has. Possible keys returned are: requests: number of pending friend requests. friends: number of friends if two-way friendship is enabled. following: number of friends being followed by the user if one-way friendship is enabled. follows: number of friends following the user if one-way friendship is enabled. Hash"
    },
    {
        "id": "Users-property-id-arrowdb",
        "url": "Users-property-id",
        "type": "arrowdb",
        "name": "Users.id",
        "content": "User's ID, generated by ArrowDB. String"
    },
    {
        "id": "Users-property-last_name-arrowdb",
        "url": "Users-property-last_name",
        "type": "arrowdb",
        "name": "Users.last_name",
        "content": "User's last name String"
    },
    {
        "id": "Users-property-photo-arrowdb",
        "url": "Users-property-photo",
        "type": "arrowdb",
        "name": "Users.photo",
        "content": "Primary photo for this user. Photos"
    },
    {
        "id": "Users-property-role-arrowdb",
        "url": "Users-property-role",
        "type": "arrowdb",
        "name": "Users.role",
        "content": "User's role. String"
    },
    {
        "id": "Users-property-updated_at-arrowdb",
        "url": "Users-property-updated_at",
        "type": "arrowdb",
        "name": "Users.updated_at",
        "content": "Last update time for this user object. Date"
    },
    {
        "id": "Users-property-username-arrowdb",
        "url": "Users-property-username",
        "type": "arrowdb",
        "name": "Users.username",
        "content": "User's login name. Stored as a lowercase string. String"
    },
    {
        "id": "Users-method-batch_delete-arrowdb",
        "url": "Users-method-batch_delete",
        "type": "arrowdb",
        "name": "Users.batch_delete",
        "content": "Deletes Users objects that match the query constraints provided in the where parameter. If no where parameter is provided, all Users objects are deleted. Note that an HTTP 200 code (success) is returned if the call completed successfully but the query matched no objects. For performance reasons, the number of objects that can be deleted in a single batch delete operation is limited to 100,000. The matched objects are deleted asynchronously in a separate process. The primary photos associated with the matched objects are not deleted. You must be an application admin to run this command. DELETE users/batch_delete.json where Encoded JSON object that specifies constraint values for Users objects to delete. If not specified, all Users objects are deleted. return void titanium Example request to delete all User objects. Cloud.sendRequest({ url : \"users/batch_delete.json\", method : \"DELETE\" }, function(e) { if (e.success) { alert(\"All users have been deleted.\"); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE -F \"where={\\\"favorite_color\\\":\\\"blue\\\"}\" https://api.cloud.appcelerator.com/v1/users/batch_delete.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\": \"ok\", \"code\": 200, \"method_name\": \"batchDelete\" } } ios Example request to delete all User objects. [[APSCloud sharedInstance] sendRequest:@\"users/batch_delete.json\" method:@\"DELETE\" data:nil handler:^(APSResponse *e){ if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"All users have been deleted.\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to delete all User objects. APSCloud.getInstance().sendRequest(\"users/batch_delete.json\", \"DELETE\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"All users have been deleted.\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.usersBatchDelete({ where: { 'first_name': 'Jon' } }, function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Users-method-count-arrowdb",
        "url": "Users-method-count",
        "type": "arrowdb",
        "name": "Users.count",
        "content": "Retrieves the total number of User objects. GET users/count.json return void titanium Example request to retrieve the total number of User objects. Cloud.sendRequest({ url : \"users/count.json\", method : \"GET\" }, function(e) { if (e.success) { alert(e.meta.count); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/users/count.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"usersCount\", \"count\": 1 } } ios Example request to retrieve the total number of User objects. [[APSCloud sharedInstance] sendRequest:@\"users/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){ if (e.success) { NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example request to retrieve the total number of User objects. APSCloud.getInstance().sendRequest(\"users/count.json\", \"GET\", null, new APSResponseHandler() { public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\"))) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (Exception error) { Log.e(\"APSCloud\", \"Exception throw: \" + error.toString()); } } else { Log.e(\"APSCloud\", e.getErrorMessage()); } } @Override public void onException(APSCloudException e) { Log.e(\"APSCloud\", \"Exception throw: \" + e.toString()); } }); nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.usersCount(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.meta.count); } }); "
    },
    {
        "id": "Users-method-create-arrowdb",
        "url": "Users-method-create",
        "type": "arrowdb",
        "name": "Users.create",
        "content": "Creates a new user. When creating a user, you must specify either: username email address, first name, and last name A user can have both an email address and username specified. However, if username is omitted, email address, first name and last name are required. For regular users (non-admin users), after successully executing this command, you will be logged in as the new user and the session ID will be associated with the newly created user. For example, when user A creates user B, user A is now logged in as user B and user A's session ID belongs to user B. For admin users, you will still be logged in as the admin user. POST users/create.json email User's email address. Required if username is not specified. username User's login name. Required if email is not specified. If username is not specified, email, first_name, and last_name must be included. password User's password. password_confirmation Copy of user's password for confirmation. first_name User's first name. Required when username is not provided. last_name User's last name. Required when username is not provided. photo New photo to attach as the primary photo for the user. When you use the photo parameter to attach a new photo, you can use the custom resize and sync options. photo_id ID of an existing photo to attach as the primary photo for the user. tags Comma separated list of tags for this user. custom_fields User defined fields. See Custom Data Fields. acl_name Name of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id User ID to create this user on behalf of. The current login user must be an application admin to create a user on behalf of another user. role String representation of user role, for example, \"teacher\". template Send a congratulation email to notify that the user has been created successfully. You need to create an email template and pass the template name. confirmation_template If \"New User Email Verification\" is enabled for the application, ArrowDB sends a confirmation email to the user. If you don't pass the confirmation_template parameter, then ArrowDB sends a default confirmation email. If you wish to use your custom email body, you can create a email template and pass the template name. Your email template must contain the following URL to allow users to be redirected to Appcelerator Cloud Services email verification page: https://cloud.appcelerator.com/users/confirmation?key={{key}}&confirmation_token={{confirmation_token}} If you have your own website that talks to Appcelerator Cloud Services backend and wish to use custom URL, you must provide a URL with the following format: https:///?key={{key}}&confirmation_token={{confirmation_token}} When a user visits the above URL, you call the ArrowDB users/confirm_user.json method to confirm the user internally from your web server and you must append the query parameter &ct=enterprise to the end of the URL: GET https://api.cloud.appcelerator.com/v1/users/confirm_user.json?confirmation_token={{confirmation_token}}&key=&ct=enterprise pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example creates a new user and checks the response. Cloud.Users.create({ email: 'test@mycompany.com', first_name: 'test_firstname', last_name: 'test_lastname', password: 'test_password', password_confirmation: 'test_password' }, function (e) { if (e.success) { var user = e.users[0]; alert('Success:\\n' + 'id: ' + user.id + '\\n' + 'sessionId: ' + Cloud.sessionId + '\\n' + 'first name: ' + user.first_name + '\\n' + 'last name: ' + user.last_name); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X POST --data-urlencode \"email=john.smith@company.com\" --data-urlencode \"role=teacher\" --data-urlencode \"first_name=John\" --data-urlencode \"last_name=Smith\" --data-urlencode \"password=pass\" --data-urlencode \"password_confirmation=pass\" --data-urlencode 'custom_fields={\"age\":28, \"favorite_color\":\"blue\"}' \"https://api.cloud.appcelerator.com/v1/users/create.json?key=&pretty_json=true\" Example JSON response: { \"meta\": { \"stat\":\"ok\", \"code\":200, \"method\":\"createUser\", \"session_id\": \"abcDe0fGHijklenmU6xrdR9123-0\" }, \"response\": { \"users\": [ { \"id\":\"4d6e77386f70950c89000001\", \"first_name\":\"John\", \"last_name\":\"Smith\", \"role\": \"teacher\", \"created_at\":\"2011-03-02T16:58:32+0000\", \"updated_at\":\"2011-03-02T16:58:32+0000\", \"facebook_authorized\":false, \"email\":\"john.smith@company.com\", \"photo\": { \"id\":\"4d882896d0afbe0a3600000d\", \"filename\":\"photo.jpg\", \"size\":584344, \"md5\":\"589b8ad43ed20bf8e622d719642bc939\", \"created_at\":\"2011-03-22T04:41:58+0000\", \"updated_at\":\"2011-03-22T04:42:07+0000\", \"processed\":false }, \"custom_fields\": { \"age\":28, \"favorite_color\":\"blue\" } } ] } } The User object is defined in ACSClient/Models/CCUser.h The Appcelerator Cloud Services SDK automatically stores a logged in users session in memory and on disk. So once a user is logged in, you can access the current user info anytime by calling: [[ACSClient defaultACSClient] getCurrentUser] It will work after the app is restarted since the session is persisted on disk as well. ios Example iOS call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"email\": @\"foo@foo.com\", @\"password\": @\"pass\", @\"password_confirmation\": @\"pass\", @\"first_name\": @\"John\", @\"last_name\": @\"Woo\", }; [APSUsers create:data withBlock:^(APSResponse *e) { if (e.success) { NSString *userId = [[[e.response objectForKey:@\"users\"] objectAtIndex:0] objectForKey:@\"id\"]; NSString *msg = [NSString stringWithFormat:@\"Created! You are now logged in as %@\", userId]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"email\", \"test@appcelerator.com\"); data.put(\"first_name\", \"test_firstname\"); data.put(\"last_name\", \"test_lastname\"); data.put(\"password\", \"test_password\"); data.put(\"password_confirmation\", \"test_password\"); data.put(\"photo\", new File(\"/photos/profile.gif\")); try { APSUsers.create(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { String userId = e.getResponse().getJSONArray(\"users\").getJSONObject(0).getString(\"id\"); new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Created! You are now logged in as \" + userId) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (JSONException err) { Log.e(\"APSUsers\", \"Exception thrown: \" + err.toString()); } } else { Log.e(\"APSUsers\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSUsers\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSUsers\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.usersCreate({ email: 'test@mycompany.com', first_name: 'test_firstname', last_name: 'test_lastname', password: 'test_password', password_confirmation: 'test_password' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.users[0]); // If you are manually managing user sessions or cookies, // the method returns both a cookie and session ID. arrowDBApp.sessionCookieString = result.cookieString; sessionID = result.body.meta.session_id; } }); "
    },
    {
        "id": "Users-method-delete-arrowdb",
        "url": "Users-method-delete",
        "type": "arrowdb",
        "name": "Users.delete",
        "content": "A user must already be logged in to their account to delete it. Any Friends-related data and push notification subscriptions associated with the user are also deleted. The user's associated primary photo is not deleted. DELETE users/delete.json su_id User ID to delete this user on behalf of. The current login user must be an application admin to delete a user on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example deletes the current user and checks the response. Cloud.Users.remove(function (e) { if (e.success) { alert('Success: Removed'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X DELETE https://api.cloud.appcelerator.com/v1/users/delete.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"deleteUser\" } } ios Example iOS call: [APSUsers remove:nil withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Removed!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; try { APSUsers.remove(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Removed!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSUsers\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSUsers\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSUsers\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.usersDelete(function(err, result) { if (err) { console.error(err.message); } else { console.log('BALEETED!'); } }); "
    },
    {
        "id": "Users-method-login-arrowdb",
        "url": "Users-method-login",
        "type": "arrowdb",
        "name": "Users.login",
        "content": "Log a user in using their ArrowDB credentials. To log a user in using an external account, see External Account Login. To log a user out, see logout. User login sessions expire after they have been unused for three months. If the application saves and uses a persistent reference to the user login session, and the user session expires, any ArrowDB call that requires a user login will return a 404 error. Your application needs to handle an invalid user session error, such as prompting the user to log in. POST users/login.json login Email address or username of the user to login. password User's password. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example logs a user in and checks the response. Cloud.Users.login({ login: 'test@mycompany.com', password: 'test_password' }, function (e) { if (e.success) { var user = e.users[0]; alert('Success:\\n' + 'id: ' + user.id + '\\n' + 'sessionId: ' + Cloud.sessionId + '\\n' + 'first name: ' + user.first_name + '\\n' + 'last name: ' + user.last_name); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -F \"login=mgoff@appcelerator.com\" -F \"password=food\" https://api.cloud.appcelerator.com/v1/users/login.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"loginUser\", \"session_id\": \"abcDe0fGHijklenmU6xrdR9t0Z-0\" }, \"response\": { \"users\": [ { \"id\":\"4d6e77386f70950c89000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-02T16:58:32+0000\", \"updated_at\":\"2011-03-02T17:18:44+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2012-03-05T20:56:14+0000\", \"username\": \"mgoff\", \"role\": \"\", \"email\": \"mgoff@appcelerator.com\", \"admin\": \"true\", } ] } } ios Example iOS call: NSDictionary *data = @{ @\"login\":@\"foo@foo.com\", @\"password\":\"@password\" }; [APSUsers login:data withBlock:^(APSResponse *e) { if (e.success) { NSString *userId = [[[e.response objectForKey:@\"users\"] objectAtIndex:0] objectForKey:@\"id\"]; NSString *msg = [NSString stringWithFormat:@\"Logged in! You are now logged in as %@\", userId]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"login\", \"test@appcelerator.com\"); data.put(\"password\", \"test_password\"); try { APSUsers.login(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { String userId = e.getResponse().getJSONArray(\"users\").getJSONObject(0).getString(\"id\"); new AlertDialog.Builder(currentActivity) .setTitle(\"Success!\").setMessage(\"Logged in! You are now logged in as \" + userId) .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } catch (JSONException err) { Log.e(\"APSUsers\", \"Exception thrown: \" + err.toString()); } } else { Log.e(\"APSUsers\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSUsers\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSUsers\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.usersLogin({ login: 'test@mycompany.com', password: 'test_password' }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.users[0]); // If you are manually managing user sessions or cookies, // the method returns both a cookie and session ID. arrowDBApp.sessionCookieString = result.cookieString; sessionID = result.body.meta.session_id; } }); "
    },
    {
        "id": "Users-method-logout-arrowdb",
        "url": "Users-method-logout",
        "type": "arrowdb",
        "name": "Users.logout",
        "content": "Log out a user. GET users/logout.json device_token If specified, all push subscriptions associated with this device token are canceled. See the \"Push Notifications\" section in the Android SDK guide for more information. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example logs out the current user and checks the response. Cloud.Users.logout(function (e) { if (e.success) { alert('Success: Logged out'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt https://api.cloud.appcelerator.com/v1/users/logout.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"logoutUser\" } } ios Example iOS APS SDK call: [APSUsers logout:nil withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Logged out!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; try { APSUsers.logout(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { Toast.makeText(currentActivity, \"Logged out!\", Toast.LENGTH_SHORT); } else { Log.e(\"APSUsers\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSUsers\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSUsers\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.usersLogout(function(err, result) { if (err) { console.error(err.message); } else { console.log('Logged out!'); } }); "
    },
    {
        "id": "Users-method-query-arrowdb",
        "url": "Users-method-query",
        "type": "arrowdb",
        "name": "Users.query",
        "content": "Custom query of Users objects with sorting and paginating. You can query on sort based on the data in any of the standard User fields. You can also query and sort data based on the values of any custom fields, if the values are simple JSON values. For security reasons, when querying for Users the email field is not returned in each Users object unless you have admin access. Currently you cannot sort or query based on data stored inside array or hash objects in custom fields. In ArrowDB 1.1.5 and later, you can paginate query results using skip and limit parameters, or by including a where clause to limit the results to objects whose IDs fall within a specified range. For details, see Query Pagination. For details about using the query parameters, see the Search and Query guide. GET users/query.json page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. per_page Starting in ArrowDB 1.1.5, page and per_page are no longer supported in query operations. Applications should instead use skip and limit query parameters. limit The number of records to fetch. The value must be greater than 0, and no greater than 1000, or an HTTP 400 (Bad Request) error will be returned. Default value of limit is 10. skip The number of records to skip. The value must be greater than or equal to 0, and no greater than 4999, or an HTTP 400 error will be returned. To skip 5000 records or more you need to perform a range-based query. See Query Pagination for more information. where Constraint values for fields. where should be encoded JSON. If where is not specified, query returns all objects. order Sort results by one or more fields. sel Selects the object fields to display. Do not use this parameter with unsel. show_user_like If set to true, each User object in the response includes \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked field is not included in the response. unsel Selects the object fields NOT to display. Do not use this parameter with sel. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests information about specific users and checks the response. Cloud.Users.query({ page: 1, per_page: 10, where: { age: { '$gt': 28 }, favorite_color: 'blue', first_name: 'joe' } }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.users.length); for (var i = 0; i rest Example cURL request: $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode 'where={\"first_name\":\"joe\",\"coordinates\":{\"$nearSphere\":[-122.1,37.1], \"$maxDistance\" : 0.00126}}' --data-urlencode 'order=created_at' \"https://api.cloud.appcelerator.com/v1/users/query.json?key=&pretty_json=true&count=true\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"queryUsers\", \"count\": 100 }, \"response\": { \"users\": [ { \"id\": \"53fbb057c3aafa087a000400\", \"first_name\": \"joe\", \"last_name\": \"smith\", \"created_at\": \"2014-08-25T21:53:27+0000\", \"updated_at\": \"2014-08-26T18:43:22+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2014-08-25T21:53:27+0000\", \"username\": \"jsmith\", \"admin\": \"false\", \"stats\": { \"photos\": { \"total_count\": 0 }, \"storage\": { \"used\": 0 } }, \"friend_counts\": { \"requests\": 1, \"friends\": 0 } } ] } } } ios Example iOS APS SDK call: [APSUsers query:nil withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu statuses\", (unsigned long)((NSArray *)e.response[@\"statuses\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success!\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap; JSONObject params = new JSONObject(\"{'first_name': 'joe', 'coordinates': {'$nearSphere': [-122.1,37.1], '$maxDistance': 0.00126}}\"); data.put(\"where\", params); try { APSUsers.query(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray users = e.getResponse().getJSONArray(\"users\"); if (users.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.usersQuery({ limit: 10, where: { age: { '$gt': 28 }, favorite_color: 'blue', first_name: 'joe' } }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.users.forEach(function(user) { console.log(user.first_name + ' ' + user.last_name) }); } }); "
    },
    {
        "id": "Users-method-request_reset_password-arrowdb",
        "url": "Users-method-request_reset_password",
        "type": "arrowdb",
        "name": "Users.request_reset_password",
        "content": "Sends an email to a user containing a link to recover a lost password. You can use the default email template provided by ACS, or specify a custom email template that you have created. When using a custom email template, the email must contain a properly formatted URL, as explained in the template method parameter documentation below. You must also have configured your application's email settings in Appcelerator Dashboard. GET users/request_reset_password.json email Email address. Must match the user's registered email address. subject The default subject of the password reset email is \"Password reset request for {{your app name}}\". If you wish to have your custom email subject, you can provide it by setting the subject parameter template If you wish to use your custom email body. You can create a email template and pass the template name. The email must contain a properly formatted link to the password reset URL on appcelerator.com, or a link on your own site, as follows: To link directly to the password page, your email template must contain a link to the following URL: https://platform.appcelerator.com/#/users/reset_password/{{key}}/{{reset_password_token}} If you prefer the user to reset their password on your own website, rather than on appcelerator.com, you must provide a URL with the following format: https://[your_url.com]/[your_method]?reset_password_token={{reset_password_token}} This page must cache the value of the reset_password_token parameter and present a form that allows the user to enter a new password and password confirmation. When the user submits the form, the app server must make the following call to Appcelerator Cloud Services API to reset the password, passing the original password reset token, the user's new password, and the password confirmation: GET https://api.cloud.appcelerator.com/v1/users/reset_password.json?key=&reset_password_token={{reset_password_token}}&password={{password}} &password_confirmation={{password_confirmation}} pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests a password reset for a user and checks the response. Cloud.Users.requestResetPassword({ email: 'email.value', from: 'email@company.com', }, function (e) { if (e.success) { alert('Success: Reset Request Sent'); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/users/request_reset_password.json?key=&pretty_json=true&email=foo@foo.com\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"RequestResetPassword\" } } ios The following example creates an NSDictionary of parameters to be passed with the request. The object emailField is a UITextField (not shown). NSDictionary *data = @{ @\"email\":@\"foo@foo.com\" }; [APSUsers requestResetPassword:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Please check your email!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"email\", \"foo@foo.com\"); try { APSUsers.requestResetPassword(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Please check your email!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSUsers\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSUsers\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSUsers\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.usersRequestResetPassword({ email: 'joeuser@mycompany.com' }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Password reset request sent!') } }); "
    },
    {
        "id": "Users-method-resend_confirmation-arrowdb",
        "url": "Users-method-resend_confirmation",
        "type": "arrowdb",
        "name": "Users.resend_confirmation",
        "content": "If you enabled new user account email verification in your App settings, all new users will receive an email containing instructions to activate their account. You can use this API to re-send user verification email. GET users/resend_confirmation.json email Email must match user's registered email. confirmation_subject The default subject of the email verification is \"Email Verification Instructions for {{your app name}}\". If you wish to have your custom email subject, you can provide it by setting the confirmation_subject parameter. confirmation_template If you wish to use your custom email body. You can create a email template and pass the template name. Your email template must contain the following URL to allow users to be redirected to Appcelerator Cloud Services email verification page: https://cloud.appcelerator.com/users/confirmation?key={{key}}&confirmation_token={{confirmation_token}} If you have your own website that talks to Appcelerator Cloud Services backend and wish to use custom URL, you must provide a URL with the following format: https://[your_url.com]/[your_method]?key={{key}}&confirmation_token={{confirmation_token}} When a user visits the above URL, you make a call to Appcelerator Cloud Services to confirm the user internally from your web server: GET https://api.cloud.appcelerator.com/v1/users/confirm_user.json?confirmation_token={{confirmation_token}}&key= pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium The following example re-sends a verification email to the user's registered email. If the reset request is successful, an alert dialog is displayed asking the user to check their email; otherwise, an error is generated. Available as a Titanium API since release 3.2.0. Cloud.Users.resendConfirmation({ email: email.value }, function (e) { if (e.success) { alert('Please check your email!'); email.value = ''; } else { error(e); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/users/resend_confirmation.json?key=&pretty_json=true&email=foo@foo.com\" Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"resendConfirmation\" } } ios Example iOS APS SDK call: NSDictionary *data = @{ @\"email\": @\"foo@foo.com\" }; [APSUsers resendConfirmation:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Please check your email!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"email\", \"foo@foo.com\"); try { APSUsers.resendConfirmation(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Please check your email!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSUsers\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSUsers\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSUsers\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.usersResendConfirmation({ email: 'joeuser@mycompany.com' }, function(err, result) { if (err) { console.error(err.message); } else { console.log('Confirmation e-mail sent!'); } }); "
    },
    {
        "id": "Users-method-search-arrowdb",
        "url": "Users-method-search",
        "type": "arrowdb",
        "name": "Users.search",
        "content": "Returns the list of users that have been added to the app, sorted by search relevancy. Optionally, q can be given to perform full text search on user's first name, last name, email address, username and tags. For security reasons, when searching for Users the email field is not returned in each Users object unless you have admin access. For advanced custom search, see query. GET users/search.json page Request page number, default is 1. per_page Number of results per page, default is 10. q Space-separated list of keywords, used to perform full text search on first name, last name, email address, username and tags fields. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests information about particular users and checks the response. Cloud.Users.search({ q: 'test' }, function (e) { if (e.success) { alert('Success:\\n' + 'Count: ' + e.users.length); for (var i = 0; i rest Example cURL request: $ curl -b cookies.txt -c cookies.txt https://api.cloud.appcelerator.com/v1/users/search.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"searchUsers\", \"page\":1, \"per_page\":10, \"total_pages\":1, \"total_results\":1 }, \"response\": { \"users\": [ { \"id\": \"53fbb057c3aafa087a000400\", \"first_name\": \"Roy\", \"last_name\": \"Harper\", \"created_at\": \"2014-08-25T21:53:27+0000\", \"updated_at\": \"2014-08-26T18:43:22+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2014-08-25T21:53:27+0000\", \"username\": \"speedy\", \"admin\": \"false\", \"stats\": { \"photos\": { \"total_count\": 0 }, \"storage\": { \"used\": 0 } }, \"friend_counts\": { \"requests\": 1, \"friends\": 0 } } ] } } ios Example iOS APS SDK call: NSDictionary *data = @{@\"q\":@\"John\"}; [APSUsers search:data withBlock:^(APSResponse *e) { if (e.success) { NSString *message = [NSString stringWithFormat:@\"Found %lu users\", (unsigned long)((NSArray *)e.response[@\"users\"]).count ]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:e.responseString delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); HashMap data = new HashMap(); data.put(\"q\", \"Peter,Paul,Mary\"); try { APSUsers.search(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { JSONArray users = e.getResponse().getJSONArray(\"users\"); if (users.length() nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.usersSearch({ q: 'test' }, function(err, result) { if (err) { console.error(err.message); } else { result.body.response.users.forEach(function(user) { console.log(user.first_name + ' ' + user.last_name); }); } }); "
    },
    {
        "id": "Users-method-show-arrowdb",
        "url": "Users-method-show",
        "type": "arrowdb",
        "name": "Users.show",
        "content": "Shows public user information. For private information about the currently logged in user, see Show Logged In User Info. GET users/show.json user_id User ID of the user to show. Either user_id or user_ids must be specified. user_ids Comma-separated list of user IDs to show. Either user_id or user_ids must be specified. response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. show_user_like If set to true the User object in the response will include \"current_user_liked: true\" if the current user has liked the object. If the user has not liked the object, the current_user_liked field is not included in the response. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests information about a user and checks the response. Cloud.Users.show({ user_id: savedUserInfo.id }, function (e) { if (e.success) { var user = e.users[0]; alert('Success:\\n' + 'id: ' + user.id + '\\n' + 'first name: ' + user.first_name + '\\n' + 'last name: ' + user.last_name); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/users/show.json?key=&pretty_json=true&user_id=4d6e77386f70950c89000001\" Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"showUsers\" }, \"response\": { \"users\": [ { \"id\": \"53fbb057c3aafa087a000400\", \"first_name\": \"Victor\", \"last_name\": \"Stone\", \"created_at\": \"2014-08-25T21:53:27+0000\", \"updated_at\": \"2014-08-26T18:43:22+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2014-08-25T21:53:27+0000\", \"username\": \"cyborg\", \"admin\": \"false\", \"stats\": { \"photos\": { \"total_count\": 0 }, \"storage\": { \"used\": 0 } }, \"friend_counts\": { \"requests\": 1, \"friends\": 0 } } ] } } ios Example iOS APS SDK call: NSDictionary *data = @{@\"user_id\": @\"4d6e77386f70950c89000001\"}; [APSUsers show:data withBlock:^(APSResponse *e) { if (e.success) { NSArray *users = e.response[@\"users\"]; NSDictionary *user = files[0]; NSString *message = [NSString stringWithFormat:@\"username: %@\", user[@\"username\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"user_id\", \"4d6e77386f70950c89000001\"); try { APSUsers.show(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { Toast.makeText(currentActivity, e.getResponseString(), Toast.LENGTH_SHORT); } catch (APSCloudException err) { Log.e(\"APSUsers\", \"Exception thrown: \" + err.toString()); } } else { Log.e(\"APSUsers\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSUsers\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSUsers\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.usersShow({ user_id: savedUserInfo.id }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.users[0]); } }); "
    },
    {
        "id": "Users-method-show_me-arrowdb",
        "url": "Users-method-show_me",
        "type": "arrowdb",
        "name": "Users.show_me",
        "content": "Shows both public and private user information about the user who is currently logged in. GET users/show/me.json response_json_depth Nested object depth level counts in response json. In order to reduce server API calls from an application, the response json may include not just the objects that are being queried/searched, but also with some important data related to the returning objects such as object's owner or referencing objects. Default is 1, valid range is 1 to 8. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example requests information about the currently logged in user and checks the response. Cloud.Users.showMe(function (e) { if (e.success) { var user = e.users[0]; alert('Success:\\n' + 'id: ' + user.id + '\\n' + 'first name: ' + user.first_name + '\\n' + 'last name: ' + user.last_name); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt https://api.cloud.appcelerator.com/v1/users/show/me.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"code\": 200, \"status\": \"ok\", \"method_name\": \"showMe\", \"session_id\": \"xxfbb057xxaafaxx7a0xx400\" }, \"response\": { \"users\": [ { \"id\": \"53fbb057c3aafa087a000400\", \"first_name\": \"Donna\", \"last_name\": \"Troy\", \"created_at\": \"2014-08-25T21:53:27+0000\", \"updated_at\": \"2014-08-26T18:43:22+0000\", \"external_accounts\": [ ], \"confirmed_at\": \"2014-08-25T21:53:27+0000\", \"username\": \"wondergirl\", \"admin\": \"false\", \"stats\": { \"photos\": { \"total_count\": 0 }, \"storage\": { \"used\": 0 } }, \"friend_counts\": { \"requests\": 1, \"friends\": 0 } } ] } } ios Example iOS call: [APSUsers showMe:nil withBlock:^(APSResponse *e) { if (e.success) { NSArray *users = e.response[@\"users\"]; NSDictionary *user = files[0]; NSString *message = [NSString stringWithFormat:@\"I am %@ %@\", user[@\"first_name\"], user[@\"last_name\"]]; [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; try { APSUsers.showMe(null, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { try { Toast.makeText(currentActivity, e.getResponseString(), Toast.LENGTH_SHORT); } catch (APSCloudException err) { Log.e(\"APSUsers\", \"Exception thrown: \" + err.toString()); } } else { Log.e(\"APSUsers\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSUsers\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSUsers\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.usersShowMe(function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.users[0]); } }); "
    },
    {
        "id": "Users-method-update-arrowdb",
        "url": "Users-method-update",
        "type": "arrowdb",
        "name": "Users.update",
        "content": "Any of the same parameters as create can be used to update the current user. If password is updated then password_confirmation must be sent as well. PUT users/update.json email Email address. username User name. password Password. password_confirmation Password. first_name First name. last_name First name. photo New photo to assign as the user's primary photo. When you use photo parameter to attach a new photo, you can use it with custom resize and sync options To remove primary photo, simply set \"photo=\" or \"photo_id=\". If the original photo was created by using photo parameter, the photo will be deleted. photo_id ID of an existing photo to use as the user's primary photo. To remove primary photo, simply set \"photo=\" or \"photo_id=\". If the original photo was created by using photo parameter, the photo will be deleted. tags Comma separated tags, overwrites the existing tags. For example, \"hiking,swimming\". custom_fields User-defined data. See Custom Data Fields. acl_name Name of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. acl_id ID of an ACLs to associate with this object. An ACL can be specified using acl_name or acl_id. The two parameters are mutually exclusive. su_id User ID to update this user on behalf of. The current login user must be an application admin to update a user on behalf of another user. pretty_json Determines if the JSON response is formatted for readability (true), or displayed on a single line (false). Default is false. return void titanium This example updates information about the currently logged in user and checks the response. Cloud.Users.update({ email: 'joeuser@mycompany.com', first_name: 'joe', last_name: 'user', custom_fields: { favorite_color: 'blue', age: 25 } }, function (e) { if (e.success) { var user = e.users[0]; alert('Success:\\n' + 'id: ' + user.id + '\\n' + 'first name: ' + user.first_name + '\\n' + 'last name: ' + user.last_name); } else { alert('Error:\\n' + ((e.error && e.message) || JSON.stringify(e))); } }); rest Example cURL request: $ curl -b cookies.txt -c cookies.txt -X PUT -d \"email=mike@appcelerator.com\" https://api.cloud.appcelerator.com/v1/users/update.json?key=&pretty_json=true Example JSON response: { \"meta\": { \"status\":\"ok\", \"code\":200, \"method_name\":\"updateUser\" }, \"response\": { \"users\": [ { \"id\":\"4d7eb865d0afbe2399000001\", \"first_name\":\"Michael\", \"last_name\":\"Goff\", \"created_at\":\"2011-03-15T00:52:53+0000\", \"updated_at\":\"2011-03-24T17:50:28+0000\", \"facebook_authorized\":false, \"email\":\"mike@appcelerator.com\" } ] } } ios Example iOS call: // Create dictionary of parameters to be passed with the request NSDictionary *data = @{ @\"first_name\": @\"Joe\" }; [APSUsers update:data withBlock:^(APSResponse *e) { if (e.success) { [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Updated!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } else { [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show]; } }]; android Example Android APS SDK call: APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY'); final Activity currentActivity = this; HashMap data = new HashMap(); data.put(\"email\", \"test@appcelerator.com\"); data.put(\"first_name\", \"test_firstname\"); data.put(\"last_name\", \"test_lastname\"); data.put(\"password\", \"test_password\"); data.put(\"password_confirmation\", \"test_password\"); data.put(\"photo\", new File(\"/photos/profile.gif\")); try { APSUsers.update(data, new APSResponseHandler() { @Override public void onResponse(final APSResponse e) { if (e.getSuccess()) { new AlertDialog.Builder(currentActivity) .setTitle(\"Success\").setMessage(\"Updated!\") .setPositiveButton(android.R.string.ok, null) .setIcon(android.R.drawable.ic_dialog_info) .show(); } else { Log.e(\"APSUsers\", \"ERROR: \" + e.getErrorMessage()); } } @Override public void onException(final APSCloudException e) { Log.e(\"APSUsers\", \"Exception throw: \" + e.toString()); } }); } catch (APSCloudException e) { Log.e(\"APSUsers\", \"Exception thrown: \" + e.toString()); } nodejs Example Node.js call: var ArrowDB = require('arrowdb'), arrowDBApp = new ArrowDB(''); arrowDBApp.usersUpdate({ email: 'joeuser@mycompany.com', first_name: 'joe', last_name: 'user', custom_fields: { favorite_color: 'blue', age: 25 } }, function(err, result) { if (err) { console.error(err.message); } else { console.log(result.body.response.users[0]); } }); "
    }
]