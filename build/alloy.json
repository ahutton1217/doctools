[
  {
    "tagname": "class",
    "name": "Alloy.Controller",
    "doc": "<p>The base class for Alloy controllers.</p>\n\n<p>Each controller is associated with a UI hierarchy, defined in an XML file in the\n<code>views</code> folder. Each element in the view hierarchy is either a Titanium View\nor another Alloy controller or widget. Each Alloy controller or widget can additionally contain\nTitanium Views and/or more controllers and widgets.</p>\n",
    "extends": "Backbone.Events",
    "mixins": [

    ],
    "alternateClassNames": [

    ],
    "aliases": {
    },
    "singleton": false,
    "requires": [

    ],
    "uses": [

    ],
    "enum": null,
    "override": null,
    "inheritable": null,
    "inheritdoc": null,
    "meta": {
    },
    "private": null,
    "id": "class-Alloy.Controller",
    "members": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [
        {
          "tagname": "method",
          "name": "addClass",
          "owner": "Alloy.Controller",
          "doc": "<p>Adds a TSS class to the specified view object.</p>\n\n<p>You can apply additional styles with the <code>opts</code> parameter. To use this method\neffectively you may need to enable autostyling\non the target XML view. See <a href=\"#!/guide/Dynamic_Styles-section-37530415_DynamicStyles-Autostyle\">Autostyle</a>\nin the Alloy developer guide.</p>\n\n<h4>Example</h4>\n\n<p>The following adds the TSS classes \".redbg\" and \".bigger\" to a Titanium.UI.Label\nobject proxy <code>label1</code>, and also sets the label's <code>text</code> property to \"Cancel\".</p>\n\n<pre><code>// index.js\n$.addClass($.label1, 'redbg bigger', {text: \"Cancel\"});\n</code></pre>\n\n<p>The 'redbg' and 'bigger' classes are shown below:</p>\n\n<pre><code>// index.tss\n\".redbg\" : {\n    color: 'red'\n}\n\".bigger\": {\n    font : {\n       fontSize: '36'\n    }\n}\n</code></pre>\n",
          "params": [
            {
              "type": "Object",
              "name": "proxy",
              "doc": "<p>View object to which to add class(es).</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "Object"
            },
            {
              "type": "Array<String>/String",
              "name": "classes",
              "doc": "<p>Array or space-separated list of classes to apply.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "Array<String>/String"
            },
            {
              "type": "Dictionary",
              "name": "opts",
              "doc": "<p>Dictionary of properties to apply after classes have been added.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "Dictionary"
            }
          ],
          "return": {
            "type": "undefined",
            "name": "return",
            "doc": "\n",
            "properties": [

            ],
            "html_type": "undefined"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
            "since": [
              "1.2.0"
            ]
          },
          "private": null,
          "id": "method-addClass",
          "linenr": 269,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/Alloy/lib/alloy/controllers/BaseController.js",
              "linenr": 269
            }
          ],
          "shortDoc": "Adds a TSS class to the specified view object. ...",
          "html_meta": {
            "since": "<h3>Since 1.2.0</h3>"
          }
        },
        {
          "tagname": "method",
          "name": "addListener",
          "owner": "Alloy.Controller",
          "doc": "<p>Adds a tracked event listeners to a view proxy object.\nBy default, any event listener declared in XML is tracked by Alloy.</p>\n\n<h4>Example</h4>\n\n<p>Add an event to the tracking target.</p>\n\n<pre><code>$.addListener($.aView, 'click', onClick);\n</code></pre>\n",
          "params": [
            {
              "type": "Object",
              "name": "proxy",
              "doc": "<p>Proxy view object to listen to.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "Object"
            },
            {
              "type": "String",
              "name": "type",
              "doc": "<p>Name of the event.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "String"
            },
            {
              "type": "Function",
              "name": "callback",
              "doc": "<p>Callback function to invoke when the event is fired.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "Function"
            }
          ],
          "return": {
            "type": "String",
            "name": "return",
            "doc": "<p>ID attribute of the view object.  If one does not exist, Alloy will create a unique ID.</p>\n",
            "properties": null,
            "html_type": "String"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
            "since": [
              "1.7.0"
            ]
          },
          "private": null,
          "id": "method-addListener",
          "linenr": 404,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/Alloy/lib/alloy/controllers/BaseController.js",
              "linenr": 404
            }
          ],
          "shortDoc": "Adds a tracked event listeners to a view proxy object. ...",
          "html_meta": {
            "since": "<h3>Since 1.7.0</h3>"
          }
        },
        {
          "tagname": "method",
          "name": "createStyle",
          "owner": "Alloy.Controller",
          "doc": "<p>Creates a dictionary of properties based on the specified styles.</p>\n\n<p>You can use this dictionary with the view object's\napplyProperties method\nor a create object method, such as Titanium.UI.createView.</p>\n\n<h4>Examples</h4>\n\n<p>The following creates a new style object that is passed as a parameter\nto the Ti.UI.createLabel() method.</p>\n\n<pre><code>var styleArgs = {\napiName: 'Ti.UI.Label',\n    classes: ['blue','shadow','large'],\n    id: 'tester',\n    borderWidth: 2,\n    borderRadius: 16,\n    borderColor: '#000'\n};\nvar styleObject = $.createStyle(styleArgs);\ntestLabel = Ti.UI.createLabel(styleObject);\n</code></pre>\n\n<p>The next example uses the applyProperties() method\nto apply a style object to an existing Button control (button not shown).</p>\n\n<pre><code>var style = $.createStyle({\n    classes: args.button,\n    apiName: 'Button',\n    color: 'blue'\n});\n$.button.applyProperties(style);\n</code></pre>\n",
          "params": [
            {
              "type": "AlloyStyleDict",
              "name": "opts",
              "doc": "<p>Dictionary of styles to apply.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "AlloyStyleDict"
            }
          ],
          "return": {
            "type": "Dictionary",
            "name": "return",
            "doc": "\n",
            "properties": null,
            "html_type": "Dictionary"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
            "since": [
              "1.2.0"
            ]
          },
          "private": null,
          "id": "method-createStyle",
          "linenr": 218,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/Alloy/lib/alloy/controllers/BaseController.js",
              "linenr": 218
            }
          ],
          "shortDoc": "Creates a dictionary of properties based on the specified styles. ...",
          "html_meta": {
            "since": "<h3>Since 1.2.0</h3>"
          }
        },
        {
          "tagname": "method",
          "name": "destroy",
          "owner": "Alloy.Controller",
          "doc": "<p>Frees binding resources associated with this controller and its\nUI components. It is critical that this is called when employing\nmodel/collection binding in order to avoid potential memory leaks.\n$.destroy() should be called whenever a controller's UI is to\nbe \"closed\" or removed from the app. See the <a href=\"#!/guide/Destroying_Data_Bindings\">Destroying Data Bindings</a>\ntest application for an example of this approach.</p>\n\n<h4>Example</h4>\n\n<p>In the following example the view-controller for a Window object named <code>dialog</code>\ncalls its <code>destroy()</code> method in response to the Window object being closed.</p>\n\n<pre><code>$.dialog.addEventListener('close', function() {\n    $.destroy();\n});\n</code></pre>\n",
          "params": [

          ],
          "return": {
            "type": "undefined",
            "name": "return",
            "doc": "\n",
            "properties": [

            ],
            "html_type": "undefined"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "method-destroy",
          "linenr": 161,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/Alloy/lib/alloy/controllers/BaseController.js",
              "linenr": 161
            }
          ],
          "shortDoc": "Frees binding resources associated with this controller and its\nUI components. ...",
          "html_meta": {
          }
        },
        {
          "tagname": "method",
          "name": "getListener",
          "owner": "Alloy.Controller",
          "doc": "<p>Gets all the tracked event listeners of the view-controller or\nonly the ones specified by the parameters.  Passing no parameters,\nretrieves all tracked event listeners. Set a parameter to <code>null</code>\nif you do not want to restrict the match to that parameter.</p>\n\n<h4>Example</h4>\n\n<p>Get all events bound to the view-controller.</p>\n\n<pre><code>var listener = $.getListener();\n</code></pre>\n",
          "params": [
            {
              "type": "Object",
              "name": "proxy",
              "doc": "<p>Proxy view object.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "Object"
            },
            {
              "type": "String",
              "name": "type",
              "doc": "<p>Name of the event.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "String"
            }
          ],
          "return": {
            "type": "Array<TrackedEventListener>",
            "name": "return",
            "doc": "<p>List of tracked event listeners.</p>\n",
            "properties": null,
            "html_type": "Array<TrackedEventListener>"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
            "since": [
              "1.7.0"
            ]
          },
          "private": null,
          "id": "method-getListener",
          "linenr": 441,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/Alloy/lib/alloy/controllers/BaseController.js",
              "linenr": 441
            }
          ],
          "shortDoc": "Gets all the tracked event listeners of the view-controller or\nonly the ones specified by the parameters. ...",
          "html_meta": {
            "since": "<h3>Since 1.7.0</h3>"
          }
        },
        {
          "tagname": "method",
          "name": "getTopLevelViews",
          "owner": "Alloy.Controller",
          "doc": "<p>Returns a list of the root view elements associated with this controller.</p>\n\n<h4>Example</h4>\n\n<p>The following example displays the <code>id</code> of each top-level view associated with the\ncontroller:</p>\n\n<pre><code>// index.js\nvar views = $.getTopLevelViews();\nfor (each in views) {\n    var view = views[each];\n    console.log(view.id);\n}\n</code></pre>\n",
          "params": [

          ],
          "return": {
            "type": "Array.<(Titanium.UI.View|Alloy.Controller)>",
            "name": "return",
            "doc": "\n",
            "properties": null,
            "html_type": "Array.<(Titanium.UI.View|Alloy.Controller)>"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "method-getTopLevelViews",
          "linenr": 61,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/Alloy/lib/alloy/controllers/BaseController.js",
              "linenr": 61
            }
          ],
          "shortDoc": "Returns a list of the root view elements associated with this controller. ...",
          "html_meta": {
          }
        },
        {
          "tagname": "method",
          "name": "getView",
          "owner": "Alloy.Controller",
          "doc": "<p>Returns the specified view associated with this controller.</p>\n\n<p>If no <code>id</code> is specified, returns the first top-level view.</p>\n\n<h4>Example</h4>\n\n<p>The following example gets a reference to a <code>&lt;Window/&gt;</code> object\nwith the <code>id</code> of \"loginWin\" and then calls its <a href=\"Titanium.UI.Window\">open()</a> method.</p>\n\n<pre><code>var loginWindow = $.getView('loginWin');\nloginWindow.open();\n</code></pre>\n",
          "params": [
            {
              "type": "String",
              "name": "id",
              "doc": "<p>ID of the view to return.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "String"
            }
          ],
          "return": {
            "type": "Titanium.UI.View/Alloy.Controller",
            "name": "return",
            "doc": "\n",
            "properties": null,
            "html_type": "Titanium.UI.View/Alloy.Controller"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "method-getView",
          "linenr": 84,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/Alloy/lib/alloy/controllers/BaseController.js",
              "linenr": 84
            }
          ],
          "shortDoc": "Returns the specified view associated with this controller. ...",
          "html_meta": {
          }
        },
        {
          "tagname": "method",
          "name": "getViews",
          "owner": "Alloy.Controller",
          "doc": "<p>Returns a list of all IDed view elements associated with this controller.</p>\n\n<h4>Example</h4>\n\n<p>Given the following XML view:</p>\n\n<pre><code>&lt;Alloy&gt;\n    &lt;TabGroup id=\"tabs\"&gt;\n        &lt;Tab title=\"Tab 1\" icon=\"KS_nav_ui.png\" id=\"tab1\"&gt;\n            &lt;Window title=\"Tab 1\" id=\"win1\"&gt;\n                &lt;Label id=\"label1\"&gt;I am Window 1&lt;/Label&gt;\n            &lt;/Window&gt;\n        &lt;/Tab&gt;\n        &lt;Tab title=\"Tab 2\" icon=\"KS_nav_views.png\" id=\"tab2\"&gt;\n            &lt;Window title=\"Tab 2\" id=\"wind2\"&gt;\n                &lt;Label id=\"label2\"&gt;I am Window 2&lt;/Label&gt;\n            &lt;/Window&gt;\n        &lt;/Tab&gt;\n    &lt;/TabGroup&gt;\n    &lt;View id=\"otherview\"&gt;&lt;/View&gt;\n&lt;/Alloy&gt;\n</code></pre>\n\n<p>The following view-controller outputs the id of each view in the hierarchy.</p>\n\n<pre><code>var views = $.getViews();\nfor (each in views) {\n    var view = views[each];\n    console.log(view.id);\n}\n\n[INFO] :   win1\n[INFO] :   label1\n[INFO] :   tab1\n[INFO] :   wind2\n[INFO] :   label2\n[INFO] :   tab2\n[INFO] :   tabs\n[INFO] :   otherview\n</code></pre>\n",
          "params": [

          ],
          "return": {
            "type": "Array.<(Titanium.UI.View|Alloy.Controller)>",
            "name": "return",
            "doc": "\n",
            "properties": null,
            "html_type": "Array.<(Titanium.UI.View|Alloy.Controller)>"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "method-getViews",
          "linenr": 115,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/Alloy/lib/alloy/controllers/BaseController.js",
              "linenr": 115
            }
          ],
          "shortDoc": "Returns a list of all IDed view elements associated with this controller. ...",
          "html_meta": {
          }
        },
        {
          "tagname": "method",
          "name": "removeClass",
          "owner": "Alloy.Controller",
          "doc": "<p>Removes a TSS class from the specified view object.</p>\n\n<p>You can apply additional styles after the removal with the <code>opts</code> parameter.\nTo use this method effectively you may need to enable autostyling\non the target XML view. See <a href=\"#!/guide/Dynamic_Styles-section-37530415_DynamicStyles-Autostyle\">Autostyle</a>\nin the Alloy developer guide.</p>\n\n<h4>Example</h4>\n\n<p>The following removes the \"redbg\" and \"bigger\" TSS classes from a Titanium.UI.Label\nobject proxy <code>label1</code>, and also sets the label's <code>text</code> property to \"...\".</p>\n\n<pre><code>$.removeClass($.label1, 'redbg bigger', {text: \"...\"});\n</code></pre>\n",
          "params": [
            {
              "type": "Object",
              "name": "proxy",
              "doc": "<p>View object from which to remove class(es).</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "Object"
            },
            {
              "type": "Array<String>/String",
              "name": "classes",
              "doc": "<p>Array or space-separated list of classes to remove.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "Array<String>/String"
            },
            {
              "type": "Dictionary",
              "name": "opts",
              "doc": "<p>Dictionary of properties to apply after the class removal.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "Dictionary"
            }
          ],
          "return": {
            "type": "undefined",
            "name": "return",
            "doc": "\n",
            "properties": [

            ],
            "html_type": "undefined"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
            "since": [
              "1.2.0"
            ]
          },
          "private": null,
          "id": "method-removeClass",
          "linenr": 305,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/Alloy/lib/alloy/controllers/BaseController.js",
              "linenr": 305
            }
          ],
          "shortDoc": "Removes a TSS class from the specified view object. ...",
          "html_meta": {
            "since": "<h3>Since 1.2.0</h3>"
          }
        },
        {
          "tagname": "method",
          "name": "removeListener",
          "owner": "Alloy.Controller",
          "doc": "<p>Removes all tracked event listeners or only the ones\nspecified by the parameters. Passing no parameters,\nremoves all tracked event listeners.  Set a parameter to <code>null</code>\nif you do not want to restrict the match to that parameter.</p>\n\n<h4>Example</h4>\n\n<p>When the window is closed, remove all tracked event listeners.</p>\n\n<pre><code>&lt;Alloy&gt;\n    &lt;Window onOpen=\"doOpen\" onClose=\"doClose\"&gt;\n        &lt;Label id=\"label\" onClick=\"doClick\"&gt;Hello, world&lt;/Label&gt;\n    &lt;/Window&gt;\n&lt;/Alloy&gt;\n\nfunction doClose() {\n    $.removeListener();\n}\n</code></pre>\n",
          "params": [
            {
              "type": "Object",
              "name": "proxy",
              "doc": "<p>Proxy view object to remove event listeners from.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "Object"
            },
            {
              "type": "String",
              "name": "type",
              "doc": "<p>Name of the event to remove.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "String"
            },
            {
              "type": "Function",
              "name": "callback",
              "doc": "<p>Callback to remove.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "Function"
            }
          ],
          "return": {
            "type": "Alloy.Controller",
            "name": "return",
            "doc": "<p>Controller instance.</p>\n",
            "properties": null,
            "html_type": "Alloy.Controller"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
            "since": [
              "1.7.0"
            ],
            "chainable": true
          },
          "private": null,
          "id": "method-removeListener",
          "linenr": 470,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/Alloy/lib/alloy/controllers/BaseController.js",
              "linenr": 470
            }
          ],
          "shortDoc": "Removes all tracked event listeners or only the ones\nspecified by the parameters. ...",
          "html_meta": {
            "since": "<h3>Since 1.7.0</h3>",
            "chainable": null
          }
        },
        {
          "tagname": "method",
          "name": "resetClass",
          "owner": "Alloy.Controller",
          "doc": "<p>Sets the array of TSS classes for the target View object, adding the classes specified and\nremoving any applied classes that are not specified.</p>\n\n<p>You can apply classes or styles after the reset using the <code>classes</code> or <code>opts</code> parameters.\nTo use this method effectively you may need to enable autostyling\non the target XML view. See <a href=\"#!/guide/Dynamic_Styles-section-37530415_DynamicStyles-Autostyle\">Autostyle</a>\nin the Alloy developer guide.</p>\n\n<h4>Example</h4>\n\n<p>The following removes all previously applied styles on <code>label1</code> and then applies\nthe TSS class 'no-style'.</p>\n\n<pre><code>$.resetClass($.label1, 'no-style');\n</code></pre>\n",
          "params": [
            {
              "type": "Object",
              "name": "proxy",
              "doc": "<p>View object to reset.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "Object"
            },
            {
              "type": "Array<String>/String",
              "name": "classes",
              "doc": "<p>Array or space-separated list of classes to apply after the reset.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "Array<String>/String"
            },
            {
              "type": "Dictionary",
              "name": "opts",
              "doc": "<p>Dictionary of properties to apply after the reset.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "Dictionary"
            }
          ],
          "return": {
            "type": "undefined",
            "name": "return",
            "doc": "\n",
            "properties": [

            ],
            "html_type": "undefined"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
            "since": [
              "1.2.0"
            ]
          },
          "private": null,
          "id": "method-resetClass",
          "linenr": 328,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/Alloy/lib/alloy/controllers/BaseController.js",
              "linenr": 328
            }
          ],
          "shortDoc": "Sets the array of TSS classes for the target View object, adding the classes specified and\nremoving any applied class...",
          "html_meta": {
            "since": "<h3>Since 1.2.0</h3>"
          }
        },
        {
          "tagname": "method",
          "name": "updateViews",
          "owner": "Alloy.Controller",
          "doc": "<p>Applies a set of properties to view elements associated with this controller.\nThis method is useful for setting properties on repeated elements such as\nTableViewRow objects, rather than needing to have a controller\nfor those child controllers.</p>\n\n<h4>Example</h4>\n\n<p>The following example uses this method to update a Label inside a TableViewRow object\nbefore adding it to a TableView.</p>\n\n<p>View-controller file: controllers/index.js</p>\n\n<pre><code>for (var i=0; i &lt; 10; i++) {\n  var row = <a href=\"#!/api/Alloy-method-createController\" rel=\"Alloy-method-createController\" class=\"docClass\">Alloy.createController</a>(\"tablerow\");\n  row.updateViews({\n    \"#theLabel\": {\n        text: \"I am row #\" + i\n    }\n  });\n  $.tableView.appendRow(row.getView());\n};\n</code></pre>\n\n<p>XML view: views/tablerow.xml</p>\n\n<pre><code>&lt;Alloy&gt;\n    &lt;TableViewRow&gt;\n        &lt;Label id=\"theLabel\"&gt;&lt;/Label&gt;\n    &lt;/TableViewRow&gt;\n&lt;/Alloy&gt;\n</code></pre>\n\n<p>XML view: views/index.xml</p>\n\n<pre><code>&lt;TableView id=\"tableView\"&gt;\n&lt;/TableView&gt;\n</code></pre>\n",
          "params": [
            {
              "type": "Object",
              "name": "args",
              "doc": "<p>An object whose keys are the IDs (in form '#id') of views to which the styles will be applied.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "Object"
            }
          ],
          "return": {
            "type": "Alloy.Controller",
            "doc": "<p>this</p>\n",
            "html_type": "Alloy.Controller"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
            "since": [
              "1.4.0"
            ],
            "chainable": true
          },
          "private": null,
          "id": "method-updateViews",
          "linenr": 352,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/Alloy/lib/alloy/controllers/BaseController.js",
              "linenr": 352
            }
          ],
          "shortDoc": "Applies a set of properties to view elements associated with this controller. ...",
          "html_meta": {
            "since": "<h3>Since 1.4.0</h3>",
            "chainable": null
          }
        }
      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "linenr": 5,
    "files": [
      {
        "filename": "/Users/bimmel/Documents/Repositories/alloy/Alloy/lib/alloy/controllers/BaseController.js",
        "linenr": 5
      }
    ],
    "html_meta": {
    },
    "statics": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "component": false,
    "superclasses": [
      "Backbone.Events"
    ],
    "subclasses": [

    ],
    "mixedInto": [

    ],
    "parentMixins": [

    ]
  },
  {
    "tagname": "class",
    "name": "Alloy.builtins.moment",
    "doc": "<p>Moment.js is a freely distributable, third-party JavaScript date library\nfor parsing, validating, manipulating, and formatting dates.</p>\n\n<p>To use the moment.js library in Alloy,\nrequire it with the <code>alloy</code> root directory in your <code>require</code> call. For example:</p>\n\n<pre><code>var moment = require('/alloy/moment');\nvar day = moment(\"12-25-1995\", \"MM-DD-YYYY\");\nTi.API.info(\"Date:\" + day.format(\"dddd, MMMM Do YYYY, h:mm:ss a\")); // --&gt; Monday, December 25th 1995, 12:00:00 am\n</code></pre>\n\n<p>To change the locale globally, the application calls the moment.locale() function, passing it the new language code.</p>\n\n<pre><code>var moment = require('/alloy/moment');\nrequire('/alloy/moment/lang/de');\nrequire('/alloy/moment/lang/fr');\nmoment.locale(Ti.Locale.currentLocale); // Set current system locale, as a combination of ISO 2-letter language and country codes.\n</code></pre>\n\n<p>For documentation, usage examples and more information, see <a href=\"http://momentjs.com\">http://momentjs.com/</a>.</p>\n",
    "extends": null,
    "mixins": [

    ],
    "alternateClassNames": [

    ],
    "aliases": {
    },
    "singleton": false,
    "requires": [

    ],
    "uses": [

    ],
    "enum": null,
    "override": null,
    "inheritable": null,
    "inheritdoc": null,
    "meta": {
    },
    "private": null,
    "id": "class-Alloy.builtins.moment",
    "members": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "linenr": 1,
    "files": [
      {
        "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/moment.js",
        "linenr": 1
      }
    ],
    "html_meta": {
    },
    "statics": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "component": false,
    "superclasses": [

    ],
    "subclasses": [

    ],
    "mixedInto": [

    ],
    "parentMixins": [

    ]
  },
  {
    "tagname": "class",
    "name": "Alloy.builtins",
    "doc": "<p>Alloy provides some additional utility libraries that simplify certain functions,\nsuch as animations, string manipultation and display unit conversion.  These libraries\nare referred to as \"builtins.\"</p>\n\n<p>To use a builtin library, require the library name, minus the '.js' extension,\nwith <code>alloy</code> as the root directory in your <code>require</code> call.\nFor example, to use the animation builtin:</p>\n\n<pre><code>var animation = require('/alloy/animation');\nanimation.crossFade(view1, view2, 500, finishCallback);\n</code></pre>\n\n<p>During the compilation process, Alloy determines which builtins are being used,\nand adds them to the generated Titanium project.</p>\n",
    "extends": null,
    "mixins": [

    ],
    "alternateClassNames": [

    ],
    "aliases": {
    },
    "singleton": false,
    "requires": [

    ],
    "uses": [

    ],
    "enum": null,
    "override": null,
    "inheritable": null,
    "inheritdoc": null,
    "meta": {
    },
    "private": null,
    "id": "class-Alloy.builtins",
    "members": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "linenr": 1,
    "files": [
      {
        "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/builtins.js",
        "linenr": 1
      }
    ],
    "html_meta": {
    },
    "statics": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "component": false,
    "superclasses": [

    ],
    "subclasses": [

    ],
    "mixedInto": [

    ],
    "parentMixins": [

    ]
  },
  {
    "tagname": "class",
    "name": "Alloy",
    "doc": "<p>Top-level module for Alloy functions.</p>\n\n<p>Alloy is an application framework built on top of the Titanium SDK designed to help rapidly\ndevelop high quality applications and reduce maintenance.</p>\n\n<p>Alloy uses the model-view-controller architecture to separate the application into three\ncomponents:</p>\n\n<ul>\n<li><p><strong>Models</strong> provide the data of the application. Alloy utilizes <strong>Backbone Model and Collection</strong>\n objects for this functionality.</p></li>\n<li><p><strong>Views</strong> provide the UI components to interact with the application, written using <strong>XML markup</strong>\nand <strong>Titanium Stylesheets (TSS)</strong>, which abstracts the UI components of the Titanium API.</p></li>\n<li><p><strong>Controllers</strong> provide the glue layer between the Model and View components as well as\nadditional application logic using the <strong>Alloy API</strong> and <strong>Titanium API</strong>.</p></li>\n</ul>\n\n\n<p>The API documentation provided here is used with Alloy Controllers and Widget Controllers to\ninteract with the View and Model components of the application or widget.</p>\n\n<p>For guides on using Alloy, see\n<a href=\"http://docs.appcelerator.com/platform/latest/#!/guide/Alloy_Framework\">Alloy Framework</a>.</p>\n",
    "extends": null,
    "mixins": [

    ],
    "alternateClassNames": [

    ],
    "aliases": {
    },
    "singleton": false,
    "requires": [

    ],
    "uses": [

    ],
    "enum": null,
    "override": null,
    "inheritable": null,
    "inheritdoc": null,
    "meta": {
    },
    "private": null,
    "id": "class-Alloy",
    "members": {
      "cfg": [

      ],
      "property": [
        {
          "tagname": "property",
          "name": "CFG",
          "owner": "Alloy",
          "type": "Object",
          "doc": "<p>An object that stores Alloy configuration values as defined in your app's\napp/config.json file. Here's what a typical config.json file might look\nlike in an Alloy app.</p>\n\n<pre><code>{\n    \"global\": { \"key\": \"defaultValue\", \"anotherKey\": 12345 },\n    \"env:development\": {},\n    \"env:test\": {},\n    \"env:production\": {},\n    \"os:ios\": { \"key\": \"iosValue\" },\n    \"os:android\": { \"key\": \"androidValue\" },\n    \"dependencies\": {}\n}\n</code></pre>\n\n<p>If this app was compiled for iOS, the <a href=\"#!/api/Alloy-property-CFG\" rel=\"Alloy-property-CFG\" class=\"docClass\">Alloy.CFG</a> would look like this:</p>\n\n<pre><code><a href=\"#!/api/Alloy-property-CFG\" rel=\"Alloy-property-CFG\" class=\"docClass\">Alloy.CFG</a> = {\n    \"key\": \"iosValue\",\n    \"anotherKey\": 12345\n}\n</code></pre>\n\n<p><a href=\"#!/api/Alloy-property-CFG\" rel=\"Alloy-property-CFG\" class=\"docClass\">Alloy.CFG</a> is accessible in any controller in your app, and can be accessed\nin other non-controller Javascript files like this:</p>\n\n<pre><code>var theKey = require('/alloy').CFG.key;\n</code></pre>\n",
          "default": null,
          "properties": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "property-CFG",
          "linenr": 141,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/alloy.js",
              "linenr": 141
            }
          ],
          "shortDoc": "An object that stores Alloy configuration values as defined in your app's\napp/config.json file. ...",
          "html_type": "Object",
          "html_meta": {
          }
        },
        {
          "tagname": "property",
          "name": "Collections",
          "owner": "Alloy",
          "type": "Object",
          "doc": "<p>An object for storing globally accessible Alloy collections. Singleton collections\ncreated via markup will be stored on this object.</p>\n\n<pre><code>&lt;Collection src=\"myModel\"/&gt;\n</code></pre>\n\n<p>The above markup would effectively generate the following code:</p>\n\n<pre><code>Alloy.Collections.myModel = <a href=\"#!/api/Alloy-method-createCollection\" rel=\"Alloy-method-createCollection\" class=\"docClass\">Alloy.createCollection</a>('MyModel');\n</code></pre>\n\n<p>Alloy.Collections.myModel would then be accessible in any controller in your app.</p>\n",
          "default": null,
          "properties": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "property-Collections",
          "linenr": 120,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/alloy.js",
              "linenr": 120
            }
          ],
          "shortDoc": "An object for storing globally accessible Alloy collections. ...",
          "html_type": "Object",
          "html_meta": {
          }
        },
        {
          "tagname": "property",
          "name": "Globals",
          "owner": "Alloy",
          "type": "Object",
          "doc": "<p>An object for storing globally accessible variables and functions.\n<a href=\"#!/api/Alloy-property-Globals\" rel=\"Alloy-property-Globals\" class=\"docClass\">Alloy.Globals</a> is accessible in any controller in your app:</p>\n\n<pre><code>Alloy.Globals.someGlobalObject = { key: 'value' };\nAlloy.Globals.someGlobalFunction = function(){};\n</code></pre>\n\n<p><a href=\"#!/api/Alloy-property-Globals\" rel=\"Alloy-property-Globals\" class=\"docClass\">Alloy.Globals</a> can be accessed in other non-controller Javascript files\nlike this:</p>\n\n<pre><code>var theObject = require('/alloy').Globals.someGlobalObject;\n</code></pre>\n",
          "default": null,
          "properties": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "property-Globals",
          "linenr": 84,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/alloy.js",
              "linenr": 84
            }
          ],
          "shortDoc": "An object for storing globally accessible variables and functions. ...",
          "html_type": "Object",
          "html_meta": {
          }
        },
        {
          "tagname": "property",
          "name": "Models",
          "owner": "Alloy",
          "type": "Object",
          "doc": "<p>An object for storing globally accessible Alloy models. Singleton models\ncreated via markup will be stored on this object.</p>\n\n<pre><code>&lt;Model src=\"myModel\"/&gt;\n</code></pre>\n\n<p>The above markup would effectively generate the following code:</p>\n\n<pre><code>Alloy.Models.myModel = <a href=\"#!/api/Alloy-method-createModel\" rel=\"Alloy-method-createModel\" class=\"docClass\">Alloy.createModel</a>('MyModel');\n</code></pre>\n\n<p>Alloy.Models.myModel would then be accessible in any controller in your app.</p>\n",
          "default": null,
          "properties": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "property-Models",
          "linenr": 99,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/alloy.js",
              "linenr": 99
            }
          ],
          "shortDoc": "An object for storing globally accessible Alloy models. ...",
          "html_type": "Object",
          "html_meta": {
          }
        },
        {
          "tagname": "property",
          "name": "isHandheld",
          "owner": "Alloy",
          "type": "Boolean",
          "doc": "<p><code>true</code> if the current device is a handheld device (not a tablet).</p>\n",
          "default": null,
          "properties": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "property-isHandheld",
          "linenr": 77,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/alloy.js",
              "linenr": 77
            }
          ],
          "html_type": "Boolean",
          "html_meta": {
          }
        },
        {
          "tagname": "property",
          "name": "isTablet",
          "owner": "Alloy",
          "type": "Boolean",
          "doc": "<p><code>true</code> if the current device is a tablet.</p>\n",
          "default": null,
          "properties": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "property-isTablet",
          "linenr": 71,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/alloy.js",
              "linenr": 71
            }
          ],
          "html_type": "Boolean",
          "html_meta": {
          }
        }
      ],
      "method": [
        {
          "tagname": "method",
          "name": "createCollection",
          "owner": "Alloy",
          "doc": "<p>Factory method for instantiating a Backbone collection of model objects. Creates and returns a\ncollection for holding the named type of model objects.</p>\n\n<p>See <a href=\"http://docs.appcelerator.com/backbone/0.9.2/#Collection\">Backbone.Collection</a> in the Backbone.js\ndocumentation for  information on the methods and  properties provided by the\nCollection object.</p>\n",
          "params": [
            {
              "type": "String",
              "name": "name",
              "doc": "<p>Name of model to hold in this collection.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "String"
            },
            {
              "type": "Object",
              "name": "args",
              "doc": "<p>Arguments to pass to the collection.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "Object"
            }
          ],
          "return": {
            "type": "Backbone.Collection",
            "name": "return",
            "doc": "<p>Backbone collection object.</p>\n\n",
            "properties": null,
            "html_type": "Backbone.Collection"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "method-createCollection",
          "linenr": 58,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/alloy.js",
              "linenr": 58
            }
          ],
          "shortDoc": "Factory method for instantiating a Backbone collection of model objects. ...",
          "html_meta": {
          }
        },
        {
          "tagname": "method",
          "name": "createController",
          "owner": "Alloy",
          "doc": "<p>Factory method for instantiating a controller. Creates and returns an instance of the\nnamed controller.</p>\n",
          "params": [
            {
              "type": "String",
              "name": "name",
              "doc": "<p>Name of controller to instantiate.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "String"
            },
            {
              "type": "Object",
              "name": "args",
              "doc": "<p>Arguments to pass to the controller.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "Object"
            }
          ],
          "return": {
            "type": "Alloy.Controller",
            "name": "return",
            "doc": "<p>Alloy controller object.</p>\n\n",
            "properties": null,
            "html_type": "Alloy.Controller"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "method-createController",
          "linenr": 37,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/alloy.js",
              "linenr": 37
            }
          ],
          "shortDoc": "Factory method for instantiating a controller. ...",
          "html_meta": {
          }
        },
        {
          "tagname": "method",
          "name": "createModel",
          "owner": "Alloy",
          "doc": "<p>Factory method for instantiating a Backbone Model object. Creates and returns an instance of the\nnamed model.</p>\n\n<p>See <a href=\"http://docs.appcelerator.com/backbone/0.9.2/#Model\">Backbone.Model</a> in the Backbone.js documentation for\ninformation on the methods and properties provided by the Model object.</p>\n",
          "params": [
            {
              "type": "String",
              "name": "name",
              "doc": "<p>Name of model to instantiate.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "String"
            },
            {
              "type": "Object",
              "name": "args",
              "doc": "<p>Arguments to pass to the model.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "Object"
            }
          ],
          "return": {
            "type": "Backbone.Model",
            "name": "return",
            "doc": "<p>Backbone model object.</p>\n\n",
            "properties": null,
            "html_type": "Backbone.Model"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "method-createModel",
          "linenr": 46,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/alloy.js",
              "linenr": 46
            }
          ],
          "shortDoc": "Factory method for instantiating a Backbone Model object. ...",
          "html_meta": {
          }
        },
        {
          "tagname": "method",
          "name": "createWidget",
          "owner": "Alloy",
          "doc": "<p>Factory method for instantiating a widget controller. Creates and returns an instance of the\nnamed widget.</p>\n",
          "params": [
            {
              "type": "String",
              "name": "id",
              "doc": "<p>Id of widget to instantiate.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "String"
            },
            {
              "type": "String",
              "name": "name",
              "doc": "<p>Name of the view within the widget to instantiate ('widget' by default)</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": "\"widget\"",
              "properties": [

              ],
              "html_type": "String"
            },
            {
              "type": "Object",
              "name": "args",
              "doc": "<p>Arguments to pass to the widget.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "Object"
            }
          ],
          "return": {
            "type": "Alloy.Controller",
            "name": "return",
            "doc": "<p>Alloy widget controller object.</p>\n\n",
            "properties": null,
            "html_type": "Alloy.Controller"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "method-createWidget",
          "linenr": 27,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/alloy.js",
              "linenr": 27
            }
          ],
          "shortDoc": "Factory method for instantiating a widget controller. ...",
          "html_meta": {
          }
        }
      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "linenr": 1,
    "files": [
      {
        "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/alloy.js",
        "linenr": 1
      }
    ],
    "html_meta": {
    },
    "statics": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "component": false,
    "superclasses": [

    ],
    "subclasses": [

    ],
    "mixedInto": [

    ],
    "parentMixins": [

    ]
  },
  {
    "tagname": "class",
    "name": "Alloy.Controller.UI",
    "doc": "<p>Provides convenience methods for working with Titanium UI objects.</p>\n",
    "extends": null,
    "mixins": [

    ],
    "alternateClassNames": [

    ],
    "aliases": {
    },
    "singleton": false,
    "requires": [

    ],
    "uses": [

    ],
    "enum": null,
    "override": null,
    "inheritable": null,
    "inheritdoc": null,
    "meta": {
    },
    "private": null,
    "id": "class-Alloy.Controller.UI",
    "members": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [
        {
          "tagname": "method",
          "name": "create",
          "owner": "Alloy.Controller.UI",
          "doc": "<p>Creates a Titanium UI object with the specified styles.</p>\n\n<h4>Example</h4>\n\n<p>The following creates a new View object and assigns the \"dialog\"\nTSS class (defined elsewhere) to the view, and finally adds it to main window.</p>\n\n<pre><code>var view = $.UI.create(\"View\", {\n    classes: 'dialog'\n});\n$.index.add(view);\n</code></pre>\n",
          "params": [
            {
              "type": "String",
              "name": "apiName",
              "doc": "<p>Name of the Titanium object to create. This can either be the full class\nname, such as <code>Ti.UI.Button</code>, or the XML element, such as <code>Button</code>.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "String"
            },
            {
              "type": "AlloyStyleDict",
              "name": "opts",
              "doc": "<p>Dictionary of styles to apply. <code>opts</code> may also contain any additional properties you would like to apply directly the created Titanium object.</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "AlloyStyleDict"
            }
          ],
          "return": {
            "type": "Titanium.UI.View/Alloy.Controller",
            "name": "return",
            "doc": "\n",
            "properties": null,
            "html_type": "Titanium.UI.View/Alloy.Controller"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
            "since": [
              "1.2.0"
            ]
          },
          "private": null,
          "id": "method-create",
          "linenr": 7,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/controller.js",
              "linenr": 7
            }
          ],
          "shortDoc": "Creates a Titanium UI object with the specified styles. ...",
          "html_meta": {
            "since": "<h3>Since 1.2.0</h3>"
          }
        }
      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "linenr": 1,
    "files": [
      {
        "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/controller.js",
        "linenr": 1
      }
    ],
    "html_meta": {
    },
    "statics": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "component": false,
    "superclasses": [

    ],
    "subclasses": [

    ],
    "mixedInto": [

    ],
    "parentMixins": [

    ]
  },
  {
    "tagname": "class",
    "name": "AlloyStyleDict",
    "doc": "<p>Simple JavaScript object of properties and TSS classes to apply to a Titanium UI object.</p>\n\n<p>All properties are optional.</p>\n\n<p>The <code>apiName</code> property is only specified with the <code>createStyle</code> method.</p>\n\n<p>In addition to the properties defined below, you can also specify properties related to the\ncomponent.</p>\n",
    "extends": null,
    "mixins": [

    ],
    "alternateClassNames": [

    ],
    "aliases": {
    },
    "singleton": false,
    "requires": [

    ],
    "uses": [

    ],
    "enum": null,
    "override": null,
    "inheritable": null,
    "inheritdoc": null,
    "meta": {
      "typestr": [
        "Object"
      ],
      "since": [
        "1.2.0"
      ],
      "pseudo": [
        null
      ]
    },
    "private": null,
    "id": "class-AlloyStyleDict",
    "members": {
      "cfg": [

      ],
      "property": [
        {
          "tagname": "property",
          "name": "apiName",
          "owner": "AlloyStyleDict",
          "type": "String",
          "doc": "<p>Name of the Titanium UI object. This can either be the full class name, such as\n<code>Ti.UI.Button</code>, or the XML element, such as <code>Button</code>.</p>\n\n<p>Specified only with <a href=\"#!/api/Alloy.Controller-method-createStyle\" rel=\"Alloy.Controller-method-createStyle\" class=\"docClass\">createStyle</a>.</p>\n",
          "default": null,
          "properties": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "property-apiName",
          "linenr": 40,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/controller.js",
              "linenr": 40
            }
          ],
          "shortDoc": "Name of the Titanium UI object. ...",
          "html_type": "String",
          "html_meta": {
          }
        },
        {
          "tagname": "property",
          "name": "classes",
          "owner": "AlloyStyleDict",
          "type": "Array<String>",
          "doc": "<p>Array of TSS classes to apply to the Titanium UI object.</p>\n",
          "default": null,
          "properties": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "property-classes",
          "linenr": 49,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/controller.js",
              "linenr": 49
            }
          ],
          "html_type": "Array<String>",
          "html_meta": {
          }
        },
        {
          "tagname": "property",
          "name": "id",
          "owner": "AlloyStyleDict",
          "type": "String",
          "doc": "<p>TSS ID style to apply to the Titanium UI object.</p>\n",
          "default": null,
          "properties": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "property-id",
          "linenr": 55,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/controller.js",
              "linenr": 55
            }
          ],
          "html_type": "String",
          "html_meta": {
          }
        }
      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "linenr": 25,
    "files": [
      {
        "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/controller.js",
        "linenr": 25
      }
    ],
    "html_meta": {
      "typestr": "",
      "since": "<h3>Since 1.2.0</h3>",
      "pseudo": [
        "<p class='private'><strong>NOTE</strong> ",
        "This is an abstract type. Any object meeting this description can be used ",
        "where this type is used.</p>"
      ]
    },
    "statics": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "component": false,
    "superclasses": [

    ],
    "subclasses": [

    ],
    "mixedInto": [

    ],
    "parentMixins": [

    ]
  },
  {
    "tagname": "class",
    "name": "TrackedEventListener",
    "doc": "<p>A tracked event listener.</p>\n",
    "extends": null,
    "mixins": [

    ],
    "alternateClassNames": [

    ],
    "aliases": {
    },
    "singleton": false,
    "requires": [

    ],
    "uses": [

    ],
    "enum": null,
    "override": null,
    "inheritable": null,
    "inheritdoc": null,
    "meta": {
      "typestr": [
        "Object"
      ],
      "since": [
        "1.7.0"
      ],
      "pseudo": [
        null
      ]
    },
    "private": null,
    "id": "class-TrackedEventListener",
    "members": {
      "cfg": [

      ],
      "property": [
        {
          "tagname": "property",
          "name": "handler",
          "owner": "TrackedEventListener",
          "type": "Function",
          "doc": "<p>Callback bound to the view's event.</p>\n",
          "default": null,
          "properties": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "property-handler",
          "linenr": 69,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/controller.js",
              "linenr": 69
            }
          ],
          "html_type": "Function",
          "html_meta": {
          }
        },
        {
          "tagname": "property",
          "name": "id",
          "owner": "TrackedEventListener",
          "type": "String",
          "doc": "<p>ID attribute of the view object. If the view object does not have an ID attribute,\nAlloy assigns it a unique ID.</p>\n",
          "default": null,
          "properties": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "property-id",
          "linenr": 75,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/controller.js",
              "linenr": 75
            }
          ],
          "shortDoc": "ID attribute of the view object. ...",
          "html_type": "String",
          "html_meta": {
          }
        },
        {
          "tagname": "property",
          "name": "type",
          "owner": "TrackedEventListener",
          "type": "String",
          "doc": "<p>Name of the event.</p>\n",
          "default": null,
          "properties": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "property-type",
          "linenr": 82,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/controller.js",
              "linenr": 82
            }
          ],
          "html_type": "String",
          "html_meta": {
          }
        },
        {
          "tagname": "property",
          "name": "view",
          "owner": "TrackedEventListener",
          "type": "Object",
          "doc": "<p>View object bound to the event listener.</p>\n",
          "default": null,
          "properties": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "property-view",
          "linenr": 88,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/controller.js",
              "linenr": 88
            }
          ],
          "html_type": "Object",
          "html_meta": {
          }
        }
      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "linenr": 61,
    "files": [
      {
        "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/controller.js",
        "linenr": 61
      }
    ],
    "html_meta": {
      "typestr": "",
      "since": "<h3>Since 1.7.0</h3>",
      "pseudo": [
        "<p class='private'><strong>NOTE</strong> ",
        "This is an abstract type. Any object meeting this description can be used ",
        "where this type is used.</p>"
      ]
    },
    "statics": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "component": false,
    "superclasses": [

    ],
    "subclasses": [

    ],
    "mixedInto": [

    ],
    "parentMixins": [

    ]
  },
  {
    "tagname": "class",
    "name": "Alloy.Widget",
    "doc": "<p>Widgets are self-contained components that can be easily dropped into an Alloy project.\nThey were conceived as a way to reuse code in multiple projects or to be used multiple\ntimes in the same project.</p>\n\n<p>Note that to use the methods list below, the correct namespace is <code>Widget.create*</code> not\n<code>Alloy.Widget.create*</code>.</p>\n\n<p>For more information on widgets, see <a href=\"http://docs.appcelerator.com/platform/latest/#!/guide/Alloy_Widgets\">Alloy Widgets</a>.</p>\n\n<h4>Creating a Widget</h4>\n\n<p>Widgets are essentially miniature Alloy projects that contain their own models, views, controllers\nand assets.  They are laid out the same way as an Alloy project.</p>\n\n<p>Use <code>Widget.createController()</code>, <code>Widget.createWidget()</code>,  <code>Widget.createModel()</code> and\n<code>Widget.createCollection()</code> rather than the <code>Alloy.create*</code> methods to create\ncomponents relative to the widget context rather than the Alloy project.</p>\n\n<h4>Using a Widget</h4>\n\n<p>To import a widget in to a project:</p>\n\n<ol>\n<li>Copy the widget to the <code>app/widgets</code> folder.  The widget must be contained within its own folder.</li>\n<li>Update the <code>dependencies</code> object in the <code>config.json</code> file by adding a key/value pair with the name of\nthe widget as the key and the version number as the value.</li>\n<li><p>Add the widget to a view or create an instance of the widget in a controller:</p>\n\n<ul>\n<li>To add a widget to a view, add the <Widget> tag in the XML markup and\nset the <code>src</code> attribute to the folder name of the widget.</Widget></li>\n<li>To create an instance of a widget in a controller, use the <a href=\"#!/api/Alloy-method-createController\" rel=\"Alloy-method-createController\" class=\"docClass\">Alloy.createController</a> method.</li>\n</ul>\n</li>\n</ol>\n\n\n<p>You can optionally add the <code>id</code> and <code>name</code> attributes to the <code>Widget</code> element:</p>\n\n<ul>\n<li>The <code>id</code> attribute allows you to reference the widget in the controller code.  You can use this\nreference to call methods exported by the widget.</li>\n<li>The <code>name</code> attribute allows you to import a specific view-controller in the widget rather than the\ndefault one (<code>widget.xml</code>/<code>widget.js</code>).  Specify the name of the view-controller minus the extension.</li>\n</ul>\n\n\n<p>For example, to import a widget called <code>mywidget</code> in to a project, copy <code>mywidget</code> to the\n<code>app/widgets</code> folder, where its assets, controllers, views, etc. are contained in the\n<code>app/widgets/mywidget</code> folder.</p>\n\n<pre><code>app\n├── config.json\n├── controllers\n│   └── index.js\n├── views\n│   └── index.xml\n└── widgets\n    └── mywidget\n        ├── controllers\n        │   ├── foo.js\n        │   └── widget.js\n        ├── views\n        │   ├── foo.xml\n        │   └── widget.xml\n        └── widget.json\n</code></pre>\n\n<p>Next, add it as a dependency in your <code>config.json</code> file:</p>\n\n<pre><code>...\n\"dependencies\":{\n    \"mywidget\":\"1.0\"\n}\n</code></pre>\n\n<p>Finally, either add the widget in the XML markup of the view or create an instance of the widget in the controller.</p>\n\n<p>To add the widget in the view, use the <code>Widget</code> tag, specifying the <code>src</code> attribute as the name of\nthe widget:</p>\n\n<pre><code>&lt;Alloy&gt;\n    &lt;Window id=\"win\"&gt;\n        &lt;Widget id=\"myWidget\" src=\"mywidget\" /&gt;\n    &lt;/Window&gt;\n&lt;/Alloy&gt;\n</code></pre>\n\n<p>Since the <code>id</code> attribute is defined, the widget can be referenced in the controller using\n<code>$.myWidget</code>.</p>\n\n<p>To add the widget in the controller, use the <code><a href=\"#!/api/Alloy-method-createWidget\" rel=\"Alloy-method-createWidget\" class=\"docClass\">Alloy.createWidget</a></code> method. The first required parameter is\nthe name of the widget. The second optional parameter can specify the view component to\ninstantiate and the last optional parameter can specify the arguments to instantiate the widget.\nFor example, the following controller code is equivalent to the previous view markup example.</p>\n\n<pre><code>var myWidget = <a href=\"#!/api/Alloy-method-createWidget\" rel=\"Alloy-method-createWidget\" class=\"docClass\">Alloy.createWidget</a>(\"mywidget\");\nwin.add(myWidget.getView());\n</code></pre>\n\n<p>A widget can also be added to other widgets.  Follow the same procedure as above except the widget\nconfiguration file is called <code>widget.json</code> instead of <code>config.json</code>.</p>\n",
    "extends": null,
    "mixins": [

    ],
    "alternateClassNames": [

    ],
    "aliases": {
    },
    "singleton": false,
    "requires": [

    ],
    "uses": [

    ],
    "enum": null,
    "override": null,
    "inheritable": null,
    "inheritdoc": null,
    "meta": {
    },
    "private": null,
    "id": "class-Alloy.Widget",
    "members": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [
        {
          "tagname": "method",
          "name": "createCollection",
          "owner": "Alloy.Widget",
          "doc": "<p>Factory method for instantiating a Backbone collection of model objects. Creates and returns a\ncollection for holding the named type of model objects.</p>\n\n<p>See <a href=\"http://docs.appcelerator.com/backbone/0.9.2/#Collection\">Backbone.Collection</a> in the Backbone.js\ndocumentation for  information on the methods and  properties provided by the\nCollection object.</p>\n",
          "params": [
            {
              "type": "String",
              "name": "name",
              "doc": "<p>Name of model to hold in this collection.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "String"
            },
            {
              "type": "Object",
              "name": "args",
              "doc": "<p>Arguments to pass to the collection.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "Object"
            }
          ],
          "return": {
            "type": "Backbone.Collection",
            "name": "return",
            "doc": "<p>Backbone collection object.</p>\n\n",
            "properties": null,
            "html_type": "Backbone.Collection"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": {
            "tagname": "inheritdoc",
            "doc": null,
            "cls": "Alloy",
            "member": "createCollection"
          },
          "meta": {
            "since": [
              "1.1.0"
            ]
          },
          "private": null,
          "id": "method-createCollection",
          "linenr": 96,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/widgets.js",
              "linenr": 96
            }
          ],
          "shortDoc": "Factory method for instantiating a Backbone collection of model objects. ...",
          "html_meta": {
            "since": "<h3>Since 1.1.0</h3>"
          }
        },
        {
          "tagname": "method",
          "name": "createController",
          "owner": "Alloy.Widget",
          "doc": "<p>Factory method for instantiating a controller. Creates and returns an instance of the\nnamed controller.</p>\n",
          "params": [
            {
              "type": "String",
              "name": "name",
              "doc": "<p>Name of controller to instantiate.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "String"
            },
            {
              "type": "Object",
              "name": "args",
              "doc": "<p>Arguments to pass to the controller.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "Object"
            }
          ],
          "return": {
            "type": "Alloy.Controller",
            "name": "return",
            "doc": "<p>Alloy controller object.</p>\n\n",
            "properties": null,
            "html_type": "Alloy.Controller"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": {
            "tagname": "inheritdoc",
            "doc": null,
            "cls": "Alloy",
            "member": "createController"
          },
          "meta": {
            "since": [
              "1.1.0"
            ]
          },
          "private": null,
          "id": "method-createController",
          "linenr": 102,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/widgets.js",
              "linenr": 102
            }
          ],
          "shortDoc": "Factory method for instantiating a controller. ...",
          "html_meta": {
            "since": "<h3>Since 1.1.0</h3>"
          }
        },
        {
          "tagname": "method",
          "name": "createModel",
          "owner": "Alloy.Widget",
          "doc": "<p>Factory method for instantiating a Backbone Model object. Creates and returns an instance of the\nnamed model.</p>\n\n<p>See <a href=\"http://docs.appcelerator.com/backbone/0.9.2/#Model\">Backbone.Model</a> in the Backbone.js documentation for\ninformation on the methods and properties provided by the Model object.</p>\n",
          "params": [
            {
              "type": "String",
              "name": "name",
              "doc": "<p>Name of model to instantiate.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "String"
            },
            {
              "type": "Object",
              "name": "args",
              "doc": "<p>Arguments to pass to the model.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "Object"
            }
          ],
          "return": {
            "type": "Backbone.Model",
            "name": "return",
            "doc": "<p>Backbone model object.</p>\n\n",
            "properties": null,
            "html_type": "Backbone.Model"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": {
            "tagname": "inheritdoc",
            "doc": null,
            "cls": "Alloy",
            "member": "createModel"
          },
          "meta": {
            "since": [
              "1.1.0"
            ]
          },
          "private": null,
          "id": "method-createModel",
          "linenr": 108,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/widgets.js",
              "linenr": 108
            }
          ],
          "shortDoc": "Factory method for instantiating a Backbone Model object. ...",
          "html_meta": {
            "since": "<h3>Since 1.1.0</h3>"
          }
        },
        {
          "tagname": "method",
          "name": "createWidget",
          "owner": "Alloy.Widget",
          "doc": "<p>Factory method for instantiating a widget controller. Creates and returns an instance of the\nnamed widget.</p>\n",
          "params": [
            {
              "type": "String",
              "name": "id",
              "doc": "<p>Id of widget to instantiate.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "String"
            },
            {
              "type": "String",
              "name": "name",
              "doc": "<p>Name of the view within the widget to instantiate ('widget' by default)</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": "\"widget\"",
              "properties": [

              ],
              "html_type": "String"
            },
            {
              "type": "Object",
              "name": "args",
              "doc": "<p>Arguments to pass to the widget.</p>\n\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": true,
              "default": null,
              "properties": [

              ],
              "html_type": "Object"
            }
          ],
          "return": {
            "type": "Alloy.Controller",
            "name": "return",
            "doc": "<p>Alloy widget controller object.</p>\n\n",
            "properties": null,
            "html_type": "Alloy.Controller"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": {
            "tagname": "inheritdoc",
            "doc": null,
            "cls": "Alloy",
            "member": "createWidget"
          },
          "meta": {
            "since": [
              "1.1.0"
            ]
          },
          "private": null,
          "id": "method-createWidget",
          "linenr": 114,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/widgets.js",
              "linenr": 114
            }
          ],
          "shortDoc": "Factory method for instantiating a widget controller. ...",
          "html_meta": {
            "since": "<h3>Since 1.1.0</h3>"
          }
        }
      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "linenr": 1,
    "files": [
      {
        "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/widgets.js",
        "linenr": 1
      }
    ],
    "html_meta": {
    },
    "statics": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "component": false,
    "superclasses": [

    ],
    "subclasses": [

    ],
    "mixedInto": [

    ],
    "parentMixins": [

    ]
  },
  {
    "tagname": "class",
    "name": "Alloy.widgets",
    "doc": "<p>The sample widgets are no longer supplied or supported and have been removed from Alloy.</p>\n\n<p>Maintained versions of the sample widgets are available at <a href=\"http://gitt.io/\">http://gitt.io/</a>.</p>\n\n<p>For information on using a widget in your project, see\n<a href=\"#!/api/Alloy.Widget\" rel=\"Alloy.Widget\" class=\"docClass\">Alloy.Widget</a>.</p>\n",
    "extends": null,
    "mixins": [

    ],
    "alternateClassNames": [

    ],
    "aliases": {
    },
    "singleton": false,
    "requires": [

    ],
    "uses": [

    ],
    "enum": null,
    "override": null,
    "inheritable": null,
    "inheritdoc": null,
    "meta": {
    },
    "private": null,
    "id": "class-Alloy.widgets",
    "members": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "linenr": 120,
    "files": [
      {
        "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/widgets.js",
        "linenr": 120
      }
    ],
    "html_meta": {
    },
    "statics": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "component": false,
    "superclasses": [

    ],
    "subclasses": [

    ],
    "mixedInto": [

    ],
    "parentMixins": [

    ]
  },
  {
    "tagname": "class",
    "name": "Alloy.Models",
    "doc": "<p>Class to access or create models.</p>\n\n<p>Models can either be created in markup or programmatically in the controller.</p>\n\n<p>To create models in markup, see the 'Model Element' section in the\n<a href=\"#!/guide/Alloy_XML_Markup\">Alloy XML Markup guide</a>.</p>\n\n<p>In the controller code:</p>\n\n<ul>\n<li> To create a local instance, use the <a href=\"#!/api/Alloy-method-createModel\" rel=\"Alloy-method-createModel\" class=\"docClass\">Alloy.createModel</a> method.</li>\n<li> To create a global singleton instance, use the <a href=\"#!/api/Alloy.Models-method-instance\" rel=\"Alloy.Models-method-instance\" class=\"docClass\">Alloy.Models.instance</a> method.</li>\n</ul>\n\n\n<p>Previously created models through markup or using the <code>instance</code> method\nare directly accessed as properties of the <code><a href=\"#!/api/Alloy.Models\" rel=\"Alloy.Models\" class=\"docClass\">Alloy.Models</a></code> namespace,\nusing either the name of the model JavaScript file for singletons\nor the ID name for local instances.</p>\n",
    "extends": null,
    "mixins": [

    ],
    "alternateClassNames": [

    ],
    "aliases": {
    },
    "singleton": false,
    "requires": [

    ],
    "uses": [

    ],
    "enum": null,
    "override": null,
    "inheritable": null,
    "inheritdoc": null,
    "meta": {
    },
    "private": null,
    "id": "class-Alloy.Models",
    "members": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [
        {
          "tagname": "method",
          "name": "instance",
          "owner": "Alloy.Models",
          "doc": "<p>Creates a singleton instance of a Model based on the given model, or\nreturns an existing instance if one has already been created.</p>\n",
          "params": [
            {
              "type": "String",
              "name": "name",
              "doc": "<p>the name of the base model for the model</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "String"
            }
          ],
          "return": {
            "type": "Backbone.Model",
            "name": "return",
            "doc": "<p>An Alloy Model object singleton</p>\n",
            "properties": null,
            "html_type": "Backbone.Model"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "method-instance",
          "linenr": 21,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/model.js",
              "linenr": 21
            }
          ],
          "shortDoc": "Creates a singleton instance of a Model based on the given model, or\nreturns an existing instance if one has already ...",
          "html_meta": {
          }
        }
      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "linenr": 1,
    "files": [
      {
        "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/model.js",
        "linenr": 1
      }
    ],
    "html_meta": {
    },
    "statics": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "component": false,
    "superclasses": [

    ],
    "subclasses": [

    ],
    "mixedInto": [

    ],
    "parentMixins": [

    ]
  },
  {
    "tagname": "class",
    "name": "Alloy.Collections",
    "doc": "<p>Class to access or create collections.</p>\n\n<p>Collections can either be created in markup or programmatically in the controller.</p>\n\n<p>To create collections in markup use a <code>&lt;Collection/&gt;</code> element. For\nmore information see <a href=\"#!/guide/Alloy_XML_Markup-section-35621528_AlloyXMLMarkup-CollectionElement\">Collection Element</a>\nin the Alloy developer guide.</p>\n\n<p>In the controller code:</p>\n\n<ul>\n<li> To create a local instance, use the <a href=\"#!/api/Alloy-method-createCollection\" rel=\"Alloy-method-createCollection\" class=\"docClass\">Alloy.createCollection</a> method.</li>\n<li> To create a global singleton instance, use the <a href=\"#!/api/Alloy.Collections-method-instance\" rel=\"Alloy.Collections-method-instance\" class=\"docClass\">Alloy.Collections.instance</a> method.</li>\n</ul>\n\n\n<p>Previously created collections through markup or using the <code><a href=\"#!/api/Alloy.Collections-method-instance\" rel=\"Alloy.Collections-method-instance\" class=\"docClass\">instance()</a></code> method\nare directly accessed as properties of the <code><a href=\"#!/api/Alloy.Collections\" rel=\"Alloy.Collections\" class=\"docClass\">Alloy.Collections</a></code> namespace,\nusing either the name of the model JavaScript file for singletons\nor the ID name for local instances.</p>\n",
    "extends": null,
    "mixins": [

    ],
    "alternateClassNames": [

    ],
    "aliases": {
    },
    "singleton": false,
    "requires": [

    ],
    "uses": [

    ],
    "enum": null,
    "override": null,
    "inheritable": null,
    "inheritdoc": null,
    "meta": {
    },
    "private": null,
    "id": "class-Alloy.Collections",
    "members": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [
        {
          "tagname": "method",
          "name": "instance",
          "owner": "Alloy.Collections",
          "doc": "<p>Creates a singleton instance of a Collection based on the given model, or\nreturns an existing instance if one has already been created.</p>\n",
          "params": [
            {
              "type": "String",
              "name": "name",
              "doc": "<p>the name of the base model for the collection</p>\n",
              "deprecated": false,
              "platforms": null,
              "inline_platforms": null,
              "optional": false,
              "default": null,
              "properties": [

              ],
              "html_type": "String"
            }
          ],
          "return": {
            "type": "Backbone.Collection",
            "name": "return",
            "doc": "<p>An Alloy Collection object singleton</p>\n",
            "properties": null,
            "html_type": "Backbone.Collection"
          },
          "throws": null,
          "inheritable": null,
          "inheritdoc": null,
          "meta": {
          },
          "private": null,
          "id": "method-instance",
          "linenr": 22,
          "files": [
            {
              "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/collection.js",
              "linenr": 22
            }
          ],
          "shortDoc": "Creates a singleton instance of a Collection based on the given model, or\nreturns an existing instance if one has alr...",
          "html_meta": {
          }
        }
      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "linenr": 1,
    "files": [
      {
        "filename": "/Users/bimmel/Documents/Repositories/alloy/docs/apidoc/collection.js",
        "linenr": 1
      }
    ],
    "html_meta": {
    },
    "statics": {
      "cfg": [

      ],
      "property": [

      ],
      "method": [

      ],
      "event": [

      ],
      "css_var": [

      ],
      "css_mixin": [

      ]
    },
    "component": false,
    "superclasses": [

    ],
    "subclasses": [

    ],
    "mixedInto": [

    ],
    "parentMixins": [

    ]
  }
]
